
random.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f40  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000a4  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000f8  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d4  080063d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080063dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000078  08006454  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08006454  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bc4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ae  00000000  00000000  00036c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0003a020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  0003b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e711  00000000  00000000  0003c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d83  00000000  00000000  0005a769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abf00  00000000  00000000  0006d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001193ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052dc  00000000  00000000  00119440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060b8 	.word	0x080060b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080060b8 	.word	0x080060b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2uiz>:
 8000980:	004a      	lsls	r2, r1, #1
 8000982:	d211      	bcs.n	80009a8 <__aeabi_d2uiz+0x28>
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000988:	d211      	bcs.n	80009ae <__aeabi_d2uiz+0x2e>
 800098a:	d50d      	bpl.n	80009a8 <__aeabi_d2uiz+0x28>
 800098c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d40e      	bmi.n	80009b4 <__aeabi_d2uiz+0x34>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	4770      	bx	lr
 80009a8:	f04f 0000 	mov.w	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b2:	d102      	bne.n	80009ba <__aeabi_d2uiz+0x3a>
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr

080009c0 <selfrel_offset31>:
 80009c0:	6803      	ldr	r3, [r0, #0]
 80009c2:	005a      	lsls	r2, r3, #1
 80009c4:	bf4c      	ite	mi
 80009c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80009ce:	4418      	add	r0, r3
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <search_EIT_table>:
 80009d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009d8:	b329      	cbz	r1, 8000a26 <search_EIT_table+0x52>
 80009da:	1e4f      	subs	r7, r1, #1
 80009dc:	4604      	mov	r4, r0
 80009de:	4615      	mov	r5, r2
 80009e0:	463e      	mov	r6, r7
 80009e2:	f04f 0800 	mov.w	r8, #0
 80009e6:	eb08 0106 	add.w	r1, r8, r6
 80009ea:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80009ee:	1049      	asrs	r1, r1, #1
 80009f0:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 80009f4:	4648      	mov	r0, r9
 80009f6:	f7ff ffe3 	bl	80009c0 <selfrel_offset31>
 80009fa:	4603      	mov	r3, r0
 80009fc:	00c8      	lsls	r0, r1, #3
 80009fe:	3008      	adds	r0, #8
 8000a00:	428f      	cmp	r7, r1
 8000a02:	4420      	add	r0, r4
 8000a04:	d009      	beq.n	8000a1a <search_EIT_table+0x46>
 8000a06:	42ab      	cmp	r3, r5
 8000a08:	d809      	bhi.n	8000a1e <search_EIT_table+0x4a>
 8000a0a:	f7ff ffd9 	bl	80009c0 <selfrel_offset31>
 8000a0e:	3801      	subs	r0, #1
 8000a10:	42a8      	cmp	r0, r5
 8000a12:	d20a      	bcs.n	8000a2a <search_EIT_table+0x56>
 8000a14:	f101 0801 	add.w	r8, r1, #1
 8000a18:	e7e5      	b.n	80009e6 <search_EIT_table+0x12>
 8000a1a:	42ab      	cmp	r3, r5
 8000a1c:	d905      	bls.n	8000a2a <search_EIT_table+0x56>
 8000a1e:	4588      	cmp	r8, r1
 8000a20:	d001      	beq.n	8000a26 <search_EIT_table+0x52>
 8000a22:	1e4e      	subs	r6, r1, #1
 8000a24:	e7df      	b.n	80009e6 <search_EIT_table+0x12>
 8000a26:	f04f 0900 	mov.w	r9, #0
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000a30 <__gnu_unwind_get_pr_addr>:
 8000a30:	2801      	cmp	r0, #1
 8000a32:	d007      	beq.n	8000a44 <__gnu_unwind_get_pr_addr+0x14>
 8000a34:	2802      	cmp	r0, #2
 8000a36:	d007      	beq.n	8000a48 <__gnu_unwind_get_pr_addr+0x18>
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <__gnu_unwind_get_pr_addr+0x1c>)
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf0c      	ite	eq
 8000a3e:	4618      	moveq	r0, r3
 8000a40:	2000      	movne	r0, #0
 8000a42:	4770      	bx	lr
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <__gnu_unwind_get_pr_addr+0x20>)
 8000a46:	4770      	bx	lr
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <__gnu_unwind_get_pr_addr+0x24>)
 8000a4a:	4770      	bx	lr
 8000a4c:	080010f5 	.word	0x080010f5
 8000a50:	080010f9 	.word	0x080010f9
 8000a54:	080010fd 	.word	0x080010fd

08000a58 <get_eit_entry>:
 8000a58:	b530      	push	{r4, r5, lr}
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <get_eit_entry+0x90>)
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	4604      	mov	r4, r0
 8000a60:	1e8d      	subs	r5, r1, #2
 8000a62:	b33b      	cbz	r3, 8000ab4 <get_eit_entry+0x5c>
 8000a64:	a901      	add	r1, sp, #4
 8000a66:	4628      	mov	r0, r5
 8000a68:	f3af 8000 	nop.w
 8000a6c:	b1e8      	cbz	r0, 8000aaa <get_eit_entry+0x52>
 8000a6e:	9901      	ldr	r1, [sp, #4]
 8000a70:	462a      	mov	r2, r5
 8000a72:	f7ff ffaf 	bl	80009d4 <search_EIT_table>
 8000a76:	4601      	mov	r1, r0
 8000a78:	b1b8      	cbz	r0, 8000aaa <get_eit_entry+0x52>
 8000a7a:	f7ff ffa1 	bl	80009c0 <selfrel_offset31>
 8000a7e:	684b      	ldr	r3, [r1, #4]
 8000a80:	64a0      	str	r0, [r4, #72]	; 0x48
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d02b      	beq.n	8000ade <get_eit_entry+0x86>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f101 0004 	add.w	r0, r1, #4
 8000a8c:	db23      	blt.n	8000ad6 <get_eit_entry+0x7e>
 8000a8e:	f7ff ff97 	bl	80009c0 <selfrel_offset31>
 8000a92:	2300      	movs	r3, #0
 8000a94:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000a98:	6803      	ldr	r3, [r0, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db10      	blt.n	8000ac0 <get_eit_entry+0x68>
 8000a9e:	f7ff ff8f 	bl	80009c0 <selfrel_offset31>
 8000aa2:	6120      	str	r0, [r4, #16]
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	b003      	add	sp, #12
 8000aa8:	bd30      	pop	{r4, r5, pc}
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2009      	movs	r0, #9
 8000aae:	6123      	str	r3, [r4, #16]
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bd30      	pop	{r4, r5, pc}
 8000ab4:	490d      	ldr	r1, [pc, #52]	; (8000aec <get_eit_entry+0x94>)
 8000ab6:	480e      	ldr	r0, [pc, #56]	; (8000af0 <get_eit_entry+0x98>)
 8000ab8:	1a09      	subs	r1, r1, r0
 8000aba:	10c9      	asrs	r1, r1, #3
 8000abc:	9101      	str	r1, [sp, #4]
 8000abe:	e7d7      	b.n	8000a70 <get_eit_entry+0x18>
 8000ac0:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000ac4:	f7ff ffb4 	bl	8000a30 <__gnu_unwind_get_pr_addr>
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	6120      	str	r0, [r4, #16]
 8000acc:	bf14      	ite	ne
 8000ace:	2000      	movne	r0, #0
 8000ad0:	2009      	moveq	r0, #9
 8000ad2:	b003      	add	sp, #12
 8000ad4:	bd30      	pop	{r4, r5, pc}
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000adc:	e7dc      	b.n	8000a98 <get_eit_entry+0x40>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6123      	str	r3, [r4, #16]
 8000ae2:	2005      	movs	r0, #5
 8000ae4:	e7df      	b.n	8000aa6 <get_eit_entry+0x4e>
 8000ae6:	bf00      	nop
 8000ae8:	00000000 	.word	0x00000000
 8000aec:	080063d4 	.word	0x080063d4
 8000af0:	080062dc 	.word	0x080062dc

08000af4 <restore_non_core_regs>:
 8000af4:	6803      	ldr	r3, [r0, #0]
 8000af6:	07da      	lsls	r2, r3, #31
 8000af8:	b510      	push	{r4, lr}
 8000afa:	4604      	mov	r4, r0
 8000afc:	d406      	bmi.n	8000b0c <restore_non_core_regs+0x18>
 8000afe:	079b      	lsls	r3, r3, #30
 8000b00:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000b04:	d509      	bpl.n	8000b1a <restore_non_core_regs+0x26>
 8000b06:	f000 fc4b 	bl	80013a0 <__gnu_Unwind_Restore_VFP_D>
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	0759      	lsls	r1, r3, #29
 8000b0e:	d509      	bpl.n	8000b24 <restore_non_core_regs+0x30>
 8000b10:	071a      	lsls	r2, r3, #28
 8000b12:	d50e      	bpl.n	8000b32 <restore_non_core_regs+0x3e>
 8000b14:	06db      	lsls	r3, r3, #27
 8000b16:	d513      	bpl.n	8000b40 <restore_non_core_regs+0x4c>
 8000b18:	bd10      	pop	{r4, pc}
 8000b1a:	f000 fc39 	bl	8001390 <__gnu_Unwind_Restore_VFP>
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	0759      	lsls	r1, r3, #29
 8000b22:	d4f5      	bmi.n	8000b10 <restore_non_core_regs+0x1c>
 8000b24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000b28:	f000 fc42 	bl	80013b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000b2c:	6823      	ldr	r3, [r4, #0]
 8000b2e:	071a      	lsls	r2, r3, #28
 8000b30:	d4f0      	bmi.n	8000b14 <restore_non_core_regs+0x20>
 8000b32:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000b36:	f000 fc43 	bl	80013c0 <__gnu_Unwind_Restore_WMMXD>
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	06db      	lsls	r3, r3, #27
 8000b3e:	d4eb      	bmi.n	8000b18 <restore_non_core_regs+0x24>
 8000b40:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b48:	f000 bc7e 	b.w	8001448 <__gnu_Unwind_Restore_WMMXC>

08000b4c <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	6800      	ldr	r0, [r0, #0]
 8000b50:	b100      	cbz	r0, 8000b54 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8000b52:	4418      	add	r0, r3
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__gnu_unwind_24bit.isra.0>:
 8000b58:	2009      	movs	r0, #9
 8000b5a:	4770      	bx	lr

08000b5c <_Unwind_DebugHook>:
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <unwind_phase2>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	4604      	mov	r4, r0
 8000b64:	460e      	mov	r6, r1
 8000b66:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff ff75 	bl	8000a58 <get_eit_entry>
 8000b6e:	4605      	mov	r5, r0
 8000b70:	b988      	cbnz	r0, 8000b96 <unwind_phase2+0x36>
 8000b72:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000b74:	6163      	str	r3, [r4, #20]
 8000b76:	4632      	mov	r2, r6
 8000b78:	6923      	ldr	r3, [r4, #16]
 8000b7a:	4621      	mov	r1, r4
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	4798      	blx	r3
 8000b80:	2808      	cmp	r0, #8
 8000b82:	d0f0      	beq.n	8000b66 <unwind_phase2+0x6>
 8000b84:	2807      	cmp	r0, #7
 8000b86:	d106      	bne.n	8000b96 <unwind_phase2+0x36>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000b8c:	f7ff ffe6 	bl	8000b5c <_Unwind_DebugHook>
 8000b90:	1d30      	adds	r0, r6, #4
 8000b92:	f000 fbf1 	bl	8001378 <__restore_core_regs>
 8000b96:	f005 f925 	bl	8005de4 <abort>
 8000b9a:	bf00      	nop

08000b9c <unwind_phase2_forced>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	1d0d      	adds	r5, r1, #4
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	4614      	mov	r4, r2
 8000ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000bac:	f10d 0c0c 	add.w	ip, sp, #12
 8000bb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000bc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bc4:	ad02      	add	r5, sp, #8
 8000bc6:	68f7      	ldr	r7, [r6, #12]
 8000bc8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8000bcc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	602b      	str	r3, [r5, #0]
 8000bd4:	e021      	b.n	8000c1a <unwind_phase2_forced+0x7e>
 8000bd6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000bd8:	6173      	str	r3, [r6, #20]
 8000bda:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000bde:	4629      	mov	r1, r5
 8000be0:	a87a      	add	r0, sp, #488	; 0x1e8
 8000be2:	f005 fa5b 	bl	800609c <memcpy>
 8000be6:	6933      	ldr	r3, [r6, #16]
 8000be8:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000bea:	4631      	mov	r1, r6
 8000bec:	4650      	mov	r0, sl
 8000bee:	4798      	blx	r3
 8000bf0:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000bf2:	e9cd 5800 	strd	r5, r8, [sp]
 8000bf6:	4621      	mov	r1, r4
 8000bf8:	646b      	str	r3, [r5, #68]	; 0x44
 8000bfa:	4681      	mov	r9, r0
 8000bfc:	4633      	mov	r3, r6
 8000bfe:	4632      	mov	r2, r6
 8000c00:	2001      	movs	r0, #1
 8000c02:	47b8      	blx	r7
 8000c04:	4604      	mov	r4, r0
 8000c06:	b9e8      	cbnz	r0, 8000c44 <unwind_phase2_forced+0xa8>
 8000c08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c0c:	a97a      	add	r1, sp, #488	; 0x1e8
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f005 fa44 	bl	800609c <memcpy>
 8000c14:	f1b9 0f08 	cmp.w	r9, #8
 8000c18:	d11b      	bne.n	8000c52 <unwind_phase2_forced+0xb6>
 8000c1a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	f7ff ff1b 	bl	8000a58 <get_eit_entry>
 8000c22:	3409      	adds	r4, #9
 8000c24:	fa5f fa84 	uxtb.w	sl, r4
 8000c28:	4681      	mov	r9, r0
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d0d3      	beq.n	8000bd6 <unwind_phase2_forced+0x3a>
 8000c2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000c30:	f04a 0110 	orr.w	r1, sl, #16
 8000c34:	e9cd 5800 	strd	r5, r8, [sp]
 8000c38:	4632      	mov	r2, r6
 8000c3a:	646b      	str	r3, [r5, #68]	; 0x44
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	4633      	mov	r3, r6
 8000c40:	47b8      	blx	r7
 8000c42:	b108      	cbz	r0, 8000c48 <unwind_phase2_forced+0xac>
 8000c44:	f04f 0909 	mov.w	r9, #9
 8000c48:	4648      	mov	r0, r9
 8000c4a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	f1b9 0f07 	cmp.w	r9, #7
 8000c56:	d1f5      	bne.n	8000c44 <unwind_phase2_forced+0xa8>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000c5c:	f7ff ff7e 	bl	8000b5c <_Unwind_DebugHook>
 8000c60:	a803      	add	r0, sp, #12
 8000c62:	f000 fb89 	bl	8001378 <__restore_core_regs>
 8000c66:	bf00      	nop

08000c68 <_Unwind_GetCFA>:
 8000c68:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000c6a:	4770      	bx	lr

08000c6c <__gnu_Unwind_RaiseException>:
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000c70:	640b      	str	r3, [r1, #64]	; 0x40
 8000c72:	1d0e      	adds	r6, r1, #4
 8000c74:	460f      	mov	r7, r1
 8000c76:	4605      	mov	r5, r0
 8000c78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c7a:	b0f9      	sub	sp, #484	; 0x1e4
 8000c7c:	ac01      	add	r4, sp, #4
 8000c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c88:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c8c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c94:	9600      	str	r6, [sp, #0]
 8000c96:	e006      	b.n	8000ca6 <__gnu_Unwind_RaiseException+0x3a>
 8000c98:	692b      	ldr	r3, [r5, #16]
 8000c9a:	466a      	mov	r2, sp
 8000c9c:	4629      	mov	r1, r5
 8000c9e:	4798      	blx	r3
 8000ca0:	2808      	cmp	r0, #8
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	d108      	bne.n	8000cb8 <__gnu_Unwind_RaiseException+0x4c>
 8000ca6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f7ff fed5 	bl	8000a58 <get_eit_entry>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d0f2      	beq.n	8000c98 <__gnu_Unwind_RaiseException+0x2c>
 8000cb2:	2009      	movs	r0, #9
 8000cb4:	b079      	add	sp, #484	; 0x1e4
 8000cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb8:	4668      	mov	r0, sp
 8000cba:	f7ff ff1b 	bl	8000af4 <restore_non_core_regs>
 8000cbe:	2c06      	cmp	r4, #6
 8000cc0:	d1f7      	bne.n	8000cb2 <__gnu_Unwind_RaiseException+0x46>
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	f7ff ff4b 	bl	8000b60 <unwind_phase2>
 8000cca:	bf00      	nop

08000ccc <__gnu_Unwind_ForcedUnwind>:
 8000ccc:	b430      	push	{r4, r5}
 8000cce:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000cd0:	60c1      	str	r1, [r0, #12]
 8000cd2:	6182      	str	r2, [r0, #24]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	641d      	str	r5, [r3, #64]	; 0x40
 8000cd8:	2200      	movs	r2, #0
 8000cda:	bc30      	pop	{r4, r5}
 8000cdc:	e75e      	b.n	8000b9c <unwind_phase2_forced>
 8000cde:	bf00      	nop

08000ce0 <__gnu_Unwind_Resume>:
 8000ce0:	b570      	push	{r4, r5, r6, lr}
 8000ce2:	68c6      	ldr	r6, [r0, #12]
 8000ce4:	6943      	ldr	r3, [r0, #20]
 8000ce6:	640b      	str	r3, [r1, #64]	; 0x40
 8000ce8:	b9ae      	cbnz	r6, 8000d16 <__gnu_Unwind_Resume+0x36>
 8000cea:	6903      	ldr	r3, [r0, #16]
 8000cec:	460a      	mov	r2, r1
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	4798      	blx	r3
 8000cf8:	2807      	cmp	r0, #7
 8000cfa:	d005      	beq.n	8000d08 <__gnu_Unwind_Resume+0x28>
 8000cfc:	2808      	cmp	r0, #8
 8000cfe:	d10f      	bne.n	8000d20 <__gnu_Unwind_Resume+0x40>
 8000d00:	4629      	mov	r1, r5
 8000d02:	4620      	mov	r0, r4
 8000d04:	f7ff ff2c 	bl	8000b60 <unwind_phase2>
 8000d08:	4630      	mov	r0, r6
 8000d0a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000d0c:	f7ff ff26 	bl	8000b5c <_Unwind_DebugHook>
 8000d10:	1d28      	adds	r0, r5, #4
 8000d12:	f000 fb31 	bl	8001378 <__restore_core_regs>
 8000d16:	2201      	movs	r2, #1
 8000d18:	f7ff ff40 	bl	8000b9c <unwind_phase2_forced>
 8000d1c:	f005 f862 	bl	8005de4 <abort>
 8000d20:	f005 f860 	bl	8005de4 <abort>

08000d24 <__gnu_Unwind_Resume_or_Rethrow>:
 8000d24:	68c2      	ldr	r2, [r0, #12]
 8000d26:	b11a      	cbz	r2, 8000d30 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000d28:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000d2a:	640a      	str	r2, [r1, #64]	; 0x40
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e735      	b.n	8000b9c <unwind_phase2_forced>
 8000d30:	e79c      	b.n	8000c6c <__gnu_Unwind_RaiseException>
 8000d32:	bf00      	nop

08000d34 <_Unwind_Complete>:
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <_Unwind_DeleteException>:
 8000d38:	6883      	ldr	r3, [r0, #8]
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	b10b      	cbz	r3, 8000d42 <_Unwind_DeleteException+0xa>
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4718      	bx	r3
 8000d42:	4770      	bx	lr

08000d44 <_Unwind_VRS_Get>:
 8000d44:	2901      	cmp	r1, #1
 8000d46:	d012      	beq.n	8000d6e <_Unwind_VRS_Get+0x2a>
 8000d48:	d809      	bhi.n	8000d5e <_Unwind_VRS_Get+0x1a>
 8000d4a:	b973      	cbnz	r3, 8000d6a <_Unwind_VRS_Get+0x26>
 8000d4c:	2a0f      	cmp	r2, #15
 8000d4e:	d80c      	bhi.n	8000d6a <_Unwind_VRS_Get+0x26>
 8000d50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000d54:	4618      	mov	r0, r3
 8000d56:	6853      	ldr	r3, [r2, #4]
 8000d58:	9a00      	ldr	r2, [sp, #0]
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4770      	bx	lr
 8000d5e:	3903      	subs	r1, #3
 8000d60:	2901      	cmp	r1, #1
 8000d62:	bf94      	ite	ls
 8000d64:	2001      	movls	r0, #1
 8000d66:	2002      	movhi	r0, #2
 8000d68:	4770      	bx	lr
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	4770      	bx	lr
 8000d6e:	4608      	mov	r0, r1
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <_Unwind_GetGR>:
 8000d74:	b510      	push	{r4, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	2300      	movs	r3, #0
 8000d7a:	ac03      	add	r4, sp, #12
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	9400      	str	r4, [sp, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff ffdf 	bl	8000d44 <_Unwind_VRS_Get>
 8000d86:	9803      	ldr	r0, [sp, #12]
 8000d88:	b004      	add	sp, #16
 8000d8a:	bd10      	pop	{r4, pc}

08000d8c <_Unwind_VRS_Set>:
 8000d8c:	2901      	cmp	r1, #1
 8000d8e:	d012      	beq.n	8000db6 <_Unwind_VRS_Set+0x2a>
 8000d90:	d809      	bhi.n	8000da6 <_Unwind_VRS_Set+0x1a>
 8000d92:	b973      	cbnz	r3, 8000db2 <_Unwind_VRS_Set+0x26>
 8000d94:	2a0f      	cmp	r2, #15
 8000d96:	d80c      	bhi.n	8000db2 <_Unwind_VRS_Set+0x26>
 8000d98:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000d9c:	9a00      	ldr	r2, [sp, #0]
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	6042      	str	r2, [r0, #4]
 8000da2:	4618      	mov	r0, r3
 8000da4:	4770      	bx	lr
 8000da6:	3903      	subs	r1, #3
 8000da8:	2901      	cmp	r1, #1
 8000daa:	bf94      	ite	ls
 8000dac:	2001      	movls	r0, #1
 8000dae:	2002      	movhi	r0, #2
 8000db0:	4770      	bx	lr
 8000db2:	2002      	movs	r0, #2
 8000db4:	4770      	bx	lr
 8000db6:	4608      	mov	r0, r1
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <_Unwind_SetGR>:
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	ac03      	add	r4, sp, #12
 8000dc4:	9203      	str	r2, [sp, #12]
 8000dc6:	9400      	str	r4, [sp, #0]
 8000dc8:	460a      	mov	r2, r1
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f7ff ffde 	bl	8000d8c <_Unwind_VRS_Set>
 8000dd0:	b004      	add	sp, #16
 8000dd2:	bd10      	pop	{r4, pc}

08000dd4 <__gnu_Unwind_Backtrace>:
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	1d15      	adds	r5, r2, #4
 8000ddc:	468c      	mov	ip, r1
 8000dde:	4606      	mov	r6, r0
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000de6:	ac17      	add	r4, sp, #92	; 0x5c
 8000de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000df6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000dfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dfe:	4665      	mov	r5, ip
 8000e00:	9716      	str	r7, [sp, #88]	; 0x58
 8000e02:	e010      	b.n	8000e26 <__gnu_Unwind_Backtrace+0x52>
 8000e04:	f7ff ffda 	bl	8000dbc <_Unwind_SetGR>
 8000e08:	4629      	mov	r1, r5
 8000e0a:	a816      	add	r0, sp, #88	; 0x58
 8000e0c:	47b0      	blx	r6
 8000e0e:	4603      	mov	r3, r0
 8000e10:	aa16      	add	r2, sp, #88	; 0x58
 8000e12:	4669      	mov	r1, sp
 8000e14:	2008      	movs	r0, #8
 8000e16:	b983      	cbnz	r3, 8000e3a <__gnu_Unwind_Backtrace+0x66>
 8000e18:	9b04      	ldr	r3, [sp, #16]
 8000e1a:	4798      	blx	r3
 8000e1c:	2805      	cmp	r0, #5
 8000e1e:	4604      	mov	r4, r0
 8000e20:	d00c      	beq.n	8000e3c <__gnu_Unwind_Backtrace+0x68>
 8000e22:	2809      	cmp	r0, #9
 8000e24:	d009      	beq.n	8000e3a <__gnu_Unwind_Backtrace+0x66>
 8000e26:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000e28:	4668      	mov	r0, sp
 8000e2a:	f7ff fe15 	bl	8000a58 <get_eit_entry>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	466a      	mov	r2, sp
 8000e32:	210c      	movs	r1, #12
 8000e34:	a816      	add	r0, sp, #88	; 0x58
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0e4      	beq.n	8000e04 <__gnu_Unwind_Backtrace+0x30>
 8000e3a:	2409      	movs	r4, #9
 8000e3c:	a816      	add	r0, sp, #88	; 0x58
 8000e3e:	f7ff fe59 	bl	8000af4 <restore_non_core_regs>
 8000e42:	4620      	mov	r0, r4
 8000e44:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4a:	bf00      	nop

08000e4c <__gnu_unwind_pr_common>:
 8000e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e50:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	460d      	mov	r5, r1
 8000e56:	f854 1b04 	ldr.w	r1, [r4], #4
 8000e5a:	9406      	str	r4, [sp, #24]
 8000e5c:	4617      	mov	r7, r2
 8000e5e:	f000 0803 	and.w	r8, r0, #3
 8000e62:	461e      	mov	r6, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d079      	beq.n	8000f5c <__gnu_unwind_pr_common+0x110>
 8000e68:	0c0b      	lsrs	r3, r1, #16
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	0409      	lsls	r1, r1, #16
 8000e6e:	f88d 301d 	strb.w	r3, [sp, #29]
 8000e72:	2302      	movs	r3, #2
 8000e74:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000e78:	9105      	str	r1, [sp, #20]
 8000e7a:	f88d 301c 	strb.w	r3, [sp, #28]
 8000e7e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000e80:	f1b8 0f02 	cmp.w	r8, #2
 8000e84:	bf08      	it	eq
 8000e86:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000e88:	f013 0301 	ands.w	r3, r3, #1
 8000e8c:	d00c      	beq.n	8000ea8 <__gnu_unwind_pr_common+0x5c>
 8000e8e:	4638      	mov	r0, r7
 8000e90:	a905      	add	r1, sp, #20
 8000e92:	f000 fb73 	bl	800157c <__gnu_unwind_execute>
 8000e96:	b918      	cbnz	r0, 8000ea0 <__gnu_unwind_pr_common+0x54>
 8000e98:	2008      	movs	r0, #8
 8000e9a:	b009      	add	sp, #36	; 0x24
 8000e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ea0:	2009      	movs	r0, #9
 8000ea2:	b009      	add	sp, #36	; 0x24
 8000ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ea8:	f8d4 a000 	ldr.w	sl, [r4]
 8000eac:	f1ba 0f00 	cmp.w	sl, #0
 8000eb0:	d0ed      	beq.n	8000e8e <__gnu_unwind_pr_common+0x42>
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	f000 0308 	and.w	r3, r0, #8
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2e02      	cmp	r6, #2
 8000ebc:	d04a      	beq.n	8000f54 <__gnu_unwind_pr_common+0x108>
 8000ebe:	f8b4 a000 	ldrh.w	sl, [r4]
 8000ec2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000ec6:	3404      	adds	r4, #4
 8000ec8:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000eca:	f029 0b01 	bic.w	fp, r9, #1
 8000ece:	210f      	movs	r1, #15
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	4493      	add	fp, r2
 8000ed4:	f7ff ff4e 	bl	8000d74 <_Unwind_GetGR>
 8000ed8:	4583      	cmp	fp, r0
 8000eda:	d839      	bhi.n	8000f50 <__gnu_unwind_pr_common+0x104>
 8000edc:	f02a 0201 	bic.w	r2, sl, #1
 8000ee0:	445a      	add	r2, fp
 8000ee2:	4282      	cmp	r2, r0
 8000ee4:	bf94      	ite	ls
 8000ee6:	2000      	movls	r0, #0
 8000ee8:	2001      	movhi	r0, #1
 8000eea:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	f00a 0a01 	and.w	sl, sl, #1
 8000ef6:	ea43 030a 	orr.w	r3, r3, sl
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d049      	beq.n	8000f92 <__gnu_unwind_pr_common+0x146>
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d032      	beq.n	8000f68 <__gnu_unwind_pr_common+0x11c>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1cc      	bne.n	8000ea0 <__gnu_unwind_pr_common+0x54>
 8000f06:	f1b8 0f00 	cmp.w	r8, #0
 8000f0a:	d002      	beq.n	8000f12 <__gnu_unwind_pr_common+0xc6>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	f040 80cd 	bne.w	80010ac <__gnu_unwind_pr_common+0x260>
 8000f12:	3404      	adds	r4, #4
 8000f14:	f8d4 a000 	ldr.w	sl, [r4]
 8000f18:	f1ba 0f00 	cmp.w	sl, #0
 8000f1c:	d1cd      	bne.n	8000eba <__gnu_unwind_pr_common+0x6e>
 8000f1e:	a905      	add	r1, sp, #20
 8000f20:	4638      	mov	r0, r7
 8000f22:	f000 fb2b 	bl	800157c <__gnu_unwind_execute>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d1ba      	bne.n	8000ea0 <__gnu_unwind_pr_common+0x54>
 8000f2a:	9b01      	ldr	r3, [sp, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0b3      	beq.n	8000e98 <__gnu_unwind_pr_common+0x4c>
 8000f30:	210f      	movs	r1, #15
 8000f32:	4638      	mov	r0, r7
 8000f34:	f7ff ff1e 	bl	8000d74 <_Unwind_GetGR>
 8000f38:	210e      	movs	r1, #14
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	f7ff ff3d 	bl	8000dbc <_Unwind_SetGR>
 8000f42:	4638      	mov	r0, r7
 8000f44:	4a6a      	ldr	r2, [pc, #424]	; (80010f0 <__gnu_unwind_pr_common+0x2a4>)
 8000f46:	210f      	movs	r1, #15
 8000f48:	f7ff ff38 	bl	8000dbc <_Unwind_SetGR>
 8000f4c:	2007      	movs	r0, #7
 8000f4e:	e7a8      	b.n	8000ea2 <__gnu_unwind_pr_common+0x56>
 8000f50:	2000      	movs	r0, #0
 8000f52:	e7ca      	b.n	8000eea <__gnu_unwind_pr_common+0x9e>
 8000f54:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000f58:	3408      	adds	r4, #8
 8000f5a:	e7b5      	b.n	8000ec8 <__gnu_unwind_pr_common+0x7c>
 8000f5c:	0209      	lsls	r1, r1, #8
 8000f5e:	2303      	movs	r3, #3
 8000f60:	9105      	str	r1, [sp, #20]
 8000f62:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000f66:	e78a      	b.n	8000e7e <__gnu_unwind_pr_common+0x32>
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000f6e:	f1b8 0f00 	cmp.w	r8, #0
 8000f72:	d145      	bne.n	8001000 <__gnu_unwind_pr_common+0x1b4>
 8000f74:	b128      	cbz	r0, 8000f82 <__gnu_unwind_pr_common+0x136>
 8000f76:	9a02      	ldr	r2, [sp, #8]
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d05c      	beq.n	8001036 <__gnu_unwind_pr_common+0x1ea>
 8000f7c:	f1bb 0f00 	cmp.w	fp, #0
 8000f80:	d074      	beq.n	800106c <__gnu_unwind_pr_common+0x220>
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	da00      	bge.n	8000f88 <__gnu_unwind_pr_common+0x13c>
 8000f86:	3404      	adds	r4, #4
 8000f88:	f10b 0b01 	add.w	fp, fp, #1
 8000f8c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000f90:	e7c0      	b.n	8000f14 <__gnu_unwind_pr_common+0xc8>
 8000f92:	f1b8 0f00 	cmp.w	r8, #0
 8000f96:	d119      	bne.n	8000fcc <__gnu_unwind_pr_common+0x180>
 8000f98:	b1b0      	cbz	r0, 8000fc8 <__gnu_unwind_pr_common+0x17c>
 8000f9a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000f9e:	1c99      	adds	r1, r3, #2
 8000fa0:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000fa4:	f43f af7c 	beq.w	8000ea0 <__gnu_unwind_pr_common+0x54>
 8000fa8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000fac:	3301      	adds	r3, #1
 8000fae:	9104      	str	r1, [sp, #16]
 8000fb0:	f000 8090 	beq.w	80010d4 <__gnu_unwind_pr_common+0x288>
 8000fb4:	1d20      	adds	r0, r4, #4
 8000fb6:	f7ff fdc9 	bl	8000b4c <_Unwind_decode_typeinfo_ptr.isra.0>
 8000fba:	ab04      	add	r3, sp, #16
 8000fbc:	4601      	mov	r1, r0
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	f004 fa26 	bl	8005410 <__cxa_type_match>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d15b      	bne.n	8001080 <__gnu_unwind_pr_common+0x234>
 8000fc8:	3408      	adds	r4, #8
 8000fca:	e7a3      	b.n	8000f14 <__gnu_unwind_pr_common+0xc8>
 8000fcc:	210d      	movs	r1, #13
 8000fce:	4638      	mov	r0, r7
 8000fd0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000fd4:	f7ff fece 	bl	8000d74 <_Unwind_GetGR>
 8000fd8:	4581      	cmp	r9, r0
 8000fda:	d1f5      	bne.n	8000fc8 <__gnu_unwind_pr_common+0x17c>
 8000fdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000fde:	429c      	cmp	r4, r3
 8000fe0:	d1f2      	bne.n	8000fc8 <__gnu_unwind_pr_common+0x17c>
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f7ff fcec 	bl	80009c0 <selfrel_offset31>
 8000fe8:	210f      	movs	r1, #15
 8000fea:	4602      	mov	r2, r0
 8000fec:	4638      	mov	r0, r7
 8000fee:	f7ff fee5 	bl	8000dbc <_Unwind_SetGR>
 8000ff2:	4638      	mov	r0, r7
 8000ff4:	462a      	mov	r2, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f7ff fee0 	bl	8000dbc <_Unwind_SetGR>
 8000ffc:	2007      	movs	r0, #7
 8000ffe:	e750      	b.n	8000ea2 <__gnu_unwind_pr_common+0x56>
 8001000:	210d      	movs	r1, #13
 8001002:	4638      	mov	r0, r7
 8001004:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001008:	f7ff feb4 	bl	8000d74 <_Unwind_GetGR>
 800100c:	4581      	cmp	r9, r0
 800100e:	d001      	beq.n	8001014 <__gnu_unwind_pr_common+0x1c8>
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	e7b6      	b.n	8000f82 <__gnu_unwind_pr_common+0x136>
 8001014:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001016:	429c      	cmp	r4, r3
 8001018:	d1fa      	bne.n	8001010 <__gnu_unwind_pr_common+0x1c4>
 800101a:	2204      	movs	r2, #4
 800101c:	2100      	movs	r1, #0
 800101e:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8001022:	18a3      	adds	r3, r4, r2
 8001024:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8001028:	636b      	str	r3, [r5, #52]	; 0x34
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	428b      	cmp	r3, r1
 800102e:	db59      	blt.n	80010e4 <__gnu_unwind_pr_common+0x298>
 8001030:	2301      	movs	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	e7a8      	b.n	8000f88 <__gnu_unwind_pr_common+0x13c>
 8001036:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800103a:	f8cd 800c 	str.w	r8, [sp, #12]
 800103e:	f104 0a04 	add.w	sl, r4, #4
 8001042:	46b0      	mov	r8, r6
 8001044:	4691      	mov	r9, r2
 8001046:	461e      	mov	r6, r3
 8001048:	e00d      	b.n	8001066 <__gnu_unwind_pr_common+0x21a>
 800104a:	9604      	str	r6, [sp, #16]
 800104c:	f7ff fd7e 	bl	8000b4c <_Unwind_decode_typeinfo_ptr.isra.0>
 8001050:	ab04      	add	r3, sp, #16
 8001052:	4601      	mov	r1, r0
 8001054:	2200      	movs	r2, #0
 8001056:	4628      	mov	r0, r5
 8001058:	f004 f9da 	bl	8005410 <__cxa_type_match>
 800105c:	f109 0901 	add.w	r9, r9, #1
 8001060:	f10a 0a04 	add.w	sl, sl, #4
 8001064:	b9e8      	cbnz	r0, 80010a2 <__gnu_unwind_pr_common+0x256>
 8001066:	45d9      	cmp	r9, fp
 8001068:	4650      	mov	r0, sl
 800106a:	d1ee      	bne.n	800104a <__gnu_unwind_pr_common+0x1fe>
 800106c:	4638      	mov	r0, r7
 800106e:	210d      	movs	r1, #13
 8001070:	f7ff fe80 	bl	8000d74 <_Unwind_GetGR>
 8001074:	9b04      	ldr	r3, [sp, #16]
 8001076:	6228      	str	r0, [r5, #32]
 8001078:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 800107c:	2006      	movs	r0, #6
 800107e:	e710      	b.n	8000ea2 <__gnu_unwind_pr_common+0x56>
 8001080:	4681      	mov	r9, r0
 8001082:	210d      	movs	r1, #13
 8001084:	4638      	mov	r0, r7
 8001086:	f7ff fe75 	bl	8000d74 <_Unwind_GetGR>
 800108a:	f1b9 0f02 	cmp.w	r9, #2
 800108e:	6228      	str	r0, [r5, #32]
 8001090:	d125      	bne.n	80010de <__gnu_unwind_pr_common+0x292>
 8001092:	462b      	mov	r3, r5
 8001094:	9a04      	ldr	r2, [sp, #16]
 8001096:	f843 2f2c 	str.w	r2, [r3, #44]!
 800109a:	626b      	str	r3, [r5, #36]	; 0x24
 800109c:	62ac      	str	r4, [r5, #40]	; 0x28
 800109e:	2006      	movs	r0, #6
 80010a0:	e6ff      	b.n	8000ea2 <__gnu_unwind_pr_common+0x56>
 80010a2:	4646      	mov	r6, r8
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80010aa:	e76a      	b.n	8000f82 <__gnu_unwind_pr_common+0x136>
 80010ac:	4620      	mov	r0, r4
 80010ae:	f7ff fc87 	bl	80009c0 <selfrel_offset31>
 80010b2:	3404      	adds	r4, #4
 80010b4:	4602      	mov	r2, r0
 80010b6:	63ac      	str	r4, [r5, #56]	; 0x38
 80010b8:	4628      	mov	r0, r5
 80010ba:	4614      	mov	r4, r2
 80010bc:	f004 fa06 	bl	80054cc <__cxa_begin_cleanup>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	f43f aeed 	beq.w	8000ea0 <__gnu_unwind_pr_common+0x54>
 80010c6:	4638      	mov	r0, r7
 80010c8:	4622      	mov	r2, r4
 80010ca:	210f      	movs	r1, #15
 80010cc:	f7ff fe76 	bl	8000dbc <_Unwind_SetGR>
 80010d0:	2007      	movs	r0, #7
 80010d2:	e6e6      	b.n	8000ea2 <__gnu_unwind_pr_common+0x56>
 80010d4:	4638      	mov	r0, r7
 80010d6:	210d      	movs	r1, #13
 80010d8:	f7ff fe4c 	bl	8000d74 <_Unwind_GetGR>
 80010dc:	6228      	str	r0, [r5, #32]
 80010de:	9b04      	ldr	r3, [sp, #16]
 80010e0:	626b      	str	r3, [r5, #36]	; 0x24
 80010e2:	e7db      	b.n	800109c <__gnu_unwind_pr_common+0x250>
 80010e4:	f10b 0001 	add.w	r0, fp, #1
 80010e8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80010ec:	e77a      	b.n	8000fe4 <__gnu_unwind_pr_common+0x198>
 80010ee:	bf00      	nop
 80010f0:	08005d21 	.word	0x08005d21

080010f4 <__aeabi_unwind_cpp_pr0>:
 80010f4:	2300      	movs	r3, #0
 80010f6:	e6a9      	b.n	8000e4c <__gnu_unwind_pr_common>

080010f8 <__aeabi_unwind_cpp_pr1>:
 80010f8:	2301      	movs	r3, #1
 80010fa:	e6a7      	b.n	8000e4c <__gnu_unwind_pr_common>

080010fc <__aeabi_unwind_cpp_pr2>:
 80010fc:	2302      	movs	r3, #2
 80010fe:	e6a5      	b.n	8000e4c <__gnu_unwind_pr_common>

08001100 <_Unwind_VRS_Pop>:
 8001100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001104:	4606      	mov	r6, r0
 8001106:	b0c3      	sub	sp, #268	; 0x10c
 8001108:	4615      	mov	r5, r2
 800110a:	461c      	mov	r4, r3
 800110c:	2904      	cmp	r1, #4
 800110e:	f200 80b9 	bhi.w	8001284 <_Unwind_VRS_Pop+0x184>
 8001112:	e8df f001 	tbb	[pc, r1]
 8001116:	539a      	.short	0x539a
 8001118:	29b7      	.short	0x29b7
 800111a:	03          	.byte	0x03
 800111b:	00          	.byte	0x00
 800111c:	2c00      	cmp	r4, #0
 800111e:	f040 80b1 	bne.w	8001284 <_Unwind_VRS_Pop+0x184>
 8001122:	2a10      	cmp	r2, #16
 8001124:	f200 80ae 	bhi.w	8001284 <_Unwind_VRS_Pop+0x184>
 8001128:	6803      	ldr	r3, [r0, #0]
 800112a:	06d8      	lsls	r0, r3, #27
 800112c:	f100 80f3 	bmi.w	8001316 <_Unwind_VRS_Pop+0x216>
 8001130:	af20      	add	r7, sp, #128	; 0x80
 8001132:	4638      	mov	r0, r7
 8001134:	f000 f992 	bl	800145c <__gnu_Unwind_Save_WMMXC>
 8001138:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 800113a:	2300      	movs	r3, #0
 800113c:	2401      	movs	r4, #1
 800113e:	fa04 f203 	lsl.w	r2, r4, r3
 8001142:	422a      	tst	r2, r5
 8001144:	4601      	mov	r1, r0
 8001146:	d004      	beq.n	8001152 <_Unwind_VRS_Pop+0x52>
 8001148:	f851 2b04 	ldr.w	r2, [r1], #4
 800114c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8001150:	4608      	mov	r0, r1
 8001152:	3301      	adds	r3, #1
 8001154:	2b04      	cmp	r3, #4
 8001156:	d1f2      	bne.n	800113e <_Unwind_VRS_Pop+0x3e>
 8001158:	63b0      	str	r0, [r6, #56]	; 0x38
 800115a:	4638      	mov	r0, r7
 800115c:	f000 f974 	bl	8001448 <__gnu_Unwind_Restore_WMMXC>
 8001160:	2000      	movs	r0, #0
 8001162:	b043      	add	sp, #268	; 0x10c
 8001164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001168:	2c03      	cmp	r4, #3
 800116a:	f040 808b 	bne.w	8001284 <_Unwind_VRS_Pop+0x184>
 800116e:	b294      	uxth	r4, r2
 8001170:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001174:	2b10      	cmp	r3, #16
 8001176:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800117a:	f200 8083 	bhi.w	8001284 <_Unwind_VRS_Pop+0x184>
 800117e:	6803      	ldr	r3, [r0, #0]
 8001180:	071f      	lsls	r7, r3, #28
 8001182:	f100 80d0 	bmi.w	8001326 <_Unwind_VRS_Pop+0x226>
 8001186:	af20      	add	r7, sp, #128	; 0x80
 8001188:	4638      	mov	r0, r7
 800118a:	f000 f93b 	bl	8001404 <__gnu_Unwind_Save_WMMXD>
 800118e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001192:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8001194:	b154      	cbz	r4, 80011ac <_Unwind_VRS_Pop+0xac>
 8001196:	460b      	mov	r3, r1
 8001198:	1ae8      	subs	r0, r5, r3
 800119a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800119e:	00e4      	lsls	r4, r4, #3
 80011a0:	581a      	ldr	r2, [r3, r0]
 80011a2:	f843 2b04 	str.w	r2, [r3], #4
 80011a6:	428b      	cmp	r3, r1
 80011a8:	d1fa      	bne.n	80011a0 <_Unwind_VRS_Pop+0xa0>
 80011aa:	4425      	add	r5, r4
 80011ac:	4638      	mov	r0, r7
 80011ae:	63b5      	str	r5, [r6, #56]	; 0x38
 80011b0:	f000 f906 	bl	80013c0 <__gnu_Unwind_Restore_WMMXD>
 80011b4:	2000      	movs	r0, #0
 80011b6:	b043      	add	sp, #268	; 0x10c
 80011b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011bc:	2c01      	cmp	r4, #1
 80011be:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80011c2:	b295      	uxth	r5, r2
 80011c4:	d05a      	beq.n	800127c <_Unwind_VRS_Pop+0x17c>
 80011c6:	2c05      	cmp	r4, #5
 80011c8:	d15c      	bne.n	8001284 <_Unwind_VRS_Pop+0x184>
 80011ca:	eb08 0905 	add.w	r9, r8, r5
 80011ce:	f1b9 0f20 	cmp.w	r9, #32
 80011d2:	d857      	bhi.n	8001284 <_Unwind_VRS_Pop+0x184>
 80011d4:	f1b8 0f0f 	cmp.w	r8, #15
 80011d8:	d977      	bls.n	80012ca <_Unwind_VRS_Pop+0x1ca>
 80011da:	46a9      	mov	r9, r5
 80011dc:	2d00      	cmp	r5, #0
 80011de:	f040 8088 	bne.w	80012f2 <_Unwind_VRS_Pop+0x1f2>
 80011e2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80011e4:	b36d      	cbz	r5, 8001242 <_Unwind_VRS_Pop+0x142>
 80011e6:	af20      	add	r7, sp, #128	; 0x80
 80011e8:	f04f 0900 	mov.w	r9, #0
 80011ec:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80011f0:	3f04      	subs	r7, #4
 80011f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80011f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80011fa:	f847 1f04 	str.w	r1, [r7, #4]!
 80011fe:	42ab      	cmp	r3, r5
 8001200:	d1f9      	bne.n	80011f6 <_Unwind_VRS_Pop+0xf6>
 8001202:	f1b9 0f00 	cmp.w	r9, #0
 8001206:	d00f      	beq.n	8001228 <_Unwind_VRS_Pop+0x128>
 8001208:	466f      	mov	r7, sp
 800120a:	4641      	mov	r1, r8
 800120c:	2910      	cmp	r1, #16
 800120e:	bf38      	it	cc
 8001210:	2110      	movcc	r1, #16
 8001212:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001216:	3984      	subs	r1, #132	; 0x84
 8001218:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 800121c:	f853 0b04 	ldr.w	r0, [r3], #4
 8001220:	f841 0f04 	str.w	r0, [r1, #4]!
 8001224:	42ab      	cmp	r3, r5
 8001226:	d1f9      	bne.n	800121c <_Unwind_VRS_Pop+0x11c>
 8001228:	2c01      	cmp	r4, #1
 800122a:	f000 8084 	beq.w	8001336 <_Unwind_VRS_Pop+0x236>
 800122e:	f1b8 0f0f 	cmp.w	r8, #15
 8001232:	63b5      	str	r5, [r6, #56]	; 0x38
 8001234:	d945      	bls.n	80012c2 <_Unwind_VRS_Pop+0x1c2>
 8001236:	f1b9 0f00 	cmp.w	r9, #0
 800123a:	d002      	beq.n	8001242 <_Unwind_VRS_Pop+0x142>
 800123c:	4668      	mov	r0, sp
 800123e:	f000 f8b7 	bl	80013b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001242:	2000      	movs	r0, #0
 8001244:	b043      	add	sp, #268	; 0x10c
 8001246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800124a:	b9dc      	cbnz	r4, 8001284 <_Unwind_VRS_Pop+0x184>
 800124c:	6b87      	ldr	r7, [r0, #56]	; 0x38
 800124e:	4623      	mov	r3, r4
 8001250:	2001      	movs	r0, #1
 8001252:	b294      	uxth	r4, r2
 8001254:	f106 0c04 	add.w	ip, r6, #4
 8001258:	fa00 f203 	lsl.w	r2, r0, r3
 800125c:	4222      	tst	r2, r4
 800125e:	4639      	mov	r1, r7
 8001260:	d004      	beq.n	800126c <_Unwind_VRS_Pop+0x16c>
 8001262:	f851 2b04 	ldr.w	r2, [r1], #4
 8001266:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 800126a:	460f      	mov	r7, r1
 800126c:	3301      	adds	r3, #1
 800126e:	2b10      	cmp	r3, #16
 8001270:	d1f2      	bne.n	8001258 <_Unwind_VRS_Pop+0x158>
 8001272:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8001276:	d1e4      	bne.n	8001242 <_Unwind_VRS_Pop+0x142>
 8001278:	63b7      	str	r7, [r6, #56]	; 0x38
 800127a:	e004      	b.n	8001286 <_Unwind_VRS_Pop+0x186>
 800127c:	eb08 0305 	add.w	r3, r8, r5
 8001280:	2b10      	cmp	r3, #16
 8001282:	d903      	bls.n	800128c <_Unwind_VRS_Pop+0x18c>
 8001284:	2002      	movs	r0, #2
 8001286:	b043      	add	sp, #268	; 0x10c
 8001288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800128c:	f1b8 0f0f 	cmp.w	r8, #15
 8001290:	d8f8      	bhi.n	8001284 <_Unwind_VRS_Pop+0x184>
 8001292:	6833      	ldr	r3, [r6, #0]
 8001294:	07da      	lsls	r2, r3, #31
 8001296:	d506      	bpl.n	80012a6 <_Unwind_VRS_Pop+0x1a6>
 8001298:	4630      	mov	r0, r6
 800129a:	f023 0303 	bic.w	r3, r3, #3
 800129e:	f840 3b48 	str.w	r3, [r0], #72
 80012a2:	f000 f879 	bl	8001398 <__gnu_Unwind_Save_VFP>
 80012a6:	af20      	add	r7, sp, #128	; 0x80
 80012a8:	4638      	mov	r0, r7
 80012aa:	f000 f875 	bl	8001398 <__gnu_Unwind_Save_VFP>
 80012ae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80012b0:	2d00      	cmp	r5, #0
 80012b2:	d199      	bne.n	80011e8 <_Unwind_VRS_Pop+0xe8>
 80012b4:	461d      	mov	r5, r3
 80012b6:	3504      	adds	r5, #4
 80012b8:	63b5      	str	r5, [r6, #56]	; 0x38
 80012ba:	4638      	mov	r0, r7
 80012bc:	f000 f868 	bl	8001390 <__gnu_Unwind_Restore_VFP>
 80012c0:	e7bf      	b.n	8001242 <_Unwind_VRS_Pop+0x142>
 80012c2:	a820      	add	r0, sp, #128	; 0x80
 80012c4:	f000 f86c 	bl	80013a0 <__gnu_Unwind_Restore_VFP_D>
 80012c8:	e7b5      	b.n	8001236 <_Unwind_VRS_Pop+0x136>
 80012ca:	f1b9 0f10 	cmp.w	r9, #16
 80012ce:	d940      	bls.n	8001352 <_Unwind_VRS_Pop+0x252>
 80012d0:	f1a9 0910 	sub.w	r9, r9, #16
 80012d4:	6833      	ldr	r3, [r6, #0]
 80012d6:	07d9      	lsls	r1, r3, #31
 80012d8:	d508      	bpl.n	80012ec <_Unwind_VRS_Pop+0x1ec>
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	4630      	mov	r0, r6
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	f840 3b48 	str.w	r3, [r0], #72
 80012e8:	f000 f85e 	bl	80013a8 <__gnu_Unwind_Save_VFP_D>
 80012ec:	f1b9 0f00 	cmp.w	r9, #0
 80012f0:	d032      	beq.n	8001358 <_Unwind_VRS_Pop+0x258>
 80012f2:	6833      	ldr	r3, [r6, #0]
 80012f4:	075a      	lsls	r2, r3, #29
 80012f6:	d420      	bmi.n	800133a <_Unwind_VRS_Pop+0x23a>
 80012f8:	f1b8 0f0f 	cmp.w	r8, #15
 80012fc:	d925      	bls.n	800134a <_Unwind_VRS_Pop+0x24a>
 80012fe:	466f      	mov	r7, sp
 8001300:	4638      	mov	r0, r7
 8001302:	f1c8 0510 	rsb	r5, r8, #16
 8001306:	f000 f857 	bl	80013b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800130a:	2d00      	cmp	r5, #0
 800130c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800130e:	f77f af7c 	ble.w	800120a <_Unwind_VRS_Pop+0x10a>
 8001312:	af20      	add	r7, sp, #128	; 0x80
 8001314:	e76a      	b.n	80011ec <_Unwind_VRS_Pop+0xec>
 8001316:	f023 0310 	bic.w	r3, r3, #16
 800131a:	6033      	str	r3, [r6, #0]
 800131c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001320:	f000 f89c 	bl	800145c <__gnu_Unwind_Save_WMMXC>
 8001324:	e704      	b.n	8001130 <_Unwind_VRS_Pop+0x30>
 8001326:	f023 0308 	bic.w	r3, r3, #8
 800132a:	6003      	str	r3, [r0, #0]
 800132c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001330:	f000 f868 	bl	8001404 <__gnu_Unwind_Save_WMMXD>
 8001334:	e727      	b.n	8001186 <_Unwind_VRS_Pop+0x86>
 8001336:	af20      	add	r7, sp, #128	; 0x80
 8001338:	e7bd      	b.n	80012b6 <_Unwind_VRS_Pop+0x1b6>
 800133a:	4630      	mov	r0, r6
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	f840 3bd0 	str.w	r3, [r0], #208
 8001344:	f000 f838 	bl	80013b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001348:	e7d6      	b.n	80012f8 <_Unwind_VRS_Pop+0x1f8>
 800134a:	a820      	add	r0, sp, #128	; 0x80
 800134c:	f000 f82c 	bl	80013a8 <__gnu_Unwind_Save_VFP_D>
 8001350:	e7d5      	b.n	80012fe <_Unwind_VRS_Pop+0x1fe>
 8001352:	f04f 0900 	mov.w	r9, #0
 8001356:	e7bd      	b.n	80012d4 <_Unwind_VRS_Pop+0x1d4>
 8001358:	f1b8 0f0f 	cmp.w	r8, #15
 800135c:	f63f af41 	bhi.w	80011e2 <_Unwind_VRS_Pop+0xe2>
 8001360:	af20      	add	r7, sp, #128	; 0x80
 8001362:	4638      	mov	r0, r7
 8001364:	f000 f820 	bl	80013a8 <__gnu_Unwind_Save_VFP_D>
 8001368:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800136a:	2d00      	cmp	r5, #0
 800136c:	f47f af3c 	bne.w	80011e8 <_Unwind_VRS_Pop+0xe8>
 8001370:	4638      	mov	r0, r7
 8001372:	f000 f815 	bl	80013a0 <__gnu_Unwind_Restore_VFP_D>
 8001376:	e764      	b.n	8001242 <_Unwind_VRS_Pop+0x142>

08001378 <__restore_core_regs>:
 8001378:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800137c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001380:	469c      	mov	ip, r3
 8001382:	46a6      	mov	lr, r4
 8001384:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001388:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800138c:	46e5      	mov	sp, ip
 800138e:	bd00      	pop	{pc}

08001390 <__gnu_Unwind_Restore_VFP>:
 8001390:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <__gnu_Unwind_Save_VFP>:
 8001398:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <__gnu_Unwind_Restore_VFP_D>:
 80013a0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <__gnu_Unwind_Save_VFP_D>:
 80013a8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop

080013b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80013b0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80013b8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <__gnu_Unwind_Restore_WMMXD>:
 80013c0:	ecf0 0102 	ldfe	f0, [r0], #8
 80013c4:	ecf0 1102 	ldfe	f1, [r0], #8
 80013c8:	ecf0 2102 	ldfe	f2, [r0], #8
 80013cc:	ecf0 3102 	ldfe	f3, [r0], #8
 80013d0:	ecf0 4102 	ldfe	f4, [r0], #8
 80013d4:	ecf0 5102 	ldfe	f5, [r0], #8
 80013d8:	ecf0 6102 	ldfe	f6, [r0], #8
 80013dc:	ecf0 7102 	ldfe	f7, [r0], #8
 80013e0:	ecf0 8102 	ldfp	f0, [r0], #8
 80013e4:	ecf0 9102 	ldfp	f1, [r0], #8
 80013e8:	ecf0 a102 	ldfp	f2, [r0], #8
 80013ec:	ecf0 b102 	ldfp	f3, [r0], #8
 80013f0:	ecf0 c102 	ldfp	f4, [r0], #8
 80013f4:	ecf0 d102 	ldfp	f5, [r0], #8
 80013f8:	ecf0 e102 	ldfp	f6, [r0], #8
 80013fc:	ecf0 f102 	ldfp	f7, [r0], #8
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <__gnu_Unwind_Save_WMMXD>:
 8001404:	ece0 0102 	stfe	f0, [r0], #8
 8001408:	ece0 1102 	stfe	f1, [r0], #8
 800140c:	ece0 2102 	stfe	f2, [r0], #8
 8001410:	ece0 3102 	stfe	f3, [r0], #8
 8001414:	ece0 4102 	stfe	f4, [r0], #8
 8001418:	ece0 5102 	stfe	f5, [r0], #8
 800141c:	ece0 6102 	stfe	f6, [r0], #8
 8001420:	ece0 7102 	stfe	f7, [r0], #8
 8001424:	ece0 8102 	stfp	f0, [r0], #8
 8001428:	ece0 9102 	stfp	f1, [r0], #8
 800142c:	ece0 a102 	stfp	f2, [r0], #8
 8001430:	ece0 b102 	stfp	f3, [r0], #8
 8001434:	ece0 c102 	stfp	f4, [r0], #8
 8001438:	ece0 d102 	stfp	f5, [r0], #8
 800143c:	ece0 e102 	stfp	f6, [r0], #8
 8001440:	ece0 f102 	stfp	f7, [r0], #8
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <__gnu_Unwind_Restore_WMMXC>:
 8001448:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800144c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001450:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001454:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <__gnu_Unwind_Save_WMMXC>:
 800145c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001460:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001464:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001468:	fca0 b101 	stc2	1, cr11, [r0], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <_Unwind_RaiseException>:
 8001470:	46ec      	mov	ip, sp
 8001472:	b500      	push	{lr}
 8001474:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001478:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001484:	a901      	add	r1, sp, #4
 8001486:	f7ff fbf1 	bl	8000c6c <__gnu_Unwind_RaiseException>
 800148a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800148e:	b012      	add	sp, #72	; 0x48
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <_Unwind_Resume>:
 8001494:	46ec      	mov	ip, sp
 8001496:	b500      	push	{lr}
 8001498:	e92d 5000 	stmdb	sp!, {ip, lr}
 800149c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80014a8:	a901      	add	r1, sp, #4
 80014aa:	f7ff fc19 	bl	8000ce0 <__gnu_Unwind_Resume>
 80014ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014b2:	b012      	add	sp, #72	; 0x48
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <_Unwind_Resume_or_Rethrow>:
 80014b8:	46ec      	mov	ip, sp
 80014ba:	b500      	push	{lr}
 80014bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80014c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80014cc:	a901      	add	r1, sp, #4
 80014ce:	f7ff fc29 	bl	8000d24 <__gnu_Unwind_Resume_or_Rethrow>
 80014d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014d6:	b012      	add	sp, #72	; 0x48
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <_Unwind_ForcedUnwind>:
 80014dc:	46ec      	mov	ip, sp
 80014de:	b500      	push	{lr}
 80014e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80014e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80014f0:	ab01      	add	r3, sp, #4
 80014f2:	f7ff fbeb 	bl	8000ccc <__gnu_Unwind_ForcedUnwind>
 80014f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014fa:	b012      	add	sp, #72	; 0x48
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <_Unwind_Backtrace>:
 8001500:	46ec      	mov	ip, sp
 8001502:	b500      	push	{lr}
 8001504:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001508:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001514:	aa01      	add	r2, sp, #4
 8001516:	f7ff fc5d 	bl	8000dd4 <__gnu_Unwind_Backtrace>
 800151a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800151e:	b012      	add	sp, #72	; 0x48
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <next_unwind_byte>:
 8001524:	7a02      	ldrb	r2, [r0, #8]
 8001526:	b97a      	cbnz	r2, 8001548 <next_unwind_byte+0x24>
 8001528:	7a43      	ldrb	r3, [r0, #9]
 800152a:	b1a3      	cbz	r3, 8001556 <next_unwind_byte+0x32>
 800152c:	6842      	ldr	r2, [r0, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	b410      	push	{r4}
 8001532:	7243      	strb	r3, [r0, #9]
 8001534:	6813      	ldr	r3, [r2, #0]
 8001536:	2103      	movs	r1, #3
 8001538:	1d14      	adds	r4, r2, #4
 800153a:	7201      	strb	r1, [r0, #8]
 800153c:	021a      	lsls	r2, r3, #8
 800153e:	6044      	str	r4, [r0, #4]
 8001540:	6002      	str	r2, [r0, #0]
 8001542:	bc10      	pop	{r4}
 8001544:	0e18      	lsrs	r0, r3, #24
 8001546:	4770      	bx	lr
 8001548:	6803      	ldr	r3, [r0, #0]
 800154a:	3a01      	subs	r2, #1
 800154c:	7202      	strb	r2, [r0, #8]
 800154e:	021a      	lsls	r2, r3, #8
 8001550:	6002      	str	r2, [r0, #0]
 8001552:	0e18      	lsrs	r0, r3, #24
 8001554:	4770      	bx	lr
 8001556:	20b0      	movs	r0, #176	; 0xb0
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop

0800155c <_Unwind_GetGR.constprop.0>:
 800155c:	b500      	push	{lr}
 800155e:	b085      	sub	sp, #20
 8001560:	aa03      	add	r2, sp, #12
 8001562:	2300      	movs	r3, #0
 8001564:	9200      	str	r2, [sp, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	220c      	movs	r2, #12
 800156a:	f7ff fbeb 	bl	8000d44 <_Unwind_VRS_Get>
 800156e:	9803      	ldr	r0, [sp, #12]
 8001570:	b005      	add	sp, #20
 8001572:	f85d fb04 	ldr.w	pc, [sp], #4
 8001576:	bf00      	nop

08001578 <unwind_UCB_from_context>:
 8001578:	e7f0      	b.n	800155c <_Unwind_GetGR.constprop.0>
 800157a:	bf00      	nop

0800157c <__gnu_unwind_execute>:
 800157c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001580:	4605      	mov	r5, r0
 8001582:	b085      	sub	sp, #20
 8001584:	460e      	mov	r6, r1
 8001586:	f04f 0800 	mov.w	r8, #0
 800158a:	4630      	mov	r0, r6
 800158c:	f7ff ffca 	bl	8001524 <next_unwind_byte>
 8001590:	28b0      	cmp	r0, #176	; 0xb0
 8001592:	4604      	mov	r4, r0
 8001594:	f000 80b2 	beq.w	80016fc <__gnu_unwind_execute+0x180>
 8001598:	0607      	lsls	r7, r0, #24
 800159a:	d520      	bpl.n	80015de <__gnu_unwind_execute+0x62>
 800159c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80015a0:	2b80      	cmp	r3, #128	; 0x80
 80015a2:	d04d      	beq.n	8001640 <__gnu_unwind_execute+0xc4>
 80015a4:	2b90      	cmp	r3, #144	; 0x90
 80015a6:	d036      	beq.n	8001616 <__gnu_unwind_execute+0x9a>
 80015a8:	2ba0      	cmp	r3, #160	; 0xa0
 80015aa:	d060      	beq.n	800166e <__gnu_unwind_execute+0xf2>
 80015ac:	2bb0      	cmp	r3, #176	; 0xb0
 80015ae:	d074      	beq.n	800169a <__gnu_unwind_execute+0x11e>
 80015b0:	2bc0      	cmp	r3, #192	; 0xc0
 80015b2:	f000 808b 	beq.w	80016cc <__gnu_unwind_execute+0x150>
 80015b6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80015ba:	2bd0      	cmp	r3, #208	; 0xd0
 80015bc:	d10b      	bne.n	80015d6 <__gnu_unwind_execute+0x5a>
 80015be:	f000 0207 	and.w	r2, r0, #7
 80015c2:	3201      	adds	r2, #1
 80015c4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80015c8:	2305      	movs	r3, #5
 80015ca:	2101      	movs	r1, #1
 80015cc:	4628      	mov	r0, r5
 80015ce:	f7ff fd97 	bl	8001100 <_Unwind_VRS_Pop>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d0d9      	beq.n	800158a <__gnu_unwind_execute+0xe>
 80015d6:	2009      	movs	r0, #9
 80015d8:	b005      	add	sp, #20
 80015da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015de:	f10d 090c 	add.w	r9, sp, #12
 80015e2:	2300      	movs	r3, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	0087      	lsls	r7, r0, #2
 80015e8:	f8cd 9000 	str.w	r9, [sp]
 80015ec:	220d      	movs	r2, #13
 80015ee:	4628      	mov	r0, r5
 80015f0:	f7ff fba8 	bl	8000d44 <_Unwind_VRS_Get>
 80015f4:	b2ff      	uxtb	r7, r7
 80015f6:	9b03      	ldr	r3, [sp, #12]
 80015f8:	f8cd 9000 	str.w	r9, [sp]
 80015fc:	3704      	adds	r7, #4
 80015fe:	0660      	lsls	r0, r4, #25
 8001600:	bf4c      	ite	mi
 8001602:	1bdf      	submi	r7, r3, r7
 8001604:	18ff      	addpl	r7, r7, r3
 8001606:	2300      	movs	r3, #0
 8001608:	4619      	mov	r1, r3
 800160a:	220d      	movs	r2, #13
 800160c:	4628      	mov	r0, r5
 800160e:	9703      	str	r7, [sp, #12]
 8001610:	f7ff fbbc 	bl	8000d8c <_Unwind_VRS_Set>
 8001614:	e7b9      	b.n	800158a <__gnu_unwind_execute+0xe>
 8001616:	f000 030d 	and.w	r3, r0, #13
 800161a:	2b0d      	cmp	r3, #13
 800161c:	d0db      	beq.n	80015d6 <__gnu_unwind_execute+0x5a>
 800161e:	af03      	add	r7, sp, #12
 8001620:	2300      	movs	r3, #0
 8001622:	f000 020f 	and.w	r2, r0, #15
 8001626:	4619      	mov	r1, r3
 8001628:	9700      	str	r7, [sp, #0]
 800162a:	4628      	mov	r0, r5
 800162c:	f7ff fb8a 	bl	8000d44 <_Unwind_VRS_Get>
 8001630:	2300      	movs	r3, #0
 8001632:	9700      	str	r7, [sp, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	220d      	movs	r2, #13
 8001638:	4628      	mov	r0, r5
 800163a:	f7ff fba7 	bl	8000d8c <_Unwind_VRS_Set>
 800163e:	e7a4      	b.n	800158a <__gnu_unwind_execute+0xe>
 8001640:	4630      	mov	r0, r6
 8001642:	f7ff ff6f 	bl	8001524 <next_unwind_byte>
 8001646:	0224      	lsls	r4, r4, #8
 8001648:	4320      	orrs	r0, r4
 800164a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800164e:	d0c2      	beq.n	80015d6 <__gnu_unwind_execute+0x5a>
 8001650:	0104      	lsls	r4, r0, #4
 8001652:	2300      	movs	r3, #0
 8001654:	b2a2      	uxth	r2, r4
 8001656:	4619      	mov	r1, r3
 8001658:	4628      	mov	r0, r5
 800165a:	f7ff fd51 	bl	8001100 <_Unwind_VRS_Pop>
 800165e:	2800      	cmp	r0, #0
 8001660:	d1b9      	bne.n	80015d6 <__gnu_unwind_execute+0x5a>
 8001662:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001666:	bf18      	it	ne
 8001668:	f04f 0801 	movne.w	r8, #1
 800166c:	e78d      	b.n	800158a <__gnu_unwind_execute+0xe>
 800166e:	43c2      	mvns	r2, r0
 8001670:	f002 0307 	and.w	r3, r2, #7
 8001674:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001678:	411a      	asrs	r2, r3
 800167a:	0701      	lsls	r1, r0, #28
 800167c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	bf48      	it	mi
 8001686:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800168a:	4619      	mov	r1, r3
 800168c:	4628      	mov	r0, r5
 800168e:	f7ff fd37 	bl	8001100 <_Unwind_VRS_Pop>
 8001692:	2800      	cmp	r0, #0
 8001694:	f43f af79 	beq.w	800158a <__gnu_unwind_execute+0xe>
 8001698:	e79d      	b.n	80015d6 <__gnu_unwind_execute+0x5a>
 800169a:	28b1      	cmp	r0, #177	; 0xb1
 800169c:	d033      	beq.n	8001706 <__gnu_unwind_execute+0x18a>
 800169e:	28b2      	cmp	r0, #178	; 0xb2
 80016a0:	f000 808b 	beq.w	80017ba <__gnu_unwind_execute+0x23e>
 80016a4:	28b3      	cmp	r0, #179	; 0xb3
 80016a6:	d039      	beq.n	800171c <__gnu_unwind_execute+0x1a0>
 80016a8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80016ac:	2bb4      	cmp	r3, #180	; 0xb4
 80016ae:	d092      	beq.n	80015d6 <__gnu_unwind_execute+0x5a>
 80016b0:	f000 0207 	and.w	r2, r0, #7
 80016b4:	3201      	adds	r2, #1
 80016b6:	2301      	movs	r3, #1
 80016b8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016bc:	4619      	mov	r1, r3
 80016be:	4628      	mov	r0, r5
 80016c0:	f7ff fd1e 	bl	8001100 <_Unwind_VRS_Pop>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	f43f af60 	beq.w	800158a <__gnu_unwind_execute+0xe>
 80016ca:	e784      	b.n	80015d6 <__gnu_unwind_execute+0x5a>
 80016cc:	28c6      	cmp	r0, #198	; 0xc6
 80016ce:	d042      	beq.n	8001756 <__gnu_unwind_execute+0x1da>
 80016d0:	28c7      	cmp	r0, #199	; 0xc7
 80016d2:	d04c      	beq.n	800176e <__gnu_unwind_execute+0x1f2>
 80016d4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80016d8:	2bc0      	cmp	r3, #192	; 0xc0
 80016da:	d05b      	beq.n	8001794 <__gnu_unwind_execute+0x218>
 80016dc:	28c8      	cmp	r0, #200	; 0xc8
 80016de:	d060      	beq.n	80017a2 <__gnu_unwind_execute+0x226>
 80016e0:	28c9      	cmp	r0, #201	; 0xc9
 80016e2:	f47f af78 	bne.w	80015d6 <__gnu_unwind_execute+0x5a>
 80016e6:	4630      	mov	r0, r6
 80016e8:	f7ff ff1c 	bl	8001524 <next_unwind_byte>
 80016ec:	0302      	lsls	r2, r0, #12
 80016ee:	f000 000f 	and.w	r0, r0, #15
 80016f2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80016f6:	3001      	adds	r0, #1
 80016f8:	4302      	orrs	r2, r0
 80016fa:	e765      	b.n	80015c8 <__gnu_unwind_execute+0x4c>
 80016fc:	f1b8 0f00 	cmp.w	r8, #0
 8001700:	d018      	beq.n	8001734 <__gnu_unwind_execute+0x1b8>
 8001702:	2000      	movs	r0, #0
 8001704:	e768      	b.n	80015d8 <__gnu_unwind_execute+0x5c>
 8001706:	4630      	mov	r0, r6
 8001708:	f7ff ff0c 	bl	8001524 <next_unwind_byte>
 800170c:	4602      	mov	r2, r0
 800170e:	2800      	cmp	r0, #0
 8001710:	f43f af61 	beq.w	80015d6 <__gnu_unwind_execute+0x5a>
 8001714:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001718:	d0d0      	beq.n	80016bc <__gnu_unwind_execute+0x140>
 800171a:	e75c      	b.n	80015d6 <__gnu_unwind_execute+0x5a>
 800171c:	4630      	mov	r0, r6
 800171e:	f7ff ff01 	bl	8001524 <next_unwind_byte>
 8001722:	0301      	lsls	r1, r0, #12
 8001724:	f000 000f 	and.w	r0, r0, #15
 8001728:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800172c:	1c42      	adds	r2, r0, #1
 800172e:	2301      	movs	r3, #1
 8001730:	430a      	orrs	r2, r1
 8001732:	e7c3      	b.n	80016bc <__gnu_unwind_execute+0x140>
 8001734:	ac03      	add	r4, sp, #12
 8001736:	4643      	mov	r3, r8
 8001738:	220e      	movs	r2, #14
 800173a:	4641      	mov	r1, r8
 800173c:	9400      	str	r4, [sp, #0]
 800173e:	4628      	mov	r0, r5
 8001740:	f7ff fb00 	bl	8000d44 <_Unwind_VRS_Get>
 8001744:	9400      	str	r4, [sp, #0]
 8001746:	4628      	mov	r0, r5
 8001748:	4643      	mov	r3, r8
 800174a:	220f      	movs	r2, #15
 800174c:	4641      	mov	r1, r8
 800174e:	f7ff fb1d 	bl	8000d8c <_Unwind_VRS_Set>
 8001752:	4640      	mov	r0, r8
 8001754:	e740      	b.n	80015d8 <__gnu_unwind_execute+0x5c>
 8001756:	4630      	mov	r0, r6
 8001758:	f7ff fee4 	bl	8001524 <next_unwind_byte>
 800175c:	0301      	lsls	r1, r0, #12
 800175e:	f000 000f 	and.w	r0, r0, #15
 8001762:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001766:	1c42      	adds	r2, r0, #1
 8001768:	2303      	movs	r3, #3
 800176a:	430a      	orrs	r2, r1
 800176c:	e7a6      	b.n	80016bc <__gnu_unwind_execute+0x140>
 800176e:	4630      	mov	r0, r6
 8001770:	f7ff fed8 	bl	8001524 <next_unwind_byte>
 8001774:	4602      	mov	r2, r0
 8001776:	2800      	cmp	r0, #0
 8001778:	f43f af2d 	beq.w	80015d6 <__gnu_unwind_execute+0x5a>
 800177c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001780:	f47f af29 	bne.w	80015d6 <__gnu_unwind_execute+0x5a>
 8001784:	2104      	movs	r1, #4
 8001786:	4628      	mov	r0, r5
 8001788:	f7ff fcba 	bl	8001100 <_Unwind_VRS_Pop>
 800178c:	2800      	cmp	r0, #0
 800178e:	f43f aefc 	beq.w	800158a <__gnu_unwind_execute+0xe>
 8001792:	e720      	b.n	80015d6 <__gnu_unwind_execute+0x5a>
 8001794:	f000 020f 	and.w	r2, r0, #15
 8001798:	3201      	adds	r2, #1
 800179a:	2303      	movs	r3, #3
 800179c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80017a0:	e78c      	b.n	80016bc <__gnu_unwind_execute+0x140>
 80017a2:	4630      	mov	r0, r6
 80017a4:	f7ff febe 	bl	8001524 <next_unwind_byte>
 80017a8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80017ac:	f000 030f 	and.w	r3, r0, #15
 80017b0:	3210      	adds	r2, #16
 80017b2:	3301      	adds	r3, #1
 80017b4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80017b8:	e706      	b.n	80015c8 <__gnu_unwind_execute+0x4c>
 80017ba:	2300      	movs	r3, #0
 80017bc:	f10d 090c 	add.w	r9, sp, #12
 80017c0:	220d      	movs	r2, #13
 80017c2:	4619      	mov	r1, r3
 80017c4:	f8cd 9000 	str.w	r9, [sp]
 80017c8:	4628      	mov	r0, r5
 80017ca:	f7ff fabb 	bl	8000d44 <_Unwind_VRS_Get>
 80017ce:	4630      	mov	r0, r6
 80017d0:	f7ff fea8 	bl	8001524 <next_unwind_byte>
 80017d4:	0602      	lsls	r2, r0, #24
 80017d6:	f04f 0702 	mov.w	r7, #2
 80017da:	d50c      	bpl.n	80017f6 <__gnu_unwind_execute+0x27a>
 80017dc:	9b03      	ldr	r3, [sp, #12]
 80017de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80017e2:	40b8      	lsls	r0, r7
 80017e4:	4403      	add	r3, r0
 80017e6:	4630      	mov	r0, r6
 80017e8:	9303      	str	r3, [sp, #12]
 80017ea:	f7ff fe9b 	bl	8001524 <next_unwind_byte>
 80017ee:	0603      	lsls	r3, r0, #24
 80017f0:	f107 0707 	add.w	r7, r7, #7
 80017f4:	d4f2      	bmi.n	80017dc <__gnu_unwind_execute+0x260>
 80017f6:	9b03      	ldr	r3, [sp, #12]
 80017f8:	f8cd 9000 	str.w	r9, [sp]
 80017fc:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001800:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001804:	40bc      	lsls	r4, r7
 8001806:	2300      	movs	r3, #0
 8001808:	4414      	add	r4, r2
 800180a:	4619      	mov	r1, r3
 800180c:	220d      	movs	r2, #13
 800180e:	4628      	mov	r0, r5
 8001810:	9403      	str	r4, [sp, #12]
 8001812:	f7ff fabb 	bl	8000d8c <_Unwind_VRS_Set>
 8001816:	e6b8      	b.n	800158a <__gnu_unwind_execute+0xe>

08001818 <__gnu_unwind_frame>:
 8001818:	b510      	push	{r4, lr}
 800181a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800181c:	b084      	sub	sp, #16
 800181e:	6853      	ldr	r3, [r2, #4]
 8001820:	2403      	movs	r4, #3
 8001822:	f88d 400c 	strb.w	r4, [sp, #12]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	f102 0408 	add.w	r4, r2, #8
 800182c:	4608      	mov	r0, r1
 800182e:	79d2      	ldrb	r2, [r2, #7]
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	a901      	add	r1, sp, #4
 8001834:	9402      	str	r4, [sp, #8]
 8001836:	f88d 200d 	strb.w	r2, [sp, #13]
 800183a:	f7ff fe9f 	bl	800157c <__gnu_unwind_execute>
 800183e:	b004      	add	sp, #16
 8001840:	bd10      	pop	{r4, pc}
 8001842:	bf00      	nop

08001844 <_Unwind_GetRegionStart>:
 8001844:	b508      	push	{r3, lr}
 8001846:	f7ff fe97 	bl	8001578 <unwind_UCB_from_context>
 800184a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800184c:	bd08      	pop	{r3, pc}
 800184e:	bf00      	nop

08001850 <_Unwind_GetLanguageSpecificData>:
 8001850:	b508      	push	{r3, lr}
 8001852:	f7ff fe91 	bl	8001578 <unwind_UCB_from_context>
 8001856:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001858:	79c3      	ldrb	r3, [r0, #7]
 800185a:	3302      	adds	r3, #2
 800185c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001860:	bd08      	pop	{r3, pc}
 8001862:	bf00      	nop

08001864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186a:	f000 fc8e 	bl	800218a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186e:	f000 f8cf 	bl	8001a10 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001872:	f000 f9cd 	bl	8001c10 <_ZL12MX_GPIO_Initv>
  MX_RNG_Init();
 8001876:	f000 f921 	bl	8001abc <_ZL11MX_RNG_Initv>
  MX_SPI1_Init();
 800187a:	f000 f937 	bl	8001aec <_ZL12MX_SPI1_Initv>
  MX_TIM6_Init();
 800187e:	f000 f977 	bl	8001b70 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  tkrandom::PcbStatusLed* const pcb_status_led =
      new tkrandom::PcbStatusLed(GPIOB, GPIO_PIN_0);
 8001882:	201c      	movs	r0, #28
 8001884:	f004 f901 	bl	8005a8a <_Znwj>
 8001888:	4603      	mov	r3, r0
 800188a:	461c      	mov	r4, r3
 800188c:	2201      	movs	r2, #1
 800188e:	495c      	ldr	r1, [pc, #368]	; (8001a00 <main+0x19c>)
 8001890:	4620      	mov	r0, r4
 8001892:	f003 f9db 	bl	8004c4c <_ZN8tkrandom12PcbStatusLedC1EP12GPIO_TypeDeft>
 8001896:	617c      	str	r4, [r7, #20]
  tkrandom::Transmitter* const transmitter =
      new tkrandom::Transmitter(&hspi1, GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_6);
 8001898:	201c      	movs	r0, #28
 800189a:	f004 f8f6 	bl	8005a8a <_Znwj>
 800189e:	4603      	mov	r3, r0
 80018a0:	461c      	mov	r4, r3
 80018a2:	2340      	movs	r3, #64	; 0x40
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2310      	movs	r3, #16
 80018ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018b2:	4954      	ldr	r1, [pc, #336]	; (8001a04 <main+0x1a0>)
 80018b4:	4620      	mov	r0, r4
 80018b6:	f003 fc95 	bl	80051e4 <_ZN8tkrandom11TransmitterC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS4_t>
 80018ba:	613c      	str	r4, [r7, #16]
  tkrandom::Generator* const generator =
      new tkrandom::Generator(&hrng);
 80018bc:	2004      	movs	r0, #4
 80018be:	f004 f8e4 	bl	8005a8a <_Znwj>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461c      	mov	r4, r3
 80018c6:	4950      	ldr	r1, [pc, #320]	; (8001a08 <main+0x1a4>)
 80018c8:	4620      	mov	r0, r4
 80018ca:	f003 f93b 	bl	8004b44 <_ZN8tkrandom9GeneratorC1EP17RNG_HandleTypeDef>
 80018ce:	60fc      	str	r4, [r7, #12]
  tkrandom::RngHandler* const rng_handler =
      new tkrandom::RngHandler(*generator, *transmitter);
 80018d0:	2030      	movs	r0, #48	; 0x30
 80018d2:	f004 f8da 	bl	8005a8a <_Znwj>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461c      	mov	r4, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68f9      	ldr	r1, [r7, #12]
 80018de:	4620      	mov	r0, r4
 80018e0:	f003 fa45 	bl	8004d6e <_ZN8tkrandom10RngHandlerC1ERNS_9GeneratorERNS_11TransmitterE>
 80018e4:	60bc      	str	r4, [r7, #8]
  tkrandom::DistributionPins* const distribution_pins =
      new tkrandom::DistributionPins();
 80018e6:	2020      	movs	r0, #32
 80018e8:	f004 f8cf 	bl	8005a8a <_Znwj>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461c      	mov	r4, r3
 80018f0:	4620      	mov	r0, r4
 80018f2:	2320      	movs	r3, #32
 80018f4:	461a      	mov	r2, r3
 80018f6:	2100      	movs	r1, #0
 80018f8:	f004 fab6 	bl	8005e68 <memset>
 80018fc:	607c      	str	r4, [r7, #4]
  if ((pcb_status_led == nullptr) ||
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00b      	beq.n	800191c <main+0xb8>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <main+0xb8>
      (generator == nullptr) ||
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <main+0xb8>
      (rng_handler == nullptr) ||
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <main+0xb8>
      (transmitter == nullptr) ||
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <main+0xbe>
      (distribution_pins == nullptr)) {
    return -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001920:	e06a      	b.n	80019f8 <main+0x194>
  }
  distribution_pins->gpio_port_distribution_1 = GPIOB;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a36      	ldr	r2, [pc, #216]	; (8001a00 <main+0x19c>)
 8001926:	601a      	str	r2, [r3, #0]
  distribution_pins->pin_distribution_1 = GPIO_PIN_4;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2210      	movs	r2, #16
 800192c:	809a      	strh	r2, [r3, #4]
  distribution_pins->gpio_port_distribution_2 = GPIOB;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a33      	ldr	r2, [pc, #204]	; (8001a00 <main+0x19c>)
 8001932:	609a      	str	r2, [r3, #8]
  distribution_pins->pin_distribution_2 = GPIO_PIN_5;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2220      	movs	r2, #32
 8001938:	819a      	strh	r2, [r3, #12]
  distribution_pins->gpio_port_distribution_3 = GPIOB;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <main+0x19c>)
 800193e:	611a      	str	r2, [r3, #16]
  distribution_pins->pin_distribution_3 = GPIO_PIN_6;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2240      	movs	r2, #64	; 0x40
 8001944:	829a      	strh	r2, [r3, #20]
  distribution_pins->gpio_port_distribution_4 = GPIOB;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a2d      	ldr	r2, [pc, #180]	; (8001a00 <main+0x19c>)
 800194a:	619a      	str	r2, [r3, #24]
  distribution_pins->pin_distribution_4 = GPIO_PIN_7;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	839a      	strh	r2, [r3, #28]
  tkrandom::Animation* const animation = new tkrandom::Animation(*transmitter);
 8001952:	2008      	movs	r0, #8
 8001954:	f004 f899 	bl	8005a8a <_Znwj>
 8001958:	4603      	mov	r3, r0
 800195a:	461c      	mov	r4, r3
 800195c:	6939      	ldr	r1, [r7, #16]
 800195e:	4620      	mov	r0, r4
 8001960:	f002 fed4 	bl	800470c <_ZN8tkrandom9AnimationC1ERNS_11TransmitterE>
 8001964:	603c      	str	r4, [r7, #0]
  event_handler = new tkrandom::EventHandler(*pcb_status_led,
                                             *rng_handler,
                                             *animation,
                                             *distribution_pins);
 8001966:	2024      	movs	r0, #36	; 0x24
 8001968:	f004 f88f 	bl	8005a8a <_Znwj>
 800196c:	4603      	mov	r3, r0
 800196e:	461c      	mov	r4, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	6979      	ldr	r1, [r7, #20]
 800197a:	4620      	mov	r0, r4
 800197c:	f002 ff7d 	bl	800487a <_ZN8tkrandom12EventHandlerC1ERNS_12PcbStatusLedERNS_10RngHandlerERNS_9AnimationERNS_16DistributionPinsE>
  event_handler = new tkrandom::EventHandler(*pcb_status_led,
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <main+0x1a8>)
 8001982:	601c      	str	r4, [r3, #0]
  if ((event_handler != nullptr) && (animation != nullptr)) {
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <main+0x1a8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <main+0x13a>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <main+0x13a>
    event_handler->Init();
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <main+0x1a8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f003 f803 	bl	80049a2 <_ZN8tkrandom12EventHandler4InitEv>
 800199c:	e002      	b.n	80019a4 <main+0x140>
  }
  else {
    return -1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a2:	e029      	b.n	80019f8 <main+0x194>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    event_handler->Run();
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <main+0x1a8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ff98 	bl	80048de <_ZN8tkrandom12EventHandler3RunEv>
 80019ae:	e7f9      	b.n	80019a4 <main+0x140>
      new tkrandom::PcbStatusLed(GPIOB, GPIO_PIN_0);
 80019b0:	211c      	movs	r1, #28
 80019b2:	4620      	mov	r0, r4
 80019b4:	f003 fd07 	bl	80053c6 <_ZdlPvj>
 80019b8:	f003 fd07 	bl	80053ca <__cxa_end_cleanup>
      new tkrandom::Transmitter(&hspi1, GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_6);
 80019bc:	211c      	movs	r1, #28
 80019be:	4620      	mov	r0, r4
 80019c0:	f003 fd01 	bl	80053c6 <_ZdlPvj>
 80019c4:	f003 fd01 	bl	80053ca <__cxa_end_cleanup>
      new tkrandom::Generator(&hrng);
 80019c8:	2104      	movs	r1, #4
 80019ca:	4620      	mov	r0, r4
 80019cc:	f003 fcfb 	bl	80053c6 <_ZdlPvj>
 80019d0:	f003 fcfb 	bl	80053ca <__cxa_end_cleanup>
      new tkrandom::RngHandler(*generator, *transmitter);
 80019d4:	2130      	movs	r1, #48	; 0x30
 80019d6:	4620      	mov	r0, r4
 80019d8:	f003 fcf5 	bl	80053c6 <_ZdlPvj>
 80019dc:	f003 fcf5 	bl	80053ca <__cxa_end_cleanup>
  tkrandom::Animation* const animation = new tkrandom::Animation(*transmitter);
 80019e0:	2108      	movs	r1, #8
 80019e2:	4620      	mov	r0, r4
 80019e4:	f003 fcef 	bl	80053c6 <_ZdlPvj>
 80019e8:	f003 fcef 	bl	80053ca <__cxa_end_cleanup>
                                             *distribution_pins);
 80019ec:	2124      	movs	r1, #36	; 0x24
 80019ee:	4620      	mov	r0, r4
 80019f0:	f003 fce9 	bl	80053c6 <_ZdlPvj>
 80019f4:	f003 fce9 	bl	80053ca <__cxa_end_cleanup>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	48000400 	.word	0x48000400
 8001a04:	200000a4 	.word	0x200000a4
 8001a08:	20000094 	.word	0x20000094
 8001a0c:	20000154 	.word	0x20000154

08001a10 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b096      	sub	sp, #88	; 0x58
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	2244      	movs	r2, #68	; 0x44
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 fa22 	bl	8005e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a36:	f000 ff11 	bl	800285c <HAL_PWREx_ControlVoltageScaling>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001a4a:	f000 f9cd 	bl	8001de8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a4e:	2310      	movs	r3, #16
 8001a50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a52:	2301      	movs	r3, #1
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001a5a:	23b0      	movs	r3, #176	; 0xb0
 8001a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 ff4e 	bl	8002908 <HAL_RCC_OscConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001a7c:	f000 f9b4 	bl	8001de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a80:	230f      	movs	r3, #15
 8001a82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	2102      	movs	r1, #2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 fb9b 	bl	80031d4 <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf14      	ite	ne
 8001aa4:	2301      	movne	r3, #1
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001aae:	f000 f99b 	bl	8001de8 <Error_Handler>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3758      	adds	r7, #88	; 0x58
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <_ZL11MX_RNG_Initv>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <_ZL11MX_RNG_Initv+0x28>)
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <_ZL11MX_RNG_Initv+0x2c>)
 8001ac4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <_ZL11MX_RNG_Initv+0x28>)
 8001ac8:	f001 fed8 	bl	800387c <HAL_RNG_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <_ZL11MX_RNG_Initv+0x24>
  {
    Error_Handler();
 8001adc:	f000 f984 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000094 	.word	0x20000094
 8001ae8:	50060800 	.word	0x50060800

08001aec <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <_ZL12MX_SPI1_Initv+0x80>)
 8001af4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001afc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <_ZL12MX_SPI1_Initv+0x7c>)
 8001b4c:	f001 ff66 	bl	8003a1c <HAL_SPI_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf14      	ite	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	2300      	moveq	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8001b60:	f000 f942 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200000a4 	.word	0x200000a4
 8001b6c:	40013000 	.word	0x40013000

08001b70 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b80:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <_ZL12MX_TIM6_Initv+0x98>)
 8001b82:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <_ZL12MX_TIM6_Initv+0x9c>)
 8001b84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 500;
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <_ZL12MX_TIM6_Initv+0x98>)
 8001b88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b8c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <_ZL12MX_TIM6_Initv+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000;
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <_ZL12MX_TIM6_Initv+0x98>)
 8001b96:	f241 7270 	movw	r2, #6000	; 0x1770
 8001b9a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <_ZL12MX_TIM6_Initv+0x98>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ba2:	4819      	ldr	r0, [pc, #100]	; (8001c08 <_ZL12MX_TIM6_Initv+0x98>)
 8001ba4:	f002 fab0 	bl	8004108 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <_ZL12MX_TIM6_Initv+0x4c>
  {
    Error_Handler();
 8001bb8:	f000 f916 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480f      	ldr	r0, [pc, #60]	; (8001c08 <_ZL12MX_TIM6_Initv+0x98>)
 8001bca:	f002 fd1b 	bl	8004604 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <_ZL12MX_TIM6_Initv+0x72>
  {
    Error_Handler();
 8001bde:	f000 f903 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_GenerateEvent(&htim6, TIM_EVENTSOURCE_UPDATE);
 8001be2:	2101      	movs	r1, #1
 8001be4:	4808      	ldr	r0, [pc, #32]	; (8001c08 <_ZL12MX_TIM6_Initv+0x98>)
 8001be6:	f002 fc5a 	bl	800449e <HAL_TIM_GenerateEvent>
  HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	2036      	movs	r0, #54	; 0x36
 8001bf0:	f000 fc1b 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001bf4:	2036      	movs	r0, #54	; 0x36
 8001bf6:	f000 fc34 	bl	8002462 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim6);
 8001bfa:	4803      	ldr	r0, [pc, #12]	; (8001c08 <_ZL12MX_TIM6_Initv+0x98>)
 8001bfc:	f002 fadc 	bl	80041b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000108 	.word	0x20000108
 8001c0c:	40001000 	.word	0x40001000

08001c10 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <_ZL12MX_GPIO_Initv+0x150>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a4d      	ldr	r2, [pc, #308]	; (8001d60 <_ZL12MX_GPIO_Initv+0x150>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c32:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <_ZL12MX_GPIO_Initv+0x150>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <_ZL12MX_GPIO_Initv+0x150>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a47      	ldr	r2, [pc, #284]	; (8001d60 <_ZL12MX_GPIO_Initv+0x150>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4a:	4b45      	ldr	r3, [pc, #276]	; (8001d60 <_ZL12MX_GPIO_Initv+0x150>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2150      	movs	r1, #80	; 0x50
 8001c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5e:	f000 fda5 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2101      	movs	r1, #1
 8001c66:	483f      	ldr	r0, [pc, #252]	; (8001d64 <_ZL12MX_GPIO_Initv+0x154>)
 8001c68:	f000 fda0 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c6c:	2310      	movs	r3, #16
 8001c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4619      	mov	r1, r3
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f000 fc07 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c8a:	2340      	movs	r3, #64	; 0x40
 8001c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c92:	2302      	movs	r3, #2
 8001c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca4:	f000 fbf8 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4829      	ldr	r0, [pc, #164]	; (8001d64 <_ZL12MX_GPIO_Initv+0x154>)
 8001cc0:	f000 fbea 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4822      	ldr	r0, [pc, #136]	; (8001d64 <_ZL12MX_GPIO_Initv+0x154>)
 8001cda:	f000 fbdd 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf8:	f000 fbce 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cfc:	23f0      	movs	r3, #240	; 0xf0
 8001cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d00:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d06:	2302      	movs	r3, #2
 8001d08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4814      	ldr	r0, [pc, #80]	; (8001d64 <_ZL12MX_GPIO_Initv+0x154>)
 8001d12:	f000 fbc1 	bl	8002498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2007      	movs	r0, #7
 8001d1c:	f000 fb85 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d20:	2007      	movs	r0, #7
 8001d22:	f000 fb9e 	bl	8002462 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	200a      	movs	r0, #10
 8001d2c:	f000 fb7d 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d30:	200a      	movs	r0, #10
 8001d32:	f000 fb96 	bl	8002462 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2017      	movs	r0, #23
 8001d3c:	f000 fb75 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d40:	2017      	movs	r0, #23
 8001d42:	f000 fb8e 	bl	8002462 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	2028      	movs	r0, #40	; 0x28
 8001d4c:	f000 fb6d 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d50:	2028      	movs	r0, #40	; 0x28
 8001d52:	f000 fb86 	bl	8002462 <HAL_NVIC_EnableIRQ>

}
 8001d56:	bf00      	nop
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000400 	.word	0x48000400

08001d68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  event_handler->SignalEvent(tkrandom::Event::kTimerElapsed);
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fea4 	bl	8004ac4 <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000154 	.word	0x20000154

08001d88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  // EXTI line for IN_1
  if (gpio_pin == GPIO_PIN_1) {
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d105      	bne.n	8001da4 <HAL_GPIO_EXTI_Callback+0x1c>
    event_handler->SignalEvent(tkrandom::Event::kGate1Triggered);
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fe90 	bl	8004ac4 <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE>
  }
  // EXTI line for IN_2
  if (gpio_pin == GPIO_PIN_10) {
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001daa:	d105      	bne.n	8001db8 <HAL_GPIO_EXTI_Callback+0x30>
    event_handler->SignalEvent(tkrandom::Event::kGate2Triggered);
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2103      	movs	r1, #3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fe86 	bl	8004ac4 <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE>
  }
  // EXTI lines for distribution switches (PB4, PB5, PB6, PB7)
  // hint: only one collective EXTI line for pin 5, 6 and 7
  if ((gpio_pin == GPIO_PIN_4) ||
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d008      	beq.n	8001dd0 <HAL_GPIO_EXTI_Callback+0x48>
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d005      	beq.n	8001dd0 <HAL_GPIO_EXTI_Callback+0x48>
      (gpio_pin == GPIO_PIN_5) ||
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d002      	beq.n	8001dd0 <HAL_GPIO_EXTI_Callback+0x48>
      (gpio_pin == GPIO_PIN_6) ||
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	2b80      	cmp	r3, #128	; 0x80
 8001dce:	d105      	bne.n	8001ddc <HAL_GPIO_EXTI_Callback+0x54>
      (gpio_pin == GPIO_PIN_7)) {
    event_handler->SignalEvent(tkrandom::Event::kDistributionChanged);
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 fe74 	bl	8004ac4 <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000154 	.word	0x20000154

08001de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  event_handler->SignalEvent(tkrandom::Event::kErrorOccurred);
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <Error_Handler+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2104      	movs	r1, #4
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fe66 	bl	8004ac4 <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE>
  /* USER CODE END Error_Handler_Debug */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000154 	.word	0x20000154

08001e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_MspInit+0x44>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_MspInit+0x44>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6613      	str	r3, [r2, #96]	; 0x60
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_MspInit+0x44>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x44>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x44>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x44>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b090      	sub	sp, #64	; 0x40
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	2234      	movs	r2, #52	; 0x34
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 f805 	bl	8005e68 <memset>
  if(hrng->Instance==RNG)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <HAL_RNG_MspInit+0x60>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d11b      	bne.n	8001ea0 <HAL_RNG_MspInit+0x58>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001e68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e6c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8001e6e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fb79 	bl	8003570 <HAL_RCCEx_PeriphCLKConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001e84:	f7ff ffb0 	bl	8001de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_RNG_MspInit+0x64>)
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_RNG_MspInit+0x64>)
 8001e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RNG_MspInit+0x64>)
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	3740      	adds	r7, #64	; 0x40
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	50060800 	.word	0x50060800
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_RNG_MspDeInit+0x2c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d105      	bne.n	8001ece <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_RNG_MspDeInit+0x30>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_RNG_MspDeInit+0x30>)
 8001ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	50060800 	.word	0x50060800
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_SPI_MspInit+0x7c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d128      	bne.n	8001f58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_SPI_MspInit+0x80>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <HAL_SPI_MspInit+0x80>)
 8001f0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f10:	6613      	str	r3, [r2, #96]	; 0x60
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_SPI_MspInit+0x80>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_SPI_MspInit+0x80>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_SPI_MspInit+0x80>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_SPI_MspInit+0x80>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f36:	23a0      	movs	r3, #160	; 0xa0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f46:	2305      	movs	r3, #5
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f000 faa0 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40013000 	.word	0x40013000
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_TIM_Base_MspInit+0x44>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d113      	bne.n	8001fa2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_TIM_Base_MspInit+0x48>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_TIM_Base_MspInit+0x48>)
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	6593      	str	r3, [r2, #88]	; 0x58
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_TIM_Base_MspInit+0x48>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	2036      	movs	r0, #54	; 0x36
 8001f98:	f000 fa47 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001f9c:	2036      	movs	r0, #54	; 0x36
 8001f9e:	f000 fa60 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40001000 	.word	0x40001000
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <NMI_Handler+0x4>

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002000:	f000 f918 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800200c:	2002      	movs	r0, #2
 800200e:	f000 fbff 	bl	8002810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}

08002016 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800201a:	2010      	movs	r0, #16
 800201c:	f000 fbf8 	bl	8002810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002028:	2020      	movs	r0, #32
 800202a:	f000 fbf1 	bl	8002810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800202e:	2040      	movs	r0, #64	; 0x40
 8002030:	f000 fbee 	bl	8002810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002034:	2080      	movs	r0, #128	; 0x80
 8002036:	f000 fbeb 	bl	8002810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}

0800203e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002042:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002046:	f000 fbe3 	bl	8002810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <TIM6_IRQHandler+0x10>)
 8002056:	f002 f903 	bl	8004260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000108 	.word	0x20000108

08002064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	return 1;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_kill>:

int _kill(int pid, int sig)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800207e:	f003 feb9 	bl	8005df4 <__errno>
 8002082:	4603      	mov	r3, r0
 8002084:	2216      	movs	r2, #22
 8002086:	601a      	str	r2, [r3, #0]
	return -1;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_exit>:

void _exit (int status)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800209c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ffe7 	bl	8002074 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020a6:	e7fe      	b.n	80020a6 <_exit+0x12>

080020a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <_sbrk+0x5c>)
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <_sbrk+0x60>)
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <_sbrk+0x64>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <_sbrk+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d207      	bcs.n	80020e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d8:	f003 fe8c 	bl	8005df4 <__errno>
 80020dc:	4603      	mov	r3, r0
 80020de:	220c      	movs	r2, #12
 80020e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e6:	e009      	b.n	80020fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <_sbrk+0x64>)
 80020f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2000a000 	.word	0x2000a000
 8002108:	00000400 	.word	0x00000400
 800210c:	20000158 	.word	0x20000158
 8002110:	20000188 	.word	0x20000188

08002114 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <SystemInit+0x20>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <SystemInit+0x20>)
 8002120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002170 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800213c:	f7ff ffea 	bl	8002114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <LoopForever+0x6>)
  ldr r1, =_edata
 8002142:	490d      	ldr	r1, [pc, #52]	; (8002178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <LoopForever+0xe>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002158:	4c0a      	ldr	r4, [pc, #40]	; (8002184 <LoopForever+0x16>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002166:	f003 fe4b 	bl	8005e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800216a:	f7ff fb7b 	bl	8001864 <main>

0800216e <LoopForever>:

LoopForever:
    b LoopForever
 800216e:	e7fe      	b.n	800216e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002170:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800217c:	080063dc 	.word	0x080063dc
  ldr r2, =_sbss
 8002180:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002184:	20000188 	.word	0x20000188

08002188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC1_2_IRQHandler>

0800218a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002194:	2003      	movs	r0, #3
 8002196:	f000 f93d 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800219a:	2000      	movs	r0, #0
 800219c:	f000 f80e 	bl	80021bc <HAL_InitTick>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	e001      	b.n	80021b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ac:	f7ff fe28 	bl	8001e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021b0:	79fb      	ldrb	r3, [r7, #7]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_InitTick+0x6c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d023      	beq.n	8002218 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_InitTick+0x70>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <HAL_InitTick+0x6c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021de:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f949 	bl	800247e <HAL_SYSTICK_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b0f      	cmp	r3, #15
 80021f6:	d809      	bhi.n	800220c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f8:	2200      	movs	r2, #0
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002200:	f000 f913 	bl	800242a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_InitTick+0x74>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e007      	b.n	800221c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e004      	b.n	800221c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	e001      	b.n	800221c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x20>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_IncTick+0x24>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000008 	.word	0x20000008
 8002258:	20000174 	.word	0x20000174

0800225c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000174 	.word	0x20000174

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a6:	e14e      	b.n	8002746 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	4013      	ands	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8140 	beq.w	8002740 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d005      	beq.n	80024d8 <HAL_GPIO_Init+0x40>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d130      	bne.n	800253a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250e:	2201      	movs	r2, #1
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0201 	and.w	r2, r3, #1
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d017      	beq.n	8002576 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d123      	bne.n	80025ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	6939      	ldr	r1, [r7, #16]
 80025c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0203 	and.w	r2, r3, #3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 809a 	beq.w	8002740 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <HAL_GPIO_Init+0x2cc>)
 800260e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002610:	4a54      	ldr	r2, [pc, #336]	; (8002764 <HAL_GPIO_Init+0x2cc>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6613      	str	r3, [r2, #96]	; 0x60
 8002618:	4b52      	ldr	r3, [pc, #328]	; (8002764 <HAL_GPIO_Init+0x2cc>)
 800261a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002624:	4a50      	ldr	r2, [pc, #320]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800264e:	d013      	beq.n	8002678 <HAL_GPIO_Init+0x1e0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a46      	ldr	r2, [pc, #280]	; (800276c <HAL_GPIO_Init+0x2d4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00d      	beq.n	8002674 <HAL_GPIO_Init+0x1dc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a45      	ldr	r2, [pc, #276]	; (8002770 <HAL_GPIO_Init+0x2d8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <HAL_GPIO_Init+0x1d8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a44      	ldr	r2, [pc, #272]	; (8002774 <HAL_GPIO_Init+0x2dc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_GPIO_Init+0x1d4>
 8002668:	2303      	movs	r3, #3
 800266a:	e006      	b.n	800267a <HAL_GPIO_Init+0x1e2>
 800266c:	2307      	movs	r3, #7
 800266e:	e004      	b.n	800267a <HAL_GPIO_Init+0x1e2>
 8002670:	2302      	movs	r3, #2
 8002672:	e002      	b.n	800267a <HAL_GPIO_Init+0x1e2>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_GPIO_Init+0x1e2>
 8002678:	2300      	movs	r3, #0
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	f002 0203 	and.w	r2, r2, #3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4093      	lsls	r3, r2
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268a:	4937      	ldr	r1, [pc, #220]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002698:	4b37      	ldr	r3, [pc, #220]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026bc:	4a2e      	ldr	r2, [pc, #184]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026e6:	4a24      	ldr	r2, [pc, #144]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002716:	4b18      	ldr	r3, [pc, #96]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800273a:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f aea9 	bne.w	80024a8 <HAL_GPIO_Init+0x10>
  }
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	40010000 	.word	0x40010000
 800276c:	48000400 	.word	0x48000400
 8002770:	48000800 	.word	0x48000800
 8002774:	48000c00 	.word	0x48000c00
 8002778:	40010400 	.word	0x40010400

0800277c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e001      	b.n	800279e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c8:	e002      	b.n	80027d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43d9      	mvns	r1, r3
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	400b      	ands	r3, r1
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff faaa 	bl	8001d88 <HAL_GPIO_EXTI_Callback>
  }
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40010400 	.word	0x40010400

08002840 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <HAL_PWREx_GetVoltageRange+0x18>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40007000 	.word	0x40007000

0800285c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800286a:	d130      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002878:	d038      	beq.n	80028ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002882:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002888:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2232      	movs	r2, #50	; 0x32
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	3301      	adds	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a0:	e002      	b.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	d102      	bne.n	80028bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f2      	bne.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c8:	d110      	bne.n	80028ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e00f      	b.n	80028ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d007      	beq.n	80028ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028e4:	4a05      	ldr	r2, [pc, #20]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40007000 	.word	0x40007000
 8002900:	20000000 	.word	0x20000000
 8002904:	431bde83 	.word	0x431bde83

08002908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f000 bc56 	b.w	80031c8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291c:	4ba1      	ldr	r3, [pc, #644]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002926:	4b9f      	ldr	r3, [pc, #636]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80e6 	beq.w	8002b0a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_RCC_OscConfig+0x4c>
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	f040 808d 	bne.w	8002a66 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b01      	cmp	r3, #1
 8002950:	f040 8089 	bne.w	8002a66 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002954:	4b93      	ldr	r3, [pc, #588]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <HAL_RCC_OscConfig+0x66>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f000 bc2d 	b.w	80031c8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002972:	4b8c      	ldr	r3, [pc, #560]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_RCC_OscConfig+0x80>
 800297e:	4b89      	ldr	r3, [pc, #548]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002986:	e005      	b.n	8002994 <HAL_RCC_OscConfig+0x8c>
 8002988:	4b86      	ldr	r3, [pc, #536]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 800298a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002994:	4293      	cmp	r3, r2
 8002996:	d224      	bcs.n	80029e2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fd87 	bl	80034b0 <RCC_SetFlashLatencyFromMSIRange>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f000 bc0d 	b.w	80031c8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ae:	4b7d      	ldr	r3, [pc, #500]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7c      	ldr	r2, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	4977      	ldr	r1, [pc, #476]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029cc:	4b75      	ldr	r3, [pc, #468]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	4972      	ldr	r1, [pc, #456]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
 80029e0:	e025      	b.n	8002a2e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e2:	4b70      	ldr	r3, [pc, #448]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6f      	ldr	r2, [pc, #444]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	496a      	ldr	r1, [pc, #424]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a00:	4b68      	ldr	r3, [pc, #416]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	4965      	ldr	r1, [pc, #404]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fd46 	bl	80034b0 <RCC_SetFlashLatencyFromMSIRange>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e3cc      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a2e:	f000 fcb3 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	495a      	ldr	r1, [pc, #360]	; (8002ba8 <HAL_RCC_OscConfig+0x2a0>)
 8002a40:	5ccb      	ldrb	r3, [r1, r3]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_OscConfig+0x2a4>)
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a4e:	4b58      	ldr	r3, [pc, #352]	; (8002bb0 <HAL_RCC_OscConfig+0x2a8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fbb2 	bl	80021bc <HAL_InitTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d052      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	e3b0      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d032      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4c      	ldr	r2, [pc, #304]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a7a:	f7ff fbef 	bl	800225c <HAL_GetTick>
 8002a7e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a82:	f7ff fbeb 	bl	800225c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e399      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a94:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa0:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3f      	ldr	r2, [pc, #252]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	493a      	ldr	r1, [pc, #232]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	4935      	ldr	r1, [pc, #212]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
 8002ad2:	e01a      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ad4:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a32      	ldr	r2, [pc, #200]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ae0:	f7ff fbbc 	bl	800225c <HAL_GetTick>
 8002ae4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae8:	f7ff fbb8 	bl	800225c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e366      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002afa:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1e0>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d073      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d10e      	bne.n	8002b40 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d10b      	bne.n	8002b40 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d063      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2f4>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d15f      	bne.n	8002bfc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e343      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d106      	bne.n	8002b58 <HAL_RCC_OscConfig+0x250>
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e01d      	b.n	8002b94 <HAL_RCC_OscConfig+0x28c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x274>
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0x28c>
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_RCC_OscConfig+0x29c>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7ff fb5e 	bl	800225c <HAL_GetTick>
 8002ba0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba2:	e010      	b.n	8002bc6 <HAL_RCC_OscConfig+0x2be>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	080060d0 	.word	0x080060d0
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7ff fb52 	bl	800225c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e300      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc6:	4ba0      	ldr	r3, [pc, #640]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x2ac>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7ff fb42 	bl	800225c <HAL_GetTick>
 8002bd8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7ff fb3e 	bl	800225c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e2ec      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bee:	4b96      	ldr	r3, [pc, #600]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d060      	beq.n	8002ccc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x314>
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d119      	bne.n	8002c4a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d116      	bne.n	8002c4a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	4b8a      	ldr	r3, [pc, #552]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x32c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e2c9      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	4981      	ldr	r1, [pc, #516]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c48:	e040      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c52:	4b7d      	ldr	r3, [pc, #500]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7c      	ldr	r2, [pc, #496]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7ff fafd 	bl	800225c <HAL_GetTick>
 8002c62:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7ff faf9 	bl	800225c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e2a7      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c78:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b70      	ldr	r3, [pc, #448]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	496d      	ldr	r1, [pc, #436]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
 8002c98:	e018      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b6b      	ldr	r3, [pc, #428]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7ff fad9 	bl	800225c <HAL_GetTick>
 8002caa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cae:	f7ff fad5 	bl	800225c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e283      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cc0:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d07f      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d05f      	beq.n	8002da0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002ce0:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d037      	beq.n	8002d66 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e25c      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01b      	beq.n	8002d50 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002d18:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1e:	4a4a      	ldr	r2, [pc, #296]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d28:	f7ff fa98 	bl	800225c <HAL_GetTick>
 8002d2c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d30:	f7ff fa94 	bl	800225c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b11      	cmp	r3, #17
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e242      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d42:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ef      	bne.n	8002d30 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002d50:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d56:	f023 0210 	bic.w	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	493a      	ldr	r1, [pc, #232]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6c:	4a36      	ldr	r2, [pc, #216]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7ff fa71 	bl	800225c <HAL_GetTick>
 8002d7a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7ff fa6d 	bl	800225c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b11      	cmp	r3, #17
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e21b      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0ef      	beq.n	8002d7e <HAL_RCC_OscConfig+0x476>
 8002d9e:	e01b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da6:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7ff fa54 	bl	800225c <HAL_GetTick>
 8002db4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7ff fa50 	bl	800225c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b11      	cmp	r3, #17
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1fe      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dca:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ef      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80c1 	beq.w	8002f68 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10e      	bne.n	8002e16 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	; 0x58
 8002e04:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_RCC_OscConfig+0x540>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_RCC_OscConfig+0x544>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_RCC_OscConfig+0x544>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_OscConfig+0x544>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7ff fa15 	bl	800225c <HAL_GetTick>
 8002e32:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e34:	e00c      	b.n	8002e50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7ff fa11 	bl	800225c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d905      	bls.n	8002e50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e1bf      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	4bb1      	ldr	r3, [pc, #708]	; (8003118 <HAL_RCC_OscConfig+0x810>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ec      	beq.n	8002e36 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02c      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002e68:	4bac      	ldr	r3, [pc, #688]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	49a8      	ldr	r1, [pc, #672]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e8e:	4ba3      	ldr	r3, [pc, #652]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	4aa1      	ldr	r2, [pc, #644]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e9e:	4b9f      	ldr	r3, [pc, #636]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a9d      	ldr	r2, [pc, #628]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eae:	e018      	b.n	8002ee2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002eb0:	4b9a      	ldr	r3, [pc, #616]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a99      	ldr	r2, [pc, #612]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec0:	e00f      	b.n	8002ee2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ec2:	4b96      	ldr	r3, [pc, #600]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	4a94      	ldr	r2, [pc, #592]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ed2:	4b92      	ldr	r3, [pc, #584]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	4a90      	ldr	r2, [pc, #576]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002eda:	f023 0304 	bic.w	r3, r3, #4
 8002ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7ff f9b7 	bl	800225c <HAL_GetTick>
 8002eee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7ff f9b3 	bl	800225c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e15f      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f08:	4b84      	ldr	r3, [pc, #528]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ed      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x5ea>
 8002f16:	e01d      	b.n	8002f54 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7ff f9a0 	bl	800225c <HAL_GetTick>
 8002f1c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7ff f99c 	bl	800225c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e148      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f36:	4b79      	ldr	r3, [pc, #484]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ed      	bne.n	8002f20 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002f44:	4b75      	ldr	r3, [pc, #468]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	4a74      	ldr	r2, [pc, #464]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	4a6e      	ldr	r2, [pc, #440]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03c      	beq.n	8002fee <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f7c:	4b67      	ldr	r3, [pc, #412]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f82:	4a66      	ldr	r2, [pc, #408]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7ff f966 	bl	800225c <HAL_GetTick>
 8002f90:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f94:	f7ff f962 	bl	800225c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e110      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <HAL_RCC_OscConfig+0x68c>
 8002fb4:	e01b      	b.n	8002fee <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fb6:	4b59      	ldr	r3, [pc, #356]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fbc:	4a57      	ldr	r2, [pc, #348]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7ff f949 	bl	800225c <HAL_GetTick>
 8002fca:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fce:	f7ff f945 	bl	800225c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0f3      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe0:	4b4e      	ldr	r3, [pc, #312]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8002fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ef      	bne.n	8002fce <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80e7 	beq.w	80031c6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	f040 80b7 	bne.w	8003170 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003002:	4b46      	ldr	r3, [pc, #280]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	429a      	cmp	r2, r3
 8003014:	d124      	bne.n	8003060 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	3b01      	subs	r3, #1
 8003022:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d11b      	bne.n	8003060 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d113      	bne.n	8003060 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	3b01      	subs	r3, #1
 8003046:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d109      	bne.n	8003060 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	3b01      	subs	r3, #1
 800305a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d061      	beq.n	8003124 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d056      	beq.n	8003114 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <HAL_RCC_OscConfig+0x814>)
 800306c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003070:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003072:	f7ff f8f3 	bl	800225c <HAL_GetTick>
 8003076:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307a:	f7ff f8ef 	bl	800225c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e09d      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308c:	4b23      	ldr	r3, [pc, #140]	; (800311c <HAL_RCC_OscConfig+0x814>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_OscConfig+0x814>)
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_RCC_OscConfig+0x818>)
 800309e:	4013      	ands	r3, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030a8:	3a01      	subs	r2, #1
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	4311      	orrs	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b2:	0212      	lsls	r2, r2, #8
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ba:	0852      	lsrs	r2, r2, #1
 80030bc:	3a01      	subs	r2, #1
 80030be:	0552      	lsls	r2, r2, #21
 80030c0:	4311      	orrs	r1, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c6:	0852      	lsrs	r2, r2, #1
 80030c8:	3a01      	subs	r2, #1
 80030ca:	0652      	lsls	r2, r2, #25
 80030cc:	430a      	orrs	r2, r1
 80030ce:	4913      	ldr	r1, [pc, #76]	; (800311c <HAL_RCC_OscConfig+0x814>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_RCC_OscConfig+0x814>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a10      	ldr	r2, [pc, #64]	; (800311c <HAL_RCC_OscConfig+0x814>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e0:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_RCC_OscConfig+0x814>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a0d      	ldr	r2, [pc, #52]	; (800311c <HAL_RCC_OscConfig+0x814>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030ec:	f7ff f8b6 	bl	800225c <HAL_GetTick>
 80030f0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7ff f8b2 	bl	800225c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e060      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_OscConfig+0x814>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003112:	e058      	b.n	80031c6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e057      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
 8003118:	40007000 	.word	0x40007000
 800311c:	40021000 	.word	0x40021000
 8003120:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003124:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d14a      	bne.n	80031c6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800313c:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a23      	ldr	r2, [pc, #140]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003146:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003148:	f7ff f888 	bl	800225c <HAL_GetTick>
 800314c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7ff f884 	bl	800225c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e032      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x848>
 800316e:	e02a      	b.n	80031c6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d025      	beq.n	80031c2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 800317c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003180:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003182:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003188:	f023 0303 	bic.w	r3, r3, #3
 800318c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 8003194:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003198:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7ff f85f 	bl	800225c <HAL_GetTick>
 800319e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a2:	f7ff f85b 	bl	800225c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e009      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_OscConfig+0x8c8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x89a>
 80031c0:	e001      	b.n	80031c6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0c8      	b.n	800337a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b66      	ldr	r3, [pc, #408]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4961      	ldr	r1, [pc, #388]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b5f      	ldr	r3, [pc, #380]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b0      	b.n	800337a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d04c      	beq.n	80032be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d107      	bne.n	800323c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322c:	4b56      	ldr	r3, [pc, #344]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d121      	bne.n	800327c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e09e      	b.n	800337a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d107      	bne.n	8003254 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003244:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d115      	bne.n	800327c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e092      	b.n	800337a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d107      	bne.n	800326c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800325c:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e086      	b.n	800337a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800326c:	4b46      	ldr	r3, [pc, #280]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e07e      	b.n	800337a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800327c:	4b42      	ldr	r3, [pc, #264]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f023 0203 	bic.w	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	493f      	ldr	r1, [pc, #252]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328e:	f7fe ffe5 	bl	800225c <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003294:	e00a      	b.n	80032ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003296:	f7fe ffe1 	bl	800225c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e066      	b.n	800337a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 020c 	and.w	r2, r3, #12
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d1eb      	bne.n	8003296 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ca:	4b2f      	ldr	r3, [pc, #188]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	492c      	ldr	r1, [pc, #176]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b29      	ldr	r3, [pc, #164]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d210      	bcs.n	800330c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4924      	ldr	r1, [pc, #144]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_RCC_ClockConfig+0x1b0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e036      	b.n	800337a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4918      	ldr	r1, [pc, #96]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4910      	ldr	r1, [pc, #64]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800334a:	f000 f825 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 800334e:	4602      	mov	r2, r0
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_RCC_ClockConfig+0x1b4>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	490c      	ldr	r1, [pc, #48]	; (800338c <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	5ccb      	ldrb	r3, [r1, r3]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	fa22 f303 	lsr.w	r3, r2, r3
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ff24 	bl	80021bc <HAL_InitTick>
 8003374:	4603      	mov	r3, r0
 8003376:	72fb      	strb	r3, [r7, #11]

  return status;
 8003378:	7afb      	ldrb	r3, [r7, #11]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40022000 	.word	0x40022000
 8003388:	40021000 	.word	0x40021000
 800338c:	080060d0 	.word	0x080060d0
 8003390:	20000000 	.word	0x20000000
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b0:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x34>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d121      	bne.n	800340a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d11e      	bne.n	800340a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033cc:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033f4:	4a2b      	ldr	r2, [pc, #172]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10d      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d102      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	e004      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d101      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_RCC_GetSysClockFreq+0x114>)
 800341e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d134      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003426:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d003      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0xa6>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d003      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0xac>
 800343c:	e005      	b.n	800344a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003440:	617b      	str	r3, [r7, #20]
      break;
 8003442:	e005      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_RCC_GetSysClockFreq+0x114>)
 8003446:	617b      	str	r3, [r7, #20]
      break;
 8003448:	e002      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	617b      	str	r3, [r7, #20]
      break;
 800344e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	3301      	adds	r3, #1
 800345c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	fb02 f203 	mul.w	r2, r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	0e5b      	lsrs	r3, r3, #25
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	3301      	adds	r3, #1
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003490:	69bb      	ldr	r3, [r7, #24]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	080060e0 	.word	0x080060e0
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	007a1200 	.word	0x007a1200

080034b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034bc:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034c8:	f7ff f9ba 	bl	8002840 <HAL_PWREx_GetVoltageRange>
 80034cc:	6178      	str	r0, [r7, #20]
 80034ce:	e014      	b.n	80034fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b25      	ldr	r3, [pc, #148]	; (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	; 0x58
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034e8:	f7ff f9aa 	bl	8002840 <HAL_PWREx_GetVoltageRange>
 80034ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d10b      	bne.n	800351a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b80      	cmp	r3, #128	; 0x80
 8003506:	d919      	bls.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2ba0      	cmp	r3, #160	; 0xa0
 800350c:	d902      	bls.n	8003514 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800350e:	2302      	movs	r3, #2
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	e013      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003514:	2301      	movs	r3, #1
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	e010      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d902      	bls.n	8003526 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003520:	2303      	movs	r3, #3
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	e00a      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b80      	cmp	r3, #128	; 0x80
 800352a:	d102      	bne.n	8003532 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800352c:	2302      	movs	r3, #2
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	e004      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b70      	cmp	r3, #112	; 0x70
 8003536:	d101      	bne.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003538:	2301      	movs	r3, #1
 800353a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 0207 	bic.w	r2, r3, #7
 8003544:	4909      	ldr	r1, [pc, #36]	; (800356c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800354c:	4b07      	ldr	r3, [pc, #28]	; (800356c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	429a      	cmp	r2, r3
 8003558:	d001      	beq.n	800355e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	40022000 	.word	0x40022000

08003570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003578:	2300      	movs	r3, #0
 800357a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800357c:	2300      	movs	r3, #0
 800357e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 809e 	beq.w	80036ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003592:	4b46      	ldr	r3, [pc, #280]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b40      	ldr	r3, [pc, #256]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	4a3f      	ldr	r2, [pc, #252]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	; 0x58
 80035b4:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a39      	ldr	r2, [pc, #228]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035d0:	f7fe fe44 	bl	800225c <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035d6:	e009      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d8:	f7fe fe40 	bl	800225c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	74fb      	strb	r3, [r7, #19]
        break;
 80035ea:	e005      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ef      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d15a      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003608:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01e      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d019      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003626:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003646:	4a19      	ldr	r2, [pc, #100]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d016      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fe00 	bl	800225c <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365e:	e00b      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe fdfc 	bl	800225c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d902      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	74fb      	strb	r3, [r7, #19]
            break;
 8003676:	e006      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0ec      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368c:	4b07      	ldr	r3, [pc, #28]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4904      	ldr	r1, [pc, #16]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036a2:	e009      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
 80036a8:	e006      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b8:	7c7b      	ldrb	r3, [r7, #17]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036be:	4b6e      	ldr	r3, [pc, #440]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	4a6d      	ldr	r2, [pc, #436]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d6:	4b68      	ldr	r3, [pc, #416]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f023 0203 	bic.w	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4964      	ldr	r1, [pc, #400]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036f8:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f023 020c 	bic.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	495c      	ldr	r1, [pc, #368]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800371a:	4b57      	ldr	r3, [pc, #348]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4953      	ldr	r1, [pc, #332]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800373c:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	494b      	ldr	r1, [pc, #300]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800375e:	4b46      	ldr	r3, [pc, #280]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4942      	ldr	r1, [pc, #264]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003780:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	493a      	ldr	r1, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037a2:	4b35      	ldr	r3, [pc, #212]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	4931      	ldr	r1, [pc, #196]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037c4:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	4929      	ldr	r1, [pc, #164]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	4920      	ldr	r1, [pc, #128]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	4918      	ldr	r1, [pc, #96]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003826:	d105      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003828:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a12      	ldr	r2, [pc, #72]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800382e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003832:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	490a      	ldr	r1, [pc, #40]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385e:	d105      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800386a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800386c:	7cbb      	ldrb	r3, [r7, #18]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000

0800387c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e049      	b.n	8003922 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	795b      	ldrb	r3, [r3, #5]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe fad2 	bl	8001e48 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0204 	orr.w	r2, r2, #4
 80038b8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d104      	bne.n	80038d2 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2204      	movs	r2, #4
 80038cc:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e027      	b.n	8003922 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80038d2:	f7fe fcc3 	bl	800225c <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038d8:	e015      	b.n	8003906 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80038da:	f7fe fcbf 	bl	800225c <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d90e      	bls.n	8003906 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d107      	bne.n	8003906 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e00d      	b.n	8003922 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d0e2      	beq.n	80038da <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;
#endif
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e01c      	b.n	8003976 <HAL_RNG_DeInit+0x4c>
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 020c 	bic.w	r2, r2, #12
 800394a:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800395a:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fe faa7 	bl	8001eb0 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	791b      	ldrb	r3, [r3, #4]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003994:	2302      	movs	r3, #2
 8003996:	e03d      	b.n	8003a14 <HAL_RNG_GenerateRandomNumber+0x96>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	795b      	ldrb	r3, [r3, #5]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d12c      	bne.n	8003a02 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039ae:	f7fe fc55 	bl	800225c <HAL_GetTick>
 80039b2:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80039b4:	e011      	b.n	80039da <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80039b6:	f7fe fc51 	bl	800225c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d90a      	bls.n	80039da <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e01c      	b.n	8003a14 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d1e6      	bne.n	80039b6 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	715a      	strb	r2, [r3, #5]
 8003a00:	e004      	b.n	8003a0c <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2204      	movs	r2, #4
 8003a06:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	711a      	strb	r2, [r3, #4]

  return status;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e095      	b.n	8003b5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3e:	d009      	beq.n	8003a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	61da      	str	r2, [r3, #28]
 8003a46:	e005      	b.n	8003a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fe fa38 	bl	8001ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a94:	d902      	bls.n	8003a9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e002      	b.n	8003aa2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003aaa:	d007      	beq.n	8003abc <HAL_SPI_Init+0xa0>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afe:	ea42 0103 	orr.w	r1, r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	0c1b      	lsrs	r3, r3, #16
 8003b18:	f003 0204 	and.w	r2, r3, #4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b38:	ea42 0103 	orr.w	r1, r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b088      	sub	sp, #32
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_SPI_Transmit+0x22>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e158      	b.n	8003e36 <HAL_SPI_Transmit+0x2d4>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b8c:	f7fe fb66 	bl	800225c <HAL_GetTick>
 8003b90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d002      	beq.n	8003ba8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ba6:	e13d      	b.n	8003e24 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_SPI_Transmit+0x52>
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bb8:	e134      	b.n	8003e24 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	88fa      	ldrh	r2, [r7, #6]
 8003bd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c04:	d10f      	bne.n	8003c26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d007      	beq.n	8003c44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c4c:	d94b      	bls.n	8003ce6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_SPI_Transmit+0xfa>
 8003c56:	8afb      	ldrh	r3, [r7, #22]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d13e      	bne.n	8003cda <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	881a      	ldrh	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	1c9a      	adds	r2, r3, #2
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c80:	e02b      	b.n	8003cda <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d112      	bne.n	8003cb6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	881a      	ldrh	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	1c9a      	adds	r2, r3, #2
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cb4:	e011      	b.n	8003cda <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb6:	f7fe fad1 	bl	800225c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d803      	bhi.n	8003cce <HAL_SPI_Transmit+0x16c>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ccc:	d102      	bne.n	8003cd4 <HAL_SPI_Transmit+0x172>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cd8:	e0a4      	b.n	8003e24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ce      	bne.n	8003c82 <HAL_SPI_Transmit+0x120>
 8003ce4:	e07c      	b.n	8003de0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Transmit+0x192>
 8003cee:	8afb      	ldrh	r3, [r7, #22]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d170      	bne.n	8003dd6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d912      	bls.n	8003d24 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	881a      	ldrh	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b02      	subs	r3, #2
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d22:	e058      	b.n	8003dd6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d4a:	e044      	b.n	8003dd6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d12b      	bne.n	8003db2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d912      	bls.n	8003d8a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	1c9a      	adds	r2, r3, #2
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b02      	subs	r3, #2
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d88:	e025      	b.n	8003dd6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003db0:	e011      	b.n	8003dd6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db2:	f7fe fa53 	bl	800225c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d803      	bhi.n	8003dca <HAL_SPI_Transmit+0x268>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc8:	d102      	bne.n	8003dd0 <HAL_SPI_Transmit+0x26e>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dd4:	e026      	b.n	8003e24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1b5      	bne.n	8003d4c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	6839      	ldr	r1, [r7, #0]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f949 	bl	800407c <SPI_EndRxTxTransaction>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e000      	b.n	8003e24 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e34:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e50:	f7fe fa04 	bl	800225c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e60:	f7fe f9fc 	bl	800225c <HAL_GetTick>
 8003e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e66:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	015b      	lsls	r3, r3, #5
 8003e6c:	0d1b      	lsrs	r3, r3, #20
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e76:	e054      	b.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7e:	d050      	beq.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e80:	f7fe f9ec 	bl	800225c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d902      	bls.n	8003e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d13d      	bne.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eae:	d111      	bne.n	8003ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb8:	d004      	beq.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec2:	d107      	bne.n	8003ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003edc:	d10f      	bne.n	8003efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e017      	b.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	bf0c      	ite	eq
 8003f32:	2301      	moveq	r3, #1
 8003f34:	2300      	movne	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d19b      	bne.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000000 	.word	0x20000000

08003f50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f62:	f7fe f97b 	bl	800225c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	4413      	add	r3, r2
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003f72:	f7fe f973 	bl	800225c <HAL_GetTick>
 8003f76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f80:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	00da      	lsls	r2, r3, #3
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	0d1b      	lsrs	r3, r3, #20
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f98:	e060      	b.n	800405c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fa0:	d107      	bne.n	8003fb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb8:	d050      	beq.n	800405c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fba:	f7fe f94f 	bl	800225c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d902      	bls.n	8003fd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d13d      	bne.n	800404c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe8:	d111      	bne.n	800400e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff2:	d004      	beq.n	8003ffe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffc:	d107      	bne.n	800400e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004016:	d10f      	bne.n	8004038 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004036:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e010      	b.n	800406e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	3b01      	subs	r3, #1
 800405a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	d196      	bne.n	8003f9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3728      	adds	r7, #40	; 0x28
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000000 	.word	0x20000000

0800407c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff ff5b 	bl	8003f50 <SPI_WaitFifoStateUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e027      	b.n	8004100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2200      	movs	r2, #0
 80040b8:	2180      	movs	r1, #128	; 0x80
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff fec0 	bl	8003e40 <SPI_WaitFlagStateUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e014      	b.n	8004100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2200      	movs	r2, #0
 80040de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff ff34 	bl	8003f50 <SPI_WaitFifoStateUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e000      	b.n	8004100 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e049      	b.n	80041ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd ff1a 	bl	8001f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 f9f8 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e03b      	b.n	8004248 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a19      	ldr	r2, [pc, #100]	; (8004254 <HAL_TIM_Base_Start_IT+0x9c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_TIM_Base_Start_IT+0x4e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fa:	d004      	beq.n	8004206 <HAL_TIM_Base_Start_IT+0x4e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a15      	ldr	r2, [pc, #84]	; (8004258 <HAL_TIM_Base_Start_IT+0xa0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d115      	bne.n	8004232 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_TIM_Base_Start_IT+0xa4>)
 800420e:	4013      	ands	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b06      	cmp	r3, #6
 8004216:	d015      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x8c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421e:	d011      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004230:	e008      	b.n	8004244 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e000      	b.n	8004246 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004244:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40014000 	.word	0x40014000
 800425c:	00010007 	.word	0x00010007

08004260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b02      	cmp	r3, #2
 8004274:	d122      	bne.n	80042bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b02      	cmp	r3, #2
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0202 	mvn.w	r2, #2
 800428c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f92c 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f91e 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f92f 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0204 	mvn.w	r2, #4
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f902 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8f4 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f905 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b08      	cmp	r3, #8
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b08      	cmp	r3, #8
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0208 	mvn.w	r2, #8
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2204      	movs	r2, #4
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8d8 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8ca 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f8db 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b10      	cmp	r3, #16
 8004370:	d122      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b10      	cmp	r3, #16
 800437e:	d11b      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0210 	mvn.w	r2, #16
 8004388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2208      	movs	r2, #8
 800438e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8ae 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f8a0 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f8b1 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10e      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d107      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0201 	mvn.w	r2, #1
 80043dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd fcc2 	bl	8001d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	2b80      	cmp	r3, #128	; 0x80
 80043f0:	d10e      	bne.n	8004410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d107      	bne.n	8004410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f96a 	bl	80046e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441e:	d10e      	bne.n	800443e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b80      	cmp	r3, #128	; 0x80
 800442c:	d107      	bne.n	800443e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f95d 	bl	80046f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d10e      	bne.n	800446a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	d107      	bne.n	800446a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f85f 	bl	8004528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b20      	cmp	r3, #32
 8004476:	d10e      	bne.n	8004496 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b20      	cmp	r3, #32
 8004484:	d107      	bne.n	8004496 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0220 	mvn.w	r2, #32
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f91d 	bl	80046d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_TIM_GenerateEvent+0x18>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e014      	b.n	80044e0 <HAL_TIM_GenerateEvent+0x42>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2a      	ldr	r2, [pc, #168]	; (80045f8 <TIM_Base_SetConfig+0xbc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0x20>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d108      	bne.n	800456e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <TIM_Base_SetConfig+0xbc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00b      	beq.n	800458e <TIM_Base_SetConfig+0x52>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d007      	beq.n	800458e <TIM_Base_SetConfig+0x52>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <TIM_Base_SetConfig+0xc0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_Base_SetConfig+0x52>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <TIM_Base_SetConfig+0xc4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d108      	bne.n	80045a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a0c      	ldr	r2, [pc, #48]	; (80045f8 <TIM_Base_SetConfig+0xbc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0xa0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0b      	ldr	r2, [pc, #44]	; (80045fc <TIM_Base_SetConfig+0xc0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0xa0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <TIM_Base_SetConfig+0xc4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	615a      	str	r2, [r3, #20]
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400

08004604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004618:	2302      	movs	r3, #2
 800461a:	e04f      	b.n	80046bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d108      	bne.n	8004658 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800464c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004684:	d004      	beq.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a10      	ldr	r2, [pc, #64]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10c      	bne.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004696:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40014000 	.word	0x40014000

080046d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <_ZN8tkrandom9AnimationC1ERNS_11TransmitterE>:
// MICS ------------------------------------------------------------------------

namespace tkrandom {

// MEMBER FUNCTIONS ------------------------------------------------------------
Animation::Animation(Transmitter& transmitter)
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
    : state_(AnimationState::kStateNone),
      transmitter_(transmitter) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	605a      	str	r2, [r3, #4]

}
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <_ZN8tkrandom9Animation14ClockAnimationEv>:
//------------------------------------------------------------------------------
AnimationStatus Animation::ClockAnimation() {
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  AnimationStatus return_value = AnimationStatus::kOngoing;
 8004738:	2301      	movs	r3, #1
 800473a:	60fb      	str	r3, [r7, #12]
  TransmitterStatus transmitter_status = TransmitterStatus::kSuccess;
 800473c:	2300      	movs	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]

  // switches LEDs if counter threshold has been reached
  switch (state_) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d86d      	bhi.n	8004824 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf4>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <_ZN8tkrandom9Animation14ClockAnimationEv+0x20>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004775 	.word	0x08004775
 8004754:	0800478f 	.word	0x0800478f
 8004758:	080047a3 	.word	0x080047a3
 800475c:	080047b7 	.word	0x080047b7
 8004760:	080047cb 	.word	0x080047cb
 8004764:	080047df 	.word	0x080047df
 8004768:	080047f3 	.word	0x080047f3
 800476c:	08004807 	.word	0x08004807
 8004770:	0800481f 	.word	0x0800481f
    case AnimationState::kStateNone:
      transmitter_status = transmitter_.SetLedBrightness(Led::kLed1, 0xffffU);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800477c:	2104      	movs	r1, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fd9e 	bl	80052c0 <_ZNK8tkrandom11Transmitter16SetLedBrightnessENS_3LedEt>
 8004784:	60b8      	str	r0, [r7, #8]
      state_ = AnimationState::kState1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]
      break;
 800478c:	e04b      	b.n	8004826 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf6>
    case AnimationState::kState1:
      transmitter_status = SwitchLeds(Led::kLed2, Led::kLed1);
 800478e:	2204      	movs	r2, #4
 8004790:	2105      	movs	r1, #5
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f852 	bl	800483c <_ZNK8tkrandom9Animation10SwitchLedsENS_3LedES1_>
 8004798:	60b8      	str	r0, [r7, #8]
      state_ = AnimationState::kState2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	601a      	str	r2, [r3, #0]
      break;
 80047a0:	e041      	b.n	8004826 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf6>
    case AnimationState::kState2:
      transmitter_status = SwitchLeds(Led::kLed3, Led::kLed2);
 80047a2:	2205      	movs	r2, #5
 80047a4:	2106      	movs	r1, #6
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f848 	bl	800483c <_ZNK8tkrandom9Animation10SwitchLedsENS_3LedES1_>
 80047ac:	60b8      	str	r0, [r7, #8]
      state_ = AnimationState::kState3;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2203      	movs	r2, #3
 80047b2:	601a      	str	r2, [r3, #0]
      break;
 80047b4:	e037      	b.n	8004826 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf6>
    case AnimationState::kState3:
      transmitter_status = SwitchLeds(Led::kLed4, Led::kLed3);
 80047b6:	2206      	movs	r2, #6
 80047b8:	2107      	movs	r1, #7
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f83e 	bl	800483c <_ZNK8tkrandom9Animation10SwitchLedsENS_3LedES1_>
 80047c0:	60b8      	str	r0, [r7, #8]
      state_ = AnimationState::kState4;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2204      	movs	r2, #4
 80047c6:	601a      	str	r2, [r3, #0]
      break;
 80047c8:	e02d      	b.n	8004826 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf6>
    case AnimationState::kState4:
      transmitter_status = SwitchLeds(Led::kLed3, Led::kLed4);
 80047ca:	2207      	movs	r2, #7
 80047cc:	2106      	movs	r1, #6
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f834 	bl	800483c <_ZNK8tkrandom9Animation10SwitchLedsENS_3LedES1_>
 80047d4:	60b8      	str	r0, [r7, #8]
      state_ = AnimationState::kState5;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2205      	movs	r2, #5
 80047da:	601a      	str	r2, [r3, #0]
      break;
 80047dc:	e023      	b.n	8004826 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf6>
    case AnimationState::kState5:
      transmitter_status = SwitchLeds(Led::kLed2, Led::kLed3);
 80047de:	2206      	movs	r2, #6
 80047e0:	2105      	movs	r1, #5
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f82a 	bl	800483c <_ZNK8tkrandom9Animation10SwitchLedsENS_3LedES1_>
 80047e8:	60b8      	str	r0, [r7, #8]
      state_ = AnimationState::kState6;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2206      	movs	r2, #6
 80047ee:	601a      	str	r2, [r3, #0]
      break;
 80047f0:	e019      	b.n	8004826 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf6>
    case AnimationState::kState6:
      transmitter_status = SwitchLeds(Led::kLed1, Led::kLed2);
 80047f2:	2205      	movs	r2, #5
 80047f4:	2104      	movs	r1, #4
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f820 	bl	800483c <_ZNK8tkrandom9Animation10SwitchLedsENS_3LedES1_>
 80047fc:	60b8      	str	r0, [r7, #8]
      state_ = AnimationState::kState7;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2207      	movs	r2, #7
 8004802:	601a      	str	r2, [r3, #0]
      break;
 8004804:	e00f      	b.n	8004826 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf6>
    case AnimationState::kState7:
      transmitter_status = transmitter_.SetLedBrightness(Led::kLed1, 0x0000U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	2104      	movs	r1, #4
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fd56 	bl	80052c0 <_ZNK8tkrandom11Transmitter16SetLedBrightnessENS_3LedEt>
 8004814:	60b8      	str	r0, [r7, #8]
      state_ = AnimationState::kStateComplete;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2208      	movs	r2, #8
 800481a:	601a      	str	r2, [r3, #0]
      break;
 800481c:	e003      	b.n	8004826 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf6>
    case AnimationState::kStateComplete:
      return_value = AnimationStatus::kCompleted;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
      break;
 8004822:	e000      	b.n	8004826 <_ZN8tkrandom9Animation14ClockAnimationEv+0xf6>
    default:
      break;
 8004824:	bf00      	nop
  }

  if (transmitter_status != TransmitterStatus::kSuccess) {
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <_ZN8tkrandom9Animation14ClockAnimationEv+0x100>
    return_value = AnimationStatus::kError;
 800482c:	2302      	movs	r3, #2
 800482e:	60fb      	str	r3, [r7, #12]
  }

  return return_value;
 8004830:	68fb      	ldr	r3, [r7, #12]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop

0800483c <_ZNK8tkrandom9Animation10SwitchLedsENS_3LedES1_>:
//------------------------------------------------------------------------------
TransmitterStatus Animation::SwitchLeds(const Led led_on,
                                        const Led led_off) const {
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  TransmitterStatus return_code =
      transmitter_.SetLedBrightness(led_on, 0xffffU);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fd34 	bl	80052c0 <_ZNK8tkrandom11Transmitter16SetLedBrightnessENS_3LedEt>
 8004858:	6178      	str	r0, [r7, #20]
  if (return_code == TransmitterStatus::kSuccess) {
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d107      	bne.n	8004870 <_ZNK8tkrandom9Animation10SwitchLedsENS_3LedES1_+0x34>
    return_code = transmitter_.SetLedBrightness(led_off, 0x0000U);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fd29 	bl	80052c0 <_ZNK8tkrandom11Transmitter16SetLedBrightnessENS_3LedEt>
 800486e:	6178      	str	r0, [r7, #20]
  }

  return return_code;
 8004870:	697b      	ldr	r3, [r7, #20]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <_ZN8tkrandom12EventHandlerC1ERNS_12PcbStatusLedERNS_10RngHandlerERNS_9AnimationERNS_16DistributionPinsE>:
// MICS ------------------------------------------------------------------------

namespace tkrandom {

// MEMBER FUNCTIONS ------------------------------------------------------------
EventHandler::EventHandler(PcbStatusLed& pcb_status_led,
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	603b      	str	r3, [r7, #0]
      has_error_occurred_(false),
      has_distribution_changed_(false),
      is_gate_1_(false),
      is_gate_2_(false),
      debounce_counter_(0U),
      kDebounceDelay_(1U) {
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	609a      	str	r2, [r3, #8]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	60da      	str	r2, [r3, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	611a      	str	r2, [r3, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	751a      	strb	r2, [r3, #20]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	755a      	strb	r2, [r3, #21]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	759a      	strb	r2, [r3, #22]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	75da      	strb	r2, [r3, #23]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	761a      	strb	r2, [r3, #24]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	61da      	str	r2, [r3, #28]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	621a      	str	r2, [r3, #32]

}
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <_ZN8tkrandom12EventHandler3RunEv>:
//------------------------------------------------------------------------------
void EventHandler::Run() {
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  // processes gate inputs
  if (state_ == EventHandlerState::kWorking) {
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d11d      	bne.n	800492a <_ZN8tkrandom12EventHandler3RunEv+0x4c>
    if (is_gate_1_ || is_gate_2_) {
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	7ddb      	ldrb	r3, [r3, #23]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <_ZN8tkrandom12EventHandler3RunEv+0x20>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	7e1b      	ldrb	r3, [r3, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d015      	beq.n	800492a <_ZN8tkrandom12EventHandler3RunEv+0x4c>
      const RngHandlerStatus rng_handler_status =
          rng_handler_.SetOutputsLeds(is_gate_1_, is_gate_2_);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6898      	ldr	r0, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	7dd9      	ldrb	r1, [r3, #23]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	7e1b      	ldrb	r3, [r3, #24]
 800490a:	461a      	mov	r2, r3
 800490c:	f000 fa64 	bl	8004dd8 <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb>
 8004910:	60f8      	str	r0, [r7, #12]
      if (rng_handler_status != RngHandlerStatus::kSuccess) {
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <_ZN8tkrandom12EventHandler3RunEv+0x40>
        HandleError();
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f905 	bl	8004b28 <_ZN8tkrandom12EventHandler11HandleErrorEv>
      }
      is_gate_1_ = false;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	75da      	strb	r2, [r3, #23]
      is_gate_2_ = false;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	761a      	strb	r2, [r3, #24]
    }
  }
  // timer based event processing
  if (has_timer_elapsed_) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	7d1b      	ldrb	r3, [r3, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d029      	beq.n	8004986 <_ZN8tkrandom12EventHandler3RunEv+0xa8>
    pcbStatusLed_.ProcessTick();
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f9c3 	bl	8004cc2 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv>
    rng_handler_.ProcessTick();
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fc42 	bl	80051ca <_ZN8tkrandom10RngHandler11ProcessTickEv>
    if (has_distribution_changed_) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	7d9b      	ldrb	r3, [r3, #22]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <_ZN8tkrandom12EventHandler3RunEv+0x76>
      ProcessDistribution();  // timer based processing for switch debouncing
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f837 	bl	80049c2 <_ZN8tkrandom12EventHandler19ProcessDistributionEv>
    }
    if (state_ == EventHandlerState::kAnimation) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d111      	bne.n	8004980 <_ZN8tkrandom12EventHandler3RunEv+0xa2>
      const AnimationStatus animation_status = animation_.ClockAnimation();
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fee5 	bl	8004730 <_ZN8tkrandom9Animation14ClockAnimationEv>
 8004966:	60b8      	str	r0, [r7, #8]
      if (animation_status == AnimationStatus::kCompleted) {
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <_ZN8tkrandom12EventHandler3RunEv+0x96>
        state_ = EventHandlerState::kWorking;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	601a      	str	r2, [r3, #0]
      }
      if (animation_status == AnimationStatus::kError) {
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d102      	bne.n	8004980 <_ZN8tkrandom12EventHandler3RunEv+0xa2>
        HandleError();
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8d4 	bl	8004b28 <_ZN8tkrandom12EventHandler11HandleErrorEv>
      }
    }
    has_timer_elapsed_ = false;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	751a      	strb	r2, [r3, #20]
  }
  // error handling
  if (has_error_occurred_) {
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7d5b      	ldrb	r3, [r3, #21]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <_ZN8tkrandom12EventHandler3RunEv+0xbc>
    HandleError();
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8ca 	bl	8004b28 <_ZN8tkrandom12EventHandler11HandleErrorEv>
    has_error_occurred_ = false;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	755a      	strb	r2, [r3, #21]
  }
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <_ZN8tkrandom12EventHandler4InitEv>:
//------------------------------------------------------------------------------
void EventHandler::Init() {
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  rng_handler_.Init();
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fa02 	bl	8004db8 <_ZN8tkrandom10RngHandler4InitEv>
  has_distribution_changed_ = true;  // triggers ProcessDistribution()
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	759a      	strb	r2, [r3, #22]
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <_ZN8tkrandom12EventHandler19ProcessDistributionEv>:
//------------------------------------------------------------------------------
void EventHandler::ProcessDistribution() {
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b088      	sub	sp, #32
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  // debounces distribution switches
  if (debounce_counter_ > kDebounceDelay_) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d96d      	bls.n	8004ab2 <_ZN8tkrandom12EventHandler19ProcessDistributionEv+0xf0>
    has_distribution_changed_ = false;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	759a      	strb	r2, [r3, #22]
    debounce_counter_ = 0U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	61da      	str	r2, [r3, #28]
    Distribution distribution_1 = Distribution::kUniform;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
    Distribution distribution_2 = Distribution::kUniform;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
    Distribution distribution_3 = Distribution::kUniform;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
    Distribution distribution_4 = Distribution::kUniform;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
    const GPIO_PinState pin_distr_1 =
        HAL_GPIO_ReadPin(distribution_pins_.gpio_port_distribution_1,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	681a      	ldr	r2, [r3, #0]
                         distribution_pins_.pin_distribution_1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
        HAL_GPIO_ReadPin(distribution_pins_.gpio_port_distribution_1,
 80049fc:	889b      	ldrh	r3, [r3, #4]
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f7fd febb 	bl	800277c <HAL_GPIO_ReadPin>
 8004a06:	4603      	mov	r3, r0
 8004a08:	73fb      	strb	r3, [r7, #15]
    const GPIO_PinState pin_distr_2 =
        HAL_GPIO_ReadPin(distribution_pins_.gpio_port_distribution_2,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	689a      	ldr	r2, [r3, #8]
                         distribution_pins_.pin_distribution_2);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
        HAL_GPIO_ReadPin(distribution_pins_.gpio_port_distribution_2,
 8004a14:	899b      	ldrh	r3, [r3, #12]
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f7fd feaf 	bl	800277c <HAL_GPIO_ReadPin>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	73bb      	strb	r3, [r7, #14]
    const GPIO_PinState pin_distr_3 =
        HAL_GPIO_ReadPin(distribution_pins_.gpio_port_distribution_3,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	691a      	ldr	r2, [r3, #16]
                         distribution_pins_.pin_distribution_3);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
        HAL_GPIO_ReadPin(distribution_pins_.gpio_port_distribution_3,
 8004a2c:	8a9b      	ldrh	r3, [r3, #20]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f7fd fea3 	bl	800277c <HAL_GPIO_ReadPin>
 8004a36:	4603      	mov	r3, r0
 8004a38:	737b      	strb	r3, [r7, #13]
    const GPIO_PinState pin_distr_4 =
        HAL_GPIO_ReadPin(distribution_pins_.gpio_port_distribution_4,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	699a      	ldr	r2, [r3, #24]
                         distribution_pins_.pin_distribution_4);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
        HAL_GPIO_ReadPin(distribution_pins_.gpio_port_distribution_4,
 8004a44:	8b9b      	ldrh	r3, [r3, #28]
 8004a46:	4619      	mov	r1, r3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	f7fd fe97 	bl	800277c <HAL_GPIO_ReadPin>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	733b      	strb	r3, [r7, #12]
    if (pin_distr_1 == GPIO_PIN_SET) {
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <_ZN8tkrandom12EventHandler19ProcessDistributionEv+0x9a>
      distribution_1 = Distribution::kNormal;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	61fb      	str	r3, [r7, #28]
    }
    if (pin_distr_2 == GPIO_PIN_SET) {
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <_ZN8tkrandom12EventHandler19ProcessDistributionEv+0xa4>
          distribution_2 = Distribution::kNormal;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61bb      	str	r3, [r7, #24]
        }
    if (pin_distr_3 == GPIO_PIN_SET) {
 8004a66:	7b7b      	ldrb	r3, [r7, #13]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <_ZN8tkrandom12EventHandler19ProcessDistributionEv+0xae>
          distribution_3 = Distribution::kNormal;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	617b      	str	r3, [r7, #20]
        }
    if (pin_distr_4 == GPIO_PIN_SET) {
 8004a70:	7b3b      	ldrb	r3, [r7, #12]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <_ZN8tkrandom12EventHandler19ProcessDistributionEv+0xb8>
          distribution_4 = Distribution::kNormal;
 8004a76:	2301      	movs	r3, #1
 8004a78:	613b      	str	r3, [r7, #16]
        }
    rng_handler_.SetDistribution(Output::kOutput1, distribution_1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	2100      	movs	r1, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fa0a 	bl	8004e9c <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE>
    rng_handler_.SetDistribution(Output::kOutput2, distribution_2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fa03 	bl	8004e9c <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE>
    rng_handler_.SetDistribution(Output::kOutput3, distribution_3);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f9fc 	bl	8004e9c <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE>
    rng_handler_.SetDistribution(Output::kOutput4, distribution_4);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	2103      	movs	r1, #3
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f9f5 	bl	8004e9c <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE>
  }
  debounce_counter_++;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	61da      	str	r2, [r3, #28]
}
 8004abc:	bf00      	nop
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE>:
//------------------------------------------------------------------------------
void EventHandler::SignalEvent(const Event event) {
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d821      	bhi.n	8004b18 <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE+0x54>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE+0x18>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b11 	.word	0x08004b11
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	08004b09 	.word	0x08004b09
 8004aec:	08004af9 	.word	0x08004af9
  switch (event) {
    case Event::kDistributionChanged:
      has_distribution_changed_ = true;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	759a      	strb	r2, [r3, #22]
      break;
 8004af6:	e010      	b.n	8004b1a <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE+0x56>
    case Event::kErrorOccurred:
      has_error_occurred_ = true;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	755a      	strb	r2, [r3, #21]
      break;
 8004afe:	e00c      	b.n	8004b1a <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE+0x56>
    case Event::kGate1Triggered:
      is_gate_1_ = true;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	75da      	strb	r2, [r3, #23]
      break;
 8004b06:	e008      	b.n	8004b1a <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE+0x56>
    case Event::kGate2Triggered:
      is_gate_2_ = true;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	761a      	strb	r2, [r3, #24]
      break;
 8004b0e:	e004      	b.n	8004b1a <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE+0x56>
    case Event::kTimerElapsed:
      has_timer_elapsed_ = true;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	751a      	strb	r2, [r3, #20]
      break;
 8004b16:	e000      	b.n	8004b1a <_ZN8tkrandom12EventHandler11SignalEventENS_5EventE+0x56>
    default:
      break;
 8004b18:	bf00      	nop
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop

08004b28 <_ZN8tkrandom12EventHandler11HandleErrorEv>:
//------------------------------------------------------------------------------
void EventHandler::HandleError() {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  pcbStatusLed_.SetLedMode(PcbStatusLedMode::kErrorMode);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2101      	movs	r1, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f8ab 	bl	8004c92 <_ZN8tkrandom12PcbStatusLed10SetLedModeENS_16PcbStatusLedModeE>
  // TODO: any proper error handling
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_ZN8tkrandom9GeneratorC1EP17RNG_HandleTypeDef>:

// MICS ------------------------------------------------------------------------
namespace tkrandom {

// MEMBER FUNCTIONS ------------------------------------------------------------
Generator::Generator(RNG_HandleTypeDef* const random_handle)
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
    : random_handle_(random_handle) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	601a      	str	r2, [r3, #0]

}
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <_ZNK8tkrandom9Generator22GetUniformRandomNumberEPt>:
//------------------------------------------------------------------------------
GeneratorStatus Generator::GetUniformRandomNumber(uint16_t* number) const {
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b086      	sub	sp, #24
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
  GeneratorStatus return_value = GeneratorStatus::kSuccess;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
  uint32_t rng_number = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
  const HAL_StatusTypeDef hal_status =
      HAL_RNG_GenerateRandomNumber(random_handle_, &rng_number);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f107 020c 	add.w	r2, r7, #12
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fefd 	bl	800397e <HAL_RNG_GenerateRandomNumber>
 8004b84:	4603      	mov	r3, r0
 8004b86:	74fb      	strb	r3, [r7, #19]
  if (hal_status == HAL_OK) {
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <_ZNK8tkrandom9Generator22GetUniformRandomNumberEPt+0x36>
    *number = static_cast<uint16_t>(rng_number);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	e004      	b.n	8004ba2 <_ZNK8tkrandom9Generator22GetUniformRandomNumberEPt+0x40>
  }
  else {
    *number = 0U;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	801a      	strh	r2, [r3, #0]
    return_value = GeneratorStatus::kError;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	617b      	str	r3, [r7, #20]
  }
  return return_value;
 8004ba2:	697b      	ldr	r3, [r7, #20]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZNK8tkrandom9Generator21GetNormalRandomNumberEPt>:
//------------------------------------------------------------------------------
GeneratorStatus Generator::GetNormalRandomNumber(uint16_t* number) const {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  GeneratorStatus return_value = GeneratorStatus::kSuccess;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
  uint32_t rng_number = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]
  uint32_t sum = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	613b      	str	r3, [r7, #16]

  // simple and computationally lightweight algorithm for normal distribution
  // with musically reasonable result (high standard deviation):
  // divides the sum of 4 uniform random numbers by 4
  for (uint8_t i = 0U; i < 2U; ++i) {
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d823      	bhi.n	8004c14 <_ZNK8tkrandom9Generator21GetNormalRandomNumberEPt+0x68>
    const HAL_StatusTypeDef hal_status =
        HAL_RNG_GenerateRandomNumber(random_handle_, &rng_number);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f107 0208 	add.w	r2, r7, #8
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe fed1 	bl	800397e <HAL_RNG_GenerateRandomNumber>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	73bb      	strb	r3, [r7, #14]
    if (hal_status == HAL_OK) {
 8004be0:	7bbb      	ldrb	r3, [r7, #14]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <_ZNK8tkrandom9Generator21GetNormalRandomNumberEPt+0x56>
      sum += static_cast<uint16_t>(rng_number);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4413      	add	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
      sum += static_cast<uint16_t>(rng_number >> 16U);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	e004      	b.n	8004c0c <_ZNK8tkrandom9Generator21GetNormalRandomNumberEPt+0x60>
    }
    else {
      sum = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
      return_value = GeneratorStatus::kError;
 8004c06:	2301      	movs	r3, #1
 8004c08:	617b      	str	r3, [r7, #20]
      break;
 8004c0a:	e003      	b.n	8004c14 <_ZNK8tkrandom9Generator21GetNormalRandomNumberEPt+0x68>
  for (uint8_t i = 0U; i < 2U; ++i) {
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
 8004c12:	e7d8      	b.n	8004bc6 <_ZNK8tkrandom9Generator21GetNormalRandomNumberEPt+0x1a>
    }
  }
  *number = static_cast<uint16_t>(sum/4U);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	801a      	strh	r2, [r3, #0]

  return return_value;
 8004c1e:	697b      	ldr	r3, [r7, #20]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <_ZN8tkrandom9Generator8ResetRngEv>:
//------------------------------------------------------------------------------
void Generator::ResetRng() {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  HAL_RNG_DeInit(random_handle_);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fe fe78 	bl	800392a <HAL_RNG_DeInit>
  HAL_RNG_Init(random_handle_);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fe1c 	bl	800387c <HAL_RNG_Init>
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <_ZN8tkrandom12PcbStatusLedC1EP12GPIO_TypeDeft>:

// MICS ------------------------------------------------------------------------
namespace tkrandom {

// MEMBER FUNCTIONS ------------------------------------------------------------
PcbStatusLed::PcbStatusLed(GPIO_TypeDef* const gpio_port_led,
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
      tick_counter_(0U),
      kErrorCount_(5U),
      kNormalCountOn_(48U),
      kNormalCountOff_(50U),
      gpio_port_led_(gpio_port_led),
      kPinLed_(pin_led) {
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2205      	movs	r2, #5
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2230      	movs	r2, #48	; 0x30
 8004c70:	60da      	str	r2, [r3, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2232      	movs	r2, #50	; 0x32
 8004c76:	611a      	str	r2, [r3, #16]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	615a      	str	r2, [r3, #20]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	831a      	strh	r2, [r3, #24]
}
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <_ZN8tkrandom12PcbStatusLed10SetLedModeENS_16PcbStatusLedModeE>:
//------------------------------------------------------------------------------
void PcbStatusLed::SetLedMode(const PcbStatusLedMode mode) {
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  mode_ = mode;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	601a      	str	r2, [r3, #0]
  if (mode_ == PcbStatusLedMode::kSwitchedOff) {
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d107      	bne.n	8004cba <_ZN8tkrandom12PcbStatusLed10SetLedModeENS_16PcbStatusLedModeE+0x28>
    HAL_GPIO_WritePin(gpio_port_led_, kPinLed_, GPIO_PIN_RESET);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6958      	ldr	r0, [r3, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8b1b      	ldrh	r3, [r3, #24]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f7fd fd79 	bl	80027ac <HAL_GPIO_WritePin>
  }
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv>:
//------------------------------------------------------------------------------
void PcbStatusLed::ProcessTick() {
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  switch (mode_) {
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d042      	beq.n	8004d58 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0x96>
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	dc42      	bgt.n	8004d5c <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0x9a>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0x1e>
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d025      	beq.n	8004d2a <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0x68>
      }
      break;
    case PcbStatusLedMode::kSwitchedOff:
      break;
    default:
      break;
 8004cde:	e03d      	b.n	8004d5c <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0x9a>
      tick_counter_++;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	605a      	str	r2, [r3, #4]
      if (tick_counter_ > kNormalCountOn_) {
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d907      	bls.n	8004d06 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0x44>
        HAL_GPIO_WritePin(gpio_port_led_, kPinLed_, GPIO_PIN_SET);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6958      	ldr	r0, [r3, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8b1b      	ldrh	r3, [r3, #24]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4619      	mov	r1, r3
 8004d02:	f7fd fd53 	bl	80027ac <HAL_GPIO_WritePin>
      if (tick_counter_ > kNormalCountOff_) {
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d926      	bls.n	8004d60 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0x9e>
        HAL_GPIO_WritePin(gpio_port_led_, kPinLed_, GPIO_PIN_RESET);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6958      	ldr	r0, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8b1b      	ldrh	r3, [r3, #24]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f7fd fd45 	bl	80027ac <HAL_GPIO_WritePin>
        tick_counter_ = 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]
      break;
 8004d28:	e01a      	b.n	8004d60 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0x9e>
      tick_counter_++;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	605a      	str	r2, [r3, #4]
      if (tick_counter_ > kErrorCount_) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d911      	bls.n	8004d64 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0xa2>
        HAL_GPIO_TogglePin(gpio_port_led_, kPinLed_);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8b1b      	ldrh	r3, [r3, #24]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7fd fd46 	bl	80027dc <HAL_GPIO_TogglePin>
        tick_counter_ = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	605a      	str	r2, [r3, #4]
      break;
 8004d56:	e005      	b.n	8004d64 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0xa2>
      break;
 8004d58:	bf00      	nop
 8004d5a:	e004      	b.n	8004d66 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0xa4>
      break;
 8004d5c:	bf00      	nop
 8004d5e:	e002      	b.n	8004d66 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0xa4>
      break;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <_ZN8tkrandom12PcbStatusLed11ProcessTickEv+0xa4>
      break;
 8004d64:	bf00      	nop
  }
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <_ZN8tkrandom10RngHandlerC1ERNS_9GeneratorERNS_11TransmitterE>:

// MICS ------------------------------------------------------------------------
namespace tkrandom {

// MEMBER FUNCTIONS ------------------------------------------------------------
RngHandler::RngHandler(Generator& generator,
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
      distribution_1_(Distribution::kUniform),
      distribution_2_(Distribution::kUniform),
      distribution_3_(Distribution::kUniform),
      distribution_4_(Distribution::kUniform),
      index_uniform_(0U),
      index_normal_(0U) {
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	611a      	str	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	615a      	str	r2, [r3, #20]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	619a      	str	r2, [r3, #24]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	61da      	str	r2, [r3, #28]

}
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <_ZN8tkrandom10RngHandler4InitEv>:
//------------------------------------------------------------------------------
void RngHandler::Init() {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  transmitter_.Init();
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fa3b 	bl	8005240 <_ZN8tkrandom11Transmitter4InitEv>
  FillBuffers();
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f892 	bl	8004ef4 <_ZN8tkrandom10RngHandler11FillBuffersEv>
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb>:
//------------------------------------------------------------------------------
RngHandlerStatus RngHandler::SetOutputsLeds(const bool is_gate_1,
                                            const bool is_gate_2) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	70fb      	strb	r3, [r7, #3]
 8004de4:	4613      	mov	r3, r2
 8004de6:	70bb      	strb	r3, [r7, #2]
  RngHandlerStatus return_value = RngHandlerStatus::kSuccess;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]

  // sets all voltage outputs ahead of LEDs to reduce output latency
  if (is_gate_1) {
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb+0x34>
    if (SetOutputs123() != TransmitterStatus::kSuccess) {
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8cb 	bl	8004f8e <_ZN8tkrandom10RngHandler13SetOutputs123Ev>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf14      	ite	ne
 8004dfe:	2301      	movne	r3, #1
 8004e00:	2300      	moveq	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb+0x34>
      return_value = RngHandlerStatus::kErrorTransfer;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
    }
  }
  if (is_gate_2) {
 8004e0c:	78bb      	ldrb	r3, [r7, #2]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00c      	beq.n	8004e2c <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb+0x54>
    if (SetOutput4() != TransmitterStatus::kSuccess) {
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f910 	bl	8005038 <_ZN8tkrandom10RngHandler10SetOutput4Ev>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	bf14      	ite	ne
 8004e1e:	2301      	movne	r3, #1
 8004e20:	2300      	moveq	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb+0x54>
      return_value = RngHandlerStatus::kErrorTransfer;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]
    }
  }
  // rollback of random buffer indexes for LED values
  RollbackBufferIndexes(is_gate_1, is_gate_2);
 8004e2c:	78ba      	ldrb	r2, [r7, #2]
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f92a 	bl	800508c <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb>
  // sets brightness of LEDs
  if (is_gate_1) {
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00c      	beq.n	8004e58 <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb+0x80>
    if (SetLeds123() != TransmitterStatus::kSuccess) {
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f8cd 	bl	8004fde <_ZN8tkrandom10RngHandler10SetLeds123Ev>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb+0x80>
      return_value = RngHandlerStatus::kErrorTransfer;
 8004e54:	2301      	movs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
    }
  }
  if (is_gate_2) {
 8004e58:	78bb      	ldrb	r3, [r7, #2]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb+0xa0>
    if (SetLed4() != TransmitterStatus::kSuccess) {
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8ff 	bl	8005062 <_ZN8tkrandom10RngHandler7SetLed4Ev>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb+0xa0>
      return_value = RngHandlerStatus::kErrorTransfer;
 8004e74:	2301      	movs	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
    }
  }
  // fills random buffers with new random numbers
  if (FillBuffers() != RngHandlerStatus::kSuccess) {
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f83b 	bl	8004ef4 <_ZN8tkrandom10RngHandler11FillBuffersEv>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <_ZN8tkrandom10RngHandler14SetOutputsLedsEbb+0xba>
    return_value = RngHandlerStatus::kErrorRng;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  return return_value;
 8004e92:	68fb      	ldr	r3, [r7, #12]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE>:
//------------------------------------------------------------------------------
void RngHandler::SetDistribution(const Output output,
                                 const Distribution distribution) {
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d81a      	bhi.n	8004ee4 <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE+0x48>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE+0x18>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ec5 	.word	0x08004ec5
 8004eb8:	08004ecd 	.word	0x08004ecd
 8004ebc:	08004ed5 	.word	0x08004ed5
 8004ec0:	08004edd 	.word	0x08004edd
  switch (output) {
    case Output::kOutput1:
      distribution_1_ = distribution;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	609a      	str	r2, [r3, #8]
      break;
 8004eca:	e00c      	b.n	8004ee6 <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE+0x4a>
    case Output::kOutput2:
      distribution_2_ = distribution;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	60da      	str	r2, [r3, #12]
      break;
 8004ed2:	e008      	b.n	8004ee6 <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE+0x4a>
    case Output::kOutput3:
      distribution_3_ = distribution;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]
      break;
 8004eda:	e004      	b.n	8004ee6 <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE+0x4a>
    case Output::kOutput4:
      distribution_4_ = distribution;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	615a      	str	r2, [r3, #20]
      break;
 8004ee2:	e000      	b.n	8004ee6 <_ZN8tkrandom10RngHandler15SetDistributionENS_6OutputENS_12DistributionE+0x4a>
    default:
      break;
 8004ee4:	bf00      	nop
  }

}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop

08004ef4 <_ZN8tkrandom10RngHandler11FillBuffersEv>:
//------------------------------------------------------------------------------
RngHandlerStatus RngHandler::FillBuffers() {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  RngHandlerStatus return_value = RngHandlerStatus::kSuccess;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
  uint16_t rng_number = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	817b      	strh	r3, [r7, #10]

  // fills random buffer with uniform distribution
  while (index_uniform_ < kBufferSize_) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d81b      	bhi.n	8004f44 <_ZN8tkrandom10RngHandler11FillBuffersEv+0x50>
    const GeneratorStatus generator_status =
        generator_.GetUniformRandomNumber(&rng_number);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f107 020a 	add.w	r2, r7, #10
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fe23 	bl	8004b62 <_ZNK8tkrandom9Generator22GetUniformRandomNumberEPt>
 8004f1c:	6138      	str	r0, [r7, #16]
    if (generator_status == GeneratorStatus::kSuccess) {
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <_ZN8tkrandom10RngHandler11FillBuffersEv+0x40>
      buffer_uniform_[index_uniform_] = rng_number;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	8979      	ldrh	r1, [r7, #10]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3210      	adds	r2, #16
 8004f2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004f32:	e001      	b.n	8004f38 <_ZN8tkrandom10RngHandler11FillBuffersEv+0x44>
    }
    else {
      return_value = RngHandlerStatus::kErrorRng;
 8004f34:	2302      	movs	r3, #2
 8004f36:	617b      	str	r3, [r7, #20]
    }
    index_uniform_++;  // incremented also in error case to prevent deadlock
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	619a      	str	r2, [r3, #24]
  while (index_uniform_ < kBufferSize_) {
 8004f42:	e7df      	b.n	8004f04 <_ZN8tkrandom10RngHandler11FillBuffersEv+0x10>
  }
  // fills random buffer with normal distribution
  while (index_normal_ < kBufferSize_) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d81b      	bhi.n	8004f84 <_ZN8tkrandom10RngHandler11FillBuffersEv+0x90>
    const GeneratorStatus generator_status =
        generator_.GetNormalRandomNumber(&rng_number);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f107 020a 	add.w	r2, r7, #10
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fe28 	bl	8004bac <_ZNK8tkrandom9Generator21GetNormalRandomNumberEPt>
 8004f5c:	60f8      	str	r0, [r7, #12]
    if (generator_status == GeneratorStatus::kSuccess) {
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d107      	bne.n	8004f74 <_ZN8tkrandom10RngHandler11FillBuffersEv+0x80>
      buffer_normal_[index_normal_] = rng_number;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	8979      	ldrh	r1, [r7, #10]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3214      	adds	r2, #20
 8004f6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004f72:	e001      	b.n	8004f78 <_ZN8tkrandom10RngHandler11FillBuffersEv+0x84>
    }
    else {
      return_value = RngHandlerStatus::kErrorRng;
 8004f74:	2302      	movs	r3, #2
 8004f76:	617b      	str	r3, [r7, #20]
    }
      index_normal_++;  // incremented also in error case to prevent deadlock
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	61da      	str	r2, [r3, #28]
  while (index_normal_ < kBufferSize_) {
 8004f82:	e7df      	b.n	8004f44 <_ZN8tkrandom10RngHandler11FillBuffersEv+0x50>
  }

  return return_value;
 8004f84:	697b      	ldr	r3, [r7, #20]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <_ZN8tkrandom10RngHandler13SetOutputs123Ev>:
//------------------------------------------------------------------------------
TransmitterStatus RngHandler::SetOutputs123(void) {
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  TransmitterStatus return_value = TransmitterStatus::kSuccess;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
  uint8_t output = static_cast<uint8_t>(Output::kOutput1);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	74fb      	strb	r3, [r7, #19]

  while (output <= static_cast<uint8_t>(Output::kOutput3)) {
 8004f9e:	7cfb      	ldrb	r3, [r7, #19]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d817      	bhi.n	8004fd4 <_ZN8tkrandom10RngHandler13SetOutputs123Ev+0x46>
    const uint16_t random_number = GetRandomNumber(static_cast<Output>(output));
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f8db 	bl	8005164 <_ZN8tkrandom10RngHandler15GetRandomNumberENS_6OutputE>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	823b      	strh	r3, [r7, #16]
    const TransmitterStatus transmitter_status =
        transmitter_.SetVoltage(static_cast<Output>(output), random_number);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	7cf9      	ldrb	r1, [r7, #19]
 8004fb8:	8a3a      	ldrh	r2, [r7, #16]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f969 	bl	8005292 <_ZNK8tkrandom11Transmitter10SetVoltageENS_6OutputEt>
 8004fc0:	60f8      	str	r0, [r7, #12]
    if (transmitter_status != TransmitterStatus::kSuccess) {
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <_ZN8tkrandom10RngHandler13SetOutputs123Ev+0x3e>
      return_value = TransmitterStatus::kError;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	617b      	str	r3, [r7, #20]
    }
    output++;
 8004fcc:	7cfb      	ldrb	r3, [r7, #19]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	74fb      	strb	r3, [r7, #19]
  while (output <= static_cast<uint8_t>(Output::kOutput3)) {
 8004fd2:	e7e4      	b.n	8004f9e <_ZN8tkrandom10RngHandler13SetOutputs123Ev+0x10>
  }

  return return_value;
 8004fd4:	697b      	ldr	r3, [r7, #20]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <_ZN8tkrandom10RngHandler10SetLeds123Ev>:
//------------------------------------------------------------------------------
TransmitterStatus RngHandler::SetLeds123(void) {
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  TransmitterStatus return_value = TransmitterStatus::kSuccess;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
  uint8_t output = static_cast<uint8_t>(Output::kOutput1);
 8004fea:	2300      	movs	r3, #0
 8004fec:	74fb      	strb	r3, [r7, #19]
  uint8_t led = static_cast<uint8_t>(Led::kLed1);
 8004fee:	2304      	movs	r3, #4
 8004ff0:	74bb      	strb	r3, [r7, #18]

  while (output <= static_cast<uint8_t>(Output::kOutput3)) {
 8004ff2:	7cfb      	ldrb	r3, [r7, #19]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d81a      	bhi.n	800502e <_ZN8tkrandom10RngHandler10SetLeds123Ev+0x50>
    const uint16_t random_number = GetRandomNumber(static_cast<Output>(output));
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f8b1 	bl	8005164 <_ZN8tkrandom10RngHandler15GetRandomNumberENS_6OutputE>
 8005002:	4603      	mov	r3, r0
 8005004:	823b      	strh	r3, [r7, #16]
    const TransmitterStatus transmitter_status =
        transmitter_.SetLedBrightness(static_cast<Led>(led), random_number);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	7cb9      	ldrb	r1, [r7, #18]
 800500c:	8a3a      	ldrh	r2, [r7, #16]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f956 	bl	80052c0 <_ZNK8tkrandom11Transmitter16SetLedBrightnessENS_3LedEt>
 8005014:	60f8      	str	r0, [r7, #12]
    if (transmitter_status != TransmitterStatus::kSuccess) {
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <_ZN8tkrandom10RngHandler10SetLeds123Ev+0x42>
      return_value = TransmitterStatus::kError;
 800501c:	2301      	movs	r3, #1
 800501e:	617b      	str	r3, [r7, #20]
    }
    led++;
 8005020:	7cbb      	ldrb	r3, [r7, #18]
 8005022:	3301      	adds	r3, #1
 8005024:	74bb      	strb	r3, [r7, #18]
    output++;
 8005026:	7cfb      	ldrb	r3, [r7, #19]
 8005028:	3301      	adds	r3, #1
 800502a:	74fb      	strb	r3, [r7, #19]
  while (output <= static_cast<uint8_t>(Output::kOutput3)) {
 800502c:	e7e1      	b.n	8004ff2 <_ZN8tkrandom10RngHandler10SetLeds123Ev+0x14>
  }

  return return_value;
 800502e:	697b      	ldr	r3, [r7, #20]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <_ZN8tkrandom10RngHandler10SetOutput4Ev>:
//------------------------------------------------------------------------------
TransmitterStatus RngHandler::SetOutput4(void) {
 8005038:	b590      	push	{r4, r7, lr}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  return transmitter_.SetVoltage(Output::kOutput4,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685c      	ldr	r4, [r3, #4]
 8005044:	2103      	movs	r1, #3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f88c 	bl	8005164 <_ZN8tkrandom10RngHandler15GetRandomNumberENS_6OutputE>
 800504c:	4603      	mov	r3, r0
 800504e:	461a      	mov	r2, r3
 8005050:	2103      	movs	r1, #3
 8005052:	4620      	mov	r0, r4
 8005054:	f000 f91d 	bl	8005292 <_ZNK8tkrandom11Transmitter10SetVoltageENS_6OutputEt>
 8005058:	4603      	mov	r3, r0
                                 GetRandomNumber(Output::kOutput4));
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	bd90      	pop	{r4, r7, pc}

08005062 <_ZN8tkrandom10RngHandler7SetLed4Ev>:
//------------------------------------------------------------------------------
TransmitterStatus RngHandler::SetLed4(void) {
 8005062:	b590      	push	{r4, r7, lr}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  return transmitter_.SetLedBrightness(Led::kLed4,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685c      	ldr	r4, [r3, #4]
 800506e:	2103      	movs	r1, #3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f877 	bl	8005164 <_ZN8tkrandom10RngHandler15GetRandomNumberENS_6OutputE>
 8005076:	4603      	mov	r3, r0
 8005078:	461a      	mov	r2, r3
 800507a:	2107      	movs	r1, #7
 800507c:	4620      	mov	r0, r4
 800507e:	f000 f91f 	bl	80052c0 <_ZNK8tkrandom11Transmitter16SetLedBrightnessENS_3LedEt>
 8005082:	4603      	mov	r3, r0
                                       GetRandomNumber(Output::kOutput4));
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	bd90      	pop	{r4, r7, pc}

0800508c <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb>:
//------------------------------------------------------------------------------
void RngHandler::RollbackBufferIndexes(const bool is_gate_1,
                                       const bool is_gate_2) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
 8005098:	4613      	mov	r3, r2
 800509a:	70bb      	strb	r3, [r7, #2]
  if (is_gate_1) {
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01c      	beq.n	80050dc <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb+0x50>
    uint8_t output = static_cast<uint8_t>(Output::kOutput1);
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
    while (output <= static_cast<uint8_t>(Output::kOutput3)) {
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d817      	bhi.n	80050dc <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb+0x50>
      const Distribution distribution =
          GetDistribution(static_cast<Output>(output));
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f829 	bl	8005108 <_ZNK8tkrandom10RngHandler15GetDistributionENS_6OutputE>
 80050b6:	60b8      	str	r0, [r7, #8]
      if (distribution == Distribution::kNormal) {
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d105      	bne.n	80050ca <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb+0x3e>
        index_normal_++;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	61da      	str	r2, [r3, #28]
 80050c8:	e004      	b.n	80050d4 <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb+0x48>
      }
      else {
        index_uniform_++;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	619a      	str	r2, [r3, #24]
      }
      output++;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	3301      	adds	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
    while (output <= static_cast<uint8_t>(Output::kOutput3)) {
 80050da:	e7e4      	b.n	80050a6 <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb+0x1a>
    }
  }
  if (is_gate_2) {
 80050dc:	78bb      	ldrb	r3, [r7, #2]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00e      	beq.n	8005100 <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb+0x74>
    if (distribution_4_ == Distribution::kNormal) {
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d105      	bne.n	80050f6 <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb+0x6a>
      index_normal_++;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	61da      	str	r2, [r3, #28]
    }
    else {
      index_uniform_++;
    }
  }
}
 80050f4:	e004      	b.n	8005100 <_ZN8tkrandom10RngHandler21RollbackBufferIndexesEbb+0x74>
      index_uniform_++;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	619a      	str	r2, [r3, #24]
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <_ZNK8tkrandom10RngHandler15GetDistributionENS_6OutputE>:
//------------------------------------------------------------------------------
Distribution RngHandler::GetDistribution(const Output output) const {
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  Distribution return_value = Distribution::kUniform;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b03      	cmp	r3, #3
 800511a:	d81b      	bhi.n	8005154 <_ZNK8tkrandom10RngHandler15GetDistributionENS_6OutputE+0x4c>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <_ZNK8tkrandom10RngHandler15GetDistributionENS_6OutputE+0x1c>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005135 	.word	0x08005135
 8005128:	0800513d 	.word	0x0800513d
 800512c:	08005145 	.word	0x08005145
 8005130:	0800514d 	.word	0x0800514d

  switch (output) {
    case Output::kOutput1:
      return_value = distribution_1_;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60fb      	str	r3, [r7, #12]
      break;
 800513a:	e00c      	b.n	8005156 <_ZNK8tkrandom10RngHandler15GetDistributionENS_6OutputE+0x4e>
    case Output::kOutput2:
      return_value = distribution_2_;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	60fb      	str	r3, [r7, #12]
      break;
 8005142:	e008      	b.n	8005156 <_ZNK8tkrandom10RngHandler15GetDistributionENS_6OutputE+0x4e>
    case Output::kOutput3:
      return_value = distribution_3_;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	60fb      	str	r3, [r7, #12]
      break;
 800514a:	e004      	b.n	8005156 <_ZNK8tkrandom10RngHandler15GetDistributionENS_6OutputE+0x4e>
    case Output::kOutput4:
      return_value = distribution_4_;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	60fb      	str	r3, [r7, #12]
      break;
 8005152:	e000      	b.n	8005156 <_ZNK8tkrandom10RngHandler15GetDistributionENS_6OutputE+0x4e>
    default:
      break;
 8005154:	bf00      	nop
  }

  return return_value;
 8005156:	68fb      	ldr	r3, [r7, #12]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <_ZN8tkrandom10RngHandler15GetRandomNumberENS_6OutputE>:
//------------------------------------------------------------------------------
uint16_t RngHandler::GetRandomNumber(const Output output) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint16_t return_value = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	81fb      	strh	r3, [r7, #14]

  if (GetDistribution(output) == Distribution::kNormal) {
 8005172:	6839      	ldr	r1, [r7, #0]
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ffc7 	bl	8005108 <_ZNK8tkrandom10RngHandler15GetDistributionENS_6OutputE>
 800517a:	4603      	mov	r3, r0
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <_ZN8tkrandom10RngHandler15GetRandomNumberENS_6OutputE+0x42>
    return_value = buffer_normal_[(index_normal_ - 1U)];
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	1e5a      	subs	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3214      	adds	r2, #20
 8005194:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005198:	81fb      	strh	r3, [r7, #14]
    index_normal_--;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	1e5a      	subs	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	61da      	str	r2, [r3, #28]
 80051a4:	e00c      	b.n	80051c0 <_ZN8tkrandom10RngHandler15GetRandomNumberENS_6OutputE+0x5c>
  }
  else {
    return_value = buffer_uniform_[(index_uniform_ - 1U)];
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	1e5a      	subs	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3210      	adds	r2, #16
 80051b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80051b4:	81fb      	strh	r3, [r7, #14]
    index_uniform_--;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	619a      	str	r2, [r3, #24]
  }

  return return_value;
 80051c0:	89fb      	ldrh	r3, [r7, #14]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <_ZN8tkrandom10RngHandler11ProcessTickEv>:
//------------------------------------------------------------------------------
void RngHandler::ProcessTick() {
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  generator_.ResetRng();
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fd26 	bl	8004c28 <_ZN8tkrandom9Generator8ResetRngEv>
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <_ZN8tkrandom11TransmitterC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS4_t>:

// MICS ------------------------------------------------------------------------
namespace tkrandom {

// MEMBER FUNCTIONS ------------------------------------------------------------
Transmitter::Transmitter(SPI_HandleTypeDef* const spi_handle,
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	807b      	strh	r3, [r7, #2]
      kWriteCommand_(0x30U),
      gpio_port_nss_(gpio_port_nss),
      gpio_port_dac_(gpio_port_dac),
      kPinNss_(pin_nss),
      kPinDac_(pin_dac),
      kLedOffValue_(27500U) {
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2230      	movs	r2, #48	; 0x30
 8005204:	721a      	strb	r2, [r3, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	60da      	str	r2, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	611a      	str	r2, [r3, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	829a      	strh	r2, [r3, #20]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8bba      	ldrh	r2, [r7, #28]
 800521c:	82da      	strh	r2, [r3, #22]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f646 326c 	movw	r2, #27500	; 0x6b6c
 8005224:	831a      	strh	r2, [r3, #24]
  HAL_GPIO_WritePin(gpio_port_nss_, kPinNss_, GPIO_PIN_SET);  // SPI NSS line
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68d8      	ldr	r0, [r3, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8a9b      	ldrh	r3, [r3, #20]
 800522e:	2201      	movs	r2, #1
 8005230:	4619      	mov	r1, r3
 8005232:	f7fd fabb 	bl	80027ac <HAL_GPIO_WritePin>
}
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_ZN8tkrandom11Transmitter4InitEv>:
//------------------------------------------------------------------------------
void Transmitter::Init() {
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(gpio_port_dac_,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6918      	ldr	r0, [r3, #16]
                    kPinDac_,
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8adb      	ldrh	r3, [r3, #22]
  HAL_GPIO_WritePin(gpio_port_dac_,
 8005250:	2200      	movs	r2, #0
 8005252:	4619      	mov	r1, r3
 8005254:	f7fd faaa 	bl	80027ac <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);
  for (volatile uint8_t i = 0U; i < 50U; ++i) {
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b31      	cmp	r3, #49	; 0x31
 8005262:	bf94      	ite	ls
 8005264:	2301      	movls	r3, #1
 8005266:	2300      	movhi	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <_ZN8tkrandom11Transmitter4InitEv+0x3a>
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	3301      	adds	r3, #1
 8005274:	b2db      	uxtb	r3, r3
 8005276:	73fb      	strb	r3, [r7, #15]
 8005278:	e7f0      	b.n	800525c <_ZN8tkrandom11Transmitter4InitEv+0x1c>
    // just waits a short moment
  }
  // gets DAC out of reset
  HAL_GPIO_WritePin(gpio_port_dac_,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6918      	ldr	r0, [r3, #16]
                    kPinDac_,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8adb      	ldrh	r3, [r3, #22]
  HAL_GPIO_WritePin(gpio_port_dac_,
 8005282:	2201      	movs	r2, #1
 8005284:	4619      	mov	r1, r3
 8005286:	f7fd fa91 	bl	80027ac <HAL_GPIO_WritePin>
                    GPIO_PIN_SET);
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <_ZNK8tkrandom11Transmitter10SetVoltageENS_6OutputEt>:
//------------------------------------------------------------------------------
TransmitterStatus Transmitter::SetVoltage(const Output output,
                                          const uint16_t value) const {
 8005292:	b580      	push	{r7, lr}
 8005294:	b086      	sub	sp, #24
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	4613      	mov	r3, r2
 800529e:	80fb      	strh	r3, [r7, #6]
  const uint8_t address = static_cast<uint8_t>(output);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	75fb      	strb	r3, [r7, #23]
  return TransmitValue(address, value);
 80052a4:	88fa      	ldrh	r2, [r7, #6]
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
 80052a8:	4619      	mov	r1, r3
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f84c 	bl	8005348 <_ZNK8tkrandom11Transmitter13TransmitValueEht>
 80052b0:	4603      	mov	r3, r0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	0000      	movs	r0, r0
 80052bc:	0000      	movs	r0, r0
	...

080052c0 <_ZNK8tkrandom11Transmitter16SetLedBrightnessENS_3LedEt>:
//------------------------------------------------------------------------------
TransmitterStatus Transmitter::SetLedBrightness(const Led led,
                                                const uint16_t value) const {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08e      	sub	sp, #56	; 0x38
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t address = static_cast<uint8_t>(led);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  // considers that a minimum voltage is required to let an LED illuminate
  const double value_ratio =
      static_cast<double>(value) / static_cast<double>(0xffffU);
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fb f8c6 	bl	8000468 <__aeabi_ui2d>
  const double value_ratio =
 80052dc:	a318      	add	r3, pc, #96	; (adr r3, 8005340 <_ZNK8tkrandom11Transmitter16SetLedBrightnessENS_3LedEt+0x80>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fb fa65 	bl	80007b0 <__aeabi_ddiv>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  const uint16_t range = 0xffffU - kLedOffValue_;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8b1b      	ldrh	r3, [r3, #24]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  const double range_part = value_ratio * static_cast<double>(range);
 80052f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7fb f8b5 	bl	8000468 <__aeabi_ui2d>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005306:	f7fb f929 	bl	800055c <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const uint16_t new_value = static_cast<uint16_t>(range_part) + kLedOffValue_;
 8005312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005316:	f7fb fb33 	bl	8000980 <__aeabi_d2uiz>
 800531a:	4603      	mov	r3, r0
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8b1b      	ldrh	r3, [r3, #24]
 8005322:	4413      	add	r3, r2
 8005324:	82fb      	strh	r3, [r7, #22]

  return TransmitValue(address, new_value);
 8005326:	8afa      	ldrh	r2, [r7, #22]
 8005328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800532c:	4619      	mov	r1, r3
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f80a 	bl	8005348 <_ZNK8tkrandom11Transmitter13TransmitValueEht>
 8005334:	4603      	mov	r3, r0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3738      	adds	r7, #56	; 0x38
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	00000000 	.word	0x00000000
 8005344:	40efffe0 	.word	0x40efffe0

08005348 <_ZNK8tkrandom11Transmitter13TransmitValueEht>:
//------------------------------------------------------------------------------
TransmitterStatus Transmitter::TransmitValue(const uint8_t address,
                                             const uint16_t value) const {
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
 8005354:	4613      	mov	r3, r2
 8005356:	803b      	strh	r3, [r7, #0]
  TransmitterStatus return_value = TransmitterStatus::kError;
 8005358:	2301      	movs	r3, #1
 800535a:	617b      	str	r3, [r7, #20]

  const uint8_t first_byte = kWriteCommand_ + address;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	7a1a      	ldrb	r2, [r3, #8]
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	4413      	add	r3, r2
 8005364:	74fb      	strb	r3, [r7, #19]
  const uint8_t second_byte = static_cast<uint8_t>(value >> 8U);
 8005366:	883b      	ldrh	r3, [r7, #0]
 8005368:	121b      	asrs	r3, r3, #8
 800536a:	74bb      	strb	r3, [r7, #18]
  const uint8_t third_byte = static_cast<uint8_t>(value);
 800536c:	883b      	ldrh	r3, [r7, #0]
 800536e:	747b      	strb	r3, [r7, #17]
  uint8_t data[3U] = {first_byte, second_byte, third_byte};
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	733b      	strb	r3, [r7, #12]
 8005374:	7cbb      	ldrb	r3, [r7, #18]
 8005376:	737b      	strb	r3, [r7, #13]
 8005378:	7c7b      	ldrb	r3, [r7, #17]
 800537a:	73bb      	strb	r3, [r7, #14]
  HAL_GPIO_WritePin(gpio_port_nss_, kPinNss_, GPIO_PIN_RESET);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68d8      	ldr	r0, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8a9b      	ldrh	r3, [r3, #20]
 8005384:	2200      	movs	r2, #0
 8005386:	4619      	mov	r1, r3
 8005388:	f7fd fa10 	bl	80027ac <HAL_GPIO_WritePin>
  const HAL_StatusTypeDef hal_status =
      HAL_SPI_Transmit(spi_handle_, data, 3U, kTimeout_);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f107 010c 	add.w	r1, r7, #12
 8005398:	2203      	movs	r2, #3
 800539a:	f7fe fbe2 	bl	8003b62 <HAL_SPI_Transmit>
 800539e:	4603      	mov	r3, r0
 80053a0:	743b      	strb	r3, [r7, #16]
  HAL_GPIO_WritePin(gpio_port_nss_, kPinNss_, GPIO_PIN_SET);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68d8      	ldr	r0, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	8a9b      	ldrh	r3, [r3, #20]
 80053aa:	2201      	movs	r2, #1
 80053ac:	4619      	mov	r1, r3
 80053ae:	f7fd f9fd 	bl	80027ac <HAL_GPIO_WritePin>

  if (hal_status == HAL_OK) {
 80053b2:	7c3b      	ldrb	r3, [r7, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <_ZNK8tkrandom11Transmitter13TransmitValueEht+0x74>
    return_value = TransmitterStatus::kSuccess;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
  }

  return return_value;
 80053bc:	697b      	ldr	r3, [r7, #20]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <_ZdlPvj>:
 80053c6:	f000 bc7d 	b.w	8005cc4 <_ZdlPv>

080053ca <__cxa_end_cleanup>:
 80053ca:	b41e      	push	{r1, r2, r3, r4}
 80053cc:	f000 f89b 	bl	8005506 <__gnu_end_cleanup>
 80053d0:	bc1e      	pop	{r1, r2, r3, r4}
 80053d2:	f7fc f85f 	bl	8001494 <_Unwind_Resume>

080053d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80053d6:	7803      	ldrb	r3, [r0, #0]
 80053d8:	2b47      	cmp	r3, #71	; 0x47
 80053da:	d117      	bne.n	800540c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053dc:	7843      	ldrb	r3, [r0, #1]
 80053de:	2b4e      	cmp	r3, #78	; 0x4e
 80053e0:	d114      	bne.n	800540c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053e2:	7883      	ldrb	r3, [r0, #2]
 80053e4:	2b55      	cmp	r3, #85	; 0x55
 80053e6:	d111      	bne.n	800540c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053e8:	78c3      	ldrb	r3, [r0, #3]
 80053ea:	2b43      	cmp	r3, #67	; 0x43
 80053ec:	d10e      	bne.n	800540c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053ee:	7903      	ldrb	r3, [r0, #4]
 80053f0:	2b43      	cmp	r3, #67	; 0x43
 80053f2:	d10b      	bne.n	800540c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053f4:	7943      	ldrb	r3, [r0, #5]
 80053f6:	2b2b      	cmp	r3, #43	; 0x2b
 80053f8:	d108      	bne.n	800540c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053fa:	7983      	ldrb	r3, [r0, #6]
 80053fc:	2b2b      	cmp	r3, #43	; 0x2b
 80053fe:	d105      	bne.n	800540c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005400:	79c0      	ldrb	r0, [r0, #7]
 8005402:	2801      	cmp	r0, #1
 8005404:	bf8c      	ite	hi
 8005406:	2000      	movhi	r0, #0
 8005408:	2001      	movls	r0, #1
 800540a:	4770      	bx	lr
 800540c:	2000      	movs	r0, #0
 800540e:	4770      	bx	lr

08005410 <__cxa_type_match>:
 8005410:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005414:	461d      	mov	r5, r3
 8005416:	7803      	ldrb	r3, [r0, #0]
 8005418:	2b47      	cmp	r3, #71	; 0x47
 800541a:	460e      	mov	r6, r1
 800541c:	4602      	mov	r2, r0
 800541e:	79c1      	ldrb	r1, [r0, #7]
 8005420:	d113      	bne.n	800544a <__cxa_type_match+0x3a>
 8005422:	7843      	ldrb	r3, [r0, #1]
 8005424:	2b4e      	cmp	r3, #78	; 0x4e
 8005426:	d110      	bne.n	800544a <__cxa_type_match+0x3a>
 8005428:	7883      	ldrb	r3, [r0, #2]
 800542a:	2b55      	cmp	r3, #85	; 0x55
 800542c:	d10d      	bne.n	800544a <__cxa_type_match+0x3a>
 800542e:	78c3      	ldrb	r3, [r0, #3]
 8005430:	2b43      	cmp	r3, #67	; 0x43
 8005432:	d10a      	bne.n	800544a <__cxa_type_match+0x3a>
 8005434:	7903      	ldrb	r3, [r0, #4]
 8005436:	2b46      	cmp	r3, #70	; 0x46
 8005438:	d107      	bne.n	800544a <__cxa_type_match+0x3a>
 800543a:	7943      	ldrb	r3, [r0, #5]
 800543c:	2b4f      	cmp	r3, #79	; 0x4f
 800543e:	d104      	bne.n	800544a <__cxa_type_match+0x3a>
 8005440:	7983      	ldrb	r3, [r0, #6]
 8005442:	2b52      	cmp	r3, #82	; 0x52
 8005444:	d101      	bne.n	800544a <__cxa_type_match+0x3a>
 8005446:	2900      	cmp	r1, #0
 8005448:	d031      	beq.n	80054ae <__cxa_type_match+0x9e>
 800544a:	4610      	mov	r0, r2
 800544c:	f7ff ffc3 	bl	80053d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005450:	f080 0001 	eor.w	r0, r0, #1
 8005454:	b2c0      	uxtb	r0, r0
 8005456:	2300      	movs	r3, #0
 8005458:	2400      	movs	r4, #0
 800545a:	9401      	str	r4, [sp, #4]
 800545c:	bb53      	cbnz	r3, 80054b4 <__cxa_type_match+0xa4>
 800545e:	bb58      	cbnz	r0, 80054b8 <__cxa_type_match+0xa8>
 8005460:	2901      	cmp	r1, #1
 8005462:	bf0a      	itet	eq
 8005464:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005468:	f1a2 0320 	subne.w	r3, r2, #32
 800546c:	3b78      	subeq	r3, #120	; 0x78
 800546e:	2901      	cmp	r1, #1
 8005470:	bf08      	it	eq
 8005472:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005476:	681c      	ldr	r4, [r3, #0]
 8005478:	bf18      	it	ne
 800547a:	3258      	addne	r2, #88	; 0x58
 800547c:	9201      	str	r2, [sp, #4]
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	4620      	mov	r0, r4
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4798      	blx	r3
 8005486:	b1c8      	cbz	r0, 80054bc <__cxa_type_match+0xac>
 8005488:	9b01      	ldr	r3, [sp, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	2702      	movs	r7, #2
 8005490:	6833      	ldr	r3, [r6, #0]
 8005492:	aa01      	add	r2, sp, #4
 8005494:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005498:	4621      	mov	r1, r4
 800549a:	2301      	movs	r3, #1
 800549c:	4630      	mov	r0, r6
 800549e:	47c0      	blx	r8
 80054a0:	b170      	cbz	r0, 80054c0 <__cxa_type_match+0xb0>
 80054a2:	9b01      	ldr	r3, [sp, #4]
 80054a4:	602b      	str	r3, [r5, #0]
 80054a6:	4638      	mov	r0, r7
 80054a8:	b002      	add	sp, #8
 80054aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ae:	2301      	movs	r3, #1
 80054b0:	4608      	mov	r0, r1
 80054b2:	e7d1      	b.n	8005458 <__cxa_type_match+0x48>
 80054b4:	4c03      	ldr	r4, [pc, #12]	; (80054c4 <__cxa_type_match+0xb4>)
 80054b6:	e7e2      	b.n	800547e <__cxa_type_match+0x6e>
 80054b8:	4c03      	ldr	r4, [pc, #12]	; (80054c8 <__cxa_type_match+0xb8>)
 80054ba:	e7e0      	b.n	800547e <__cxa_type_match+0x6e>
 80054bc:	2701      	movs	r7, #1
 80054be:	e7e7      	b.n	8005490 <__cxa_type_match+0x80>
 80054c0:	4607      	mov	r7, r0
 80054c2:	e7f0      	b.n	80054a6 <__cxa_type_match+0x96>
 80054c4:	08006110 	.word	0x08006110
 80054c8:	08006118 	.word	0x08006118

080054cc <__cxa_begin_cleanup>:
 80054cc:	b510      	push	{r4, lr}
 80054ce:	4604      	mov	r4, r0
 80054d0:	f000 f832 	bl	8005538 <__cxa_get_globals>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4620      	mov	r0, r4
 80054d8:	f1a4 0120 	sub.w	r1, r4, #32
 80054dc:	f7ff ff7b 	bl	80053d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80054e0:	b160      	cbz	r0, 80054fc <__cxa_begin_cleanup+0x30>
 80054e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80054e6:	3301      	adds	r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80054ee:	d103      	bne.n	80054f8 <__cxa_begin_cleanup+0x2c>
 80054f0:	6893      	ldr	r3, [r2, #8]
 80054f2:	f844 3c08 	str.w	r3, [r4, #-8]
 80054f6:	6091      	str	r1, [r2, #8]
 80054f8:	2001      	movs	r0, #1
 80054fa:	bd10      	pop	{r4, pc}
 80054fc:	6893      	ldr	r3, [r2, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f9      	beq.n	80054f6 <__cxa_begin_cleanup+0x2a>
 8005502:	f000 faab 	bl	8005a5c <_ZSt9terminatev>

08005506 <__gnu_end_cleanup>:
 8005506:	b510      	push	{r4, lr}
 8005508:	f000 f816 	bl	8005538 <__cxa_get_globals>
 800550c:	6882      	ldr	r2, [r0, #8]
 800550e:	4601      	mov	r1, r0
 8005510:	b90a      	cbnz	r2, 8005516 <__gnu_end_cleanup+0x10>
 8005512:	f000 faa3 	bl	8005a5c <_ZSt9terminatev>
 8005516:	f102 0420 	add.w	r4, r2, #32
 800551a:	4620      	mov	r0, r4
 800551c:	f7ff ff5b 	bl	80053d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005520:	b140      	cbz	r0, 8005534 <__gnu_end_cleanup+0x2e>
 8005522:	69d3      	ldr	r3, [r2, #28]
 8005524:	3b01      	subs	r3, #1
 8005526:	61d3      	str	r3, [r2, #28]
 8005528:	b913      	cbnz	r3, 8005530 <__gnu_end_cleanup+0x2a>
 800552a:	6990      	ldr	r0, [r2, #24]
 800552c:	6088      	str	r0, [r1, #8]
 800552e:	6193      	str	r3, [r2, #24]
 8005530:	4620      	mov	r0, r4
 8005532:	bd10      	pop	{r4, pc}
 8005534:	6088      	str	r0, [r1, #8]
 8005536:	e7fb      	b.n	8005530 <__gnu_end_cleanup+0x2a>

08005538 <__cxa_get_globals>:
 8005538:	4800      	ldr	r0, [pc, #0]	; (800553c <__cxa_get_globals+0x4>)
 800553a:	4770      	bx	lr
 800553c:	2000015c 	.word	0x2000015c

08005540 <_ZL12read_uleb128PKhPm>:
 8005540:	b530      	push	{r4, r5, lr}
 8005542:	2300      	movs	r3, #0
 8005544:	461a      	mov	r2, r3
 8005546:	f810 5b01 	ldrb.w	r5, [r0], #1
 800554a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 800554e:	4094      	lsls	r4, r2
 8005550:	4323      	orrs	r3, r4
 8005552:	062c      	lsls	r4, r5, #24
 8005554:	f102 0207 	add.w	r2, r2, #7
 8005558:	d4f5      	bmi.n	8005546 <_ZL12read_uleb128PKhPm+0x6>
 800555a:	600b      	str	r3, [r1, #0]
 800555c:	bd30      	pop	{r4, r5, pc}

0800555e <_ZL12read_sleb128PKhPl>:
 800555e:	b530      	push	{r4, r5, lr}
 8005560:	2300      	movs	r3, #0
 8005562:	461a      	mov	r2, r3
 8005564:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005568:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800556c:	4095      	lsls	r5, r2
 800556e:	432b      	orrs	r3, r5
 8005570:	0625      	lsls	r5, r4, #24
 8005572:	f102 0207 	add.w	r2, r2, #7
 8005576:	d4f5      	bmi.n	8005564 <_ZL12read_sleb128PKhPl+0x6>
 8005578:	2a1f      	cmp	r2, #31
 800557a:	d806      	bhi.n	800558a <_ZL12read_sleb128PKhPl+0x2c>
 800557c:	0664      	lsls	r4, r4, #25
 800557e:	bf42      	ittt	mi
 8005580:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8005584:	fa04 f202 	lslmi.w	r2, r4, r2
 8005588:	4313      	orrmi	r3, r2
 800558a:	600b      	str	r3, [r1, #0]
 800558c:	bd30      	pop	{r4, r5, pc}

0800558e <_ZL28read_encoded_value_with_basehjPKhPj>:
 800558e:	2850      	cmp	r0, #80	; 0x50
 8005590:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005594:	4606      	mov	r6, r0
 8005596:	4688      	mov	r8, r1
 8005598:	4615      	mov	r5, r2
 800559a:	461f      	mov	r7, r3
 800559c:	d108      	bne.n	80055b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 800559e:	3203      	adds	r2, #3
 80055a0:	f022 0003 	bic.w	r0, r2, #3
 80055a4:	f850 4b04 	ldr.w	r4, [r0], #4
 80055a8:	603c      	str	r4, [r7, #0]
 80055aa:	b002      	add	sp, #8
 80055ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b0:	f000 030f 	and.w	r3, r0, #15
 80055b4:	2b0c      	cmp	r3, #12
 80055b6:	d82e      	bhi.n	8005616 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 80055b8:	e8df f003 	tbb	[pc, r3]
 80055bc:	251d0725 	.word	0x251d0725
 80055c0:	2d2d2d29 	.word	0x2d2d2d29
 80055c4:	2521182d 	.word	0x2521182d
 80055c8:	29          	.byte	0x29
 80055c9:	00          	.byte	0x00
 80055ca:	a901      	add	r1, sp, #4
 80055cc:	4628      	mov	r0, r5
 80055ce:	f7ff ffb7 	bl	8005540 <_ZL12read_uleb128PKhPm>
 80055d2:	9c01      	ldr	r4, [sp, #4]
 80055d4:	2c00      	cmp	r4, #0
 80055d6:	d0e7      	beq.n	80055a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80055d8:	f006 0370 	and.w	r3, r6, #112	; 0x70
 80055dc:	2b10      	cmp	r3, #16
 80055de:	bf08      	it	eq
 80055e0:	46a8      	moveq	r8, r5
 80055e2:	4444      	add	r4, r8
 80055e4:	0633      	lsls	r3, r6, #24
 80055e6:	bf48      	it	mi
 80055e8:	6824      	ldrmi	r4, [r4, #0]
 80055ea:	e7dd      	b.n	80055a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80055ec:	a901      	add	r1, sp, #4
 80055ee:	4628      	mov	r0, r5
 80055f0:	f7ff ffb5 	bl	800555e <_ZL12read_sleb128PKhPl>
 80055f4:	e7ed      	b.n	80055d2 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 80055f6:	4628      	mov	r0, r5
 80055f8:	f830 4b02 	ldrh.w	r4, [r0], #2
 80055fc:	e7ea      	b.n	80055d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80055fe:	4628      	mov	r0, r5
 8005600:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8005604:	e7e6      	b.n	80055d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005606:	4628      	mov	r0, r5
 8005608:	f850 4b04 	ldr.w	r4, [r0], #4
 800560c:	e7e2      	b.n	80055d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800560e:	4628      	mov	r0, r5
 8005610:	f850 4b08 	ldr.w	r4, [r0], #8
 8005614:	e7de      	b.n	80055d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005616:	f000 fbe5 	bl	8005de4 <abort>

0800561a <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800561a:	b508      	push	{r3, lr}
 800561c:	4603      	mov	r3, r0
 800561e:	2bff      	cmp	r3, #255	; 0xff
 8005620:	4608      	mov	r0, r1
 8005622:	d010      	beq.n	8005646 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8005624:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005628:	2a30      	cmp	r2, #48	; 0x30
 800562a:	d012      	beq.n	8005652 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800562c:	d807      	bhi.n	800563e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800562e:	2a20      	cmp	r2, #32
 8005630:	d00b      	beq.n	800564a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8005632:	d802      	bhi.n	800563a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005634:	f013 0f60 	tst.w	r3, #96	; 0x60
 8005638:	d005      	beq.n	8005646 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800563a:	f000 fbd3 	bl	8005de4 <abort>
 800563e:	2a40      	cmp	r2, #64	; 0x40
 8005640:	d00b      	beq.n	800565a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8005642:	2a50      	cmp	r2, #80	; 0x50
 8005644:	d1f9      	bne.n	800563a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005646:	2000      	movs	r0, #0
 8005648:	bd08      	pop	{r3, pc}
 800564a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800564e:	f000 bd22 	b.w	8006096 <_Unwind_GetTextRelBase>
 8005652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005656:	f000 bd1b 	b.w	8006090 <_Unwind_GetDataRelBase>
 800565a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800565e:	f7fc b8f1 	b.w	8001844 <_Unwind_GetRegionStart>

08005662 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8005662:	b513      	push	{r0, r1, r4, lr}
 8005664:	460c      	mov	r4, r1
 8005666:	4601      	mov	r1, r0
 8005668:	4620      	mov	r0, r4
 800566a:	e9cd 3200 	strd	r3, r2, [sp]
 800566e:	f7ff ffd4 	bl	800561a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005672:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005676:	4601      	mov	r1, r0
 8005678:	4620      	mov	r0, r4
 800567a:	b002      	add	sp, #8
 800567c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005680:	f7ff bf85 	b.w	800558e <_ZL28read_encoded_value_with_basehjPKhPj>

08005684 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8005684:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005686:	460c      	mov	r4, r1
 8005688:	4615      	mov	r5, r2
 800568a:	4606      	mov	r6, r0
 800568c:	b328      	cbz	r0, 80056da <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800568e:	f7fc f8d9 	bl	8001844 <_Unwind_GetRegionStart>
 8005692:	4603      	mov	r3, r0
 8005694:	4620      	mov	r0, r4
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	f810 1b01 	ldrb.w	r1, [r0], #1
 800569c:	29ff      	cmp	r1, #255	; 0xff
 800569e:	d01e      	beq.n	80056de <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 80056a0:	4602      	mov	r2, r0
 80056a2:	1d2b      	adds	r3, r5, #4
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7ff ffdc 	bl	8005662 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80056aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80056ae:	752b      	strb	r3, [r5, #20]
 80056b0:	2bff      	cmp	r3, #255	; 0xff
 80056b2:	d016      	beq.n	80056e2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 80056b4:	2310      	movs	r3, #16
 80056b6:	752b      	strb	r3, [r5, #20]
 80056b8:	a901      	add	r1, sp, #4
 80056ba:	f7ff ff41 	bl	8005540 <_ZL12read_uleb128PKhPm>
 80056be:	9b01      	ldr	r3, [sp, #4]
 80056c0:	4403      	add	r3, r0
 80056c2:	60eb      	str	r3, [r5, #12]
 80056c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80056c8:	756b      	strb	r3, [r5, #21]
 80056ca:	a901      	add	r1, sp, #4
 80056cc:	f7ff ff38 	bl	8005540 <_ZL12read_uleb128PKhPm>
 80056d0:	9b01      	ldr	r3, [sp, #4]
 80056d2:	4403      	add	r3, r0
 80056d4:	612b      	str	r3, [r5, #16]
 80056d6:	b002      	add	sp, #8
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
 80056da:	4603      	mov	r3, r0
 80056dc:	e7da      	b.n	8005694 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 80056de:	606b      	str	r3, [r5, #4]
 80056e0:	e7e3      	b.n	80056aa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 80056e2:	2300      	movs	r3, #0
 80056e4:	e7ed      	b.n	80056c2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

080056e6 <_Unwind_GetGR>:
 80056e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056e8:	ab03      	add	r3, sp, #12
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	2300      	movs	r3, #0
 80056ee:	460a      	mov	r2, r1
 80056f0:	4619      	mov	r1, r3
 80056f2:	f7fb fb27 	bl	8000d44 <_Unwind_VRS_Get>
 80056f6:	9803      	ldr	r0, [sp, #12]
 80056f8:	b005      	add	sp, #20
 80056fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005700 <__gxx_personality_v0>:
 8005700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	b091      	sub	sp, #68	; 0x44
 8005706:	2300      	movs	r3, #0
 8005708:	9305      	str	r3, [sp, #20]
 800570a:	f000 0303 	and.w	r3, r0, #3
 800570e:	2b01      	cmp	r3, #1
 8005710:	4606      	mov	r6, r0
 8005712:	460c      	mov	r4, r1
 8005714:	4617      	mov	r7, r2
 8005716:	d00e      	beq.n	8005736 <__gxx_personality_v0+0x36>
 8005718:	2b02      	cmp	r3, #2
 800571a:	d003      	beq.n	8005724 <__gxx_personality_v0+0x24>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d13b      	bne.n	8005798 <__gxx_personality_v0+0x98>
 8005720:	0701      	lsls	r1, r0, #28
 8005722:	d53b      	bpl.n	800579c <__gxx_personality_v0+0x9c>
 8005724:	4639      	mov	r1, r7
 8005726:	4620      	mov	r0, r4
 8005728:	f7fc f876 	bl	8001818 <__gnu_unwind_frame>
 800572c:	b390      	cbz	r0, 8005794 <__gxx_personality_v0+0x94>
 800572e:	2009      	movs	r0, #9
 8005730:	b011      	add	sp, #68	; 0x44
 8005732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005736:	0702      	lsls	r2, r0, #28
 8005738:	d406      	bmi.n	8005748 <__gxx_personality_v0+0x48>
 800573a:	6a0d      	ldr	r5, [r1, #32]
 800573c:	4638      	mov	r0, r7
 800573e:	210d      	movs	r1, #13
 8005740:	f7ff ffd1 	bl	80056e6 <_Unwind_GetGR>
 8005744:	4285      	cmp	r5, r0
 8005746:	d02b      	beq.n	80057a0 <__gxx_personality_v0+0xa0>
 8005748:	2002      	movs	r0, #2
 800574a:	2300      	movs	r3, #0
 800574c:	f006 0608 	and.w	r6, r6, #8
 8005750:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8005754:	4306      	orrs	r6, r0
 8005756:	f8cd a000 	str.w	sl, [sp]
 800575a:	220c      	movs	r2, #12
 800575c:	4619      	mov	r1, r3
 800575e:	4638      	mov	r0, r7
 8005760:	940a      	str	r4, [sp, #40]	; 0x28
 8005762:	f7fb fb13 	bl	8000d8c <_Unwind_VRS_Set>
 8005766:	2e06      	cmp	r6, #6
 8005768:	d11c      	bne.n	80057a4 <__gxx_personality_v0+0xa4>
 800576a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800576e:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8005772:	f1b8 0f00 	cmp.w	r8, #0
 8005776:	bf0c      	ite	eq
 8005778:	f04f 0b01 	moveq.w	fp, #1
 800577c:	f04f 0b03 	movne.w	fp, #3
 8005780:	f016 0608 	ands.w	r6, r6, #8
 8005784:	f000 810c 	beq.w	80059a0 <__gxx_personality_v0+0x2a0>
 8005788:	f1bb 0f01 	cmp.w	fp, #1
 800578c:	f040 8104 	bne.w	8005998 <__gxx_personality_v0+0x298>
 8005790:	f000 f964 	bl	8005a5c <_ZSt9terminatev>
 8005794:	2008      	movs	r0, #8
 8005796:	e7cb      	b.n	8005730 <__gxx_personality_v0+0x30>
 8005798:	f000 fb24 	bl	8005de4 <abort>
 800579c:	2001      	movs	r0, #1
 800579e:	e7d4      	b.n	800574a <__gxx_personality_v0+0x4a>
 80057a0:	2006      	movs	r0, #6
 80057a2:	e7d2      	b.n	800574a <__gxx_personality_v0+0x4a>
 80057a4:	4638      	mov	r0, r7
 80057a6:	f7fc f853 	bl	8001850 <_Unwind_GetLanguageSpecificData>
 80057aa:	4681      	mov	r9, r0
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d0b9      	beq.n	8005724 <__gxx_personality_v0+0x24>
 80057b0:	4652      	mov	r2, sl
 80057b2:	4601      	mov	r1, r0
 80057b4:	4638      	mov	r0, r7
 80057b6:	f7ff ff65 	bl	8005684 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80057ba:	4639      	mov	r1, r7
 80057bc:	4605      	mov	r5, r0
 80057be:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80057c2:	f7ff ff2a 	bl	800561a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80057c6:	210f      	movs	r1, #15
 80057c8:	900c      	str	r0, [sp, #48]	; 0x30
 80057ca:	4638      	mov	r0, r7
 80057cc:	f7ff ff8b 	bl	80056e6 <_Unwind_GetGR>
 80057d0:	f020 0801 	bic.w	r8, r0, #1
 80057d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80057d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057da:	42ab      	cmp	r3, r5
 80057dc:	f240 80c4 	bls.w	8005968 <__gxx_personality_v0+0x268>
 80057e0:	462a      	mov	r2, r5
 80057e2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80057e6:	ab06      	add	r3, sp, #24
 80057e8:	2000      	movs	r0, #0
 80057ea:	f7ff ff3a 	bl	8005662 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80057ee:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80057f2:	4602      	mov	r2, r0
 80057f4:	ab07      	add	r3, sp, #28
 80057f6:	2000      	movs	r0, #0
 80057f8:	f7ff ff33 	bl	8005662 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80057fc:	ab08      	add	r3, sp, #32
 80057fe:	4602      	mov	r2, r0
 8005800:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005804:	2000      	movs	r0, #0
 8005806:	f7ff ff2c 	bl	8005662 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800580a:	a909      	add	r1, sp, #36	; 0x24
 800580c:	f7ff fe98 	bl	8005540 <_ZL12read_uleb128PKhPm>
 8005810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005812:	9a06      	ldr	r2, [sp, #24]
 8005814:	4413      	add	r3, r2
 8005816:	4543      	cmp	r3, r8
 8005818:	4605      	mov	r5, r0
 800581a:	d901      	bls.n	8005820 <__gxx_personality_v0+0x120>
 800581c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800581e:	e7db      	b.n	80057d8 <__gxx_personality_v0+0xd8>
 8005820:	9a07      	ldr	r2, [sp, #28]
 8005822:	4413      	add	r3, r2
 8005824:	4543      	cmp	r3, r8
 8005826:	d9d7      	bls.n	80057d8 <__gxx_personality_v0+0xd8>
 8005828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800582c:	f1b8 0f00 	cmp.w	r8, #0
 8005830:	d001      	beq.n	8005836 <__gxx_personality_v0+0x136>
 8005832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005834:	4498      	add	r8, r3
 8005836:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005838:	b115      	cbz	r5, 8005840 <__gxx_personality_v0+0x140>
 800583a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800583c:	3d01      	subs	r5, #1
 800583e:	4405      	add	r5, r0
 8005840:	f1b8 0f00 	cmp.w	r8, #0
 8005844:	f43f af6e 	beq.w	8005724 <__gxx_personality_v0+0x24>
 8005848:	2d00      	cmp	r5, #0
 800584a:	f000 80f7 	beq.w	8005a3c <__gxx_personality_v0+0x33c>
 800584e:	f016 0308 	ands.w	r3, r6, #8
 8005852:	9302      	str	r3, [sp, #8]
 8005854:	d034      	beq.n	80058c0 <__gxx_personality_v0+0x1c0>
 8005856:	2347      	movs	r3, #71	; 0x47
 8005858:	7023      	strb	r3, [r4, #0]
 800585a:	234e      	movs	r3, #78	; 0x4e
 800585c:	7063      	strb	r3, [r4, #1]
 800585e:	2355      	movs	r3, #85	; 0x55
 8005860:	70a3      	strb	r3, [r4, #2]
 8005862:	2343      	movs	r3, #67	; 0x43
 8005864:	70e3      	strb	r3, [r4, #3]
 8005866:	2346      	movs	r3, #70	; 0x46
 8005868:	7123      	strb	r3, [r4, #4]
 800586a:	234f      	movs	r3, #79	; 0x4f
 800586c:	7163      	strb	r3, [r4, #5]
 800586e:	2352      	movs	r3, #82	; 0x52
 8005870:	71a3      	strb	r3, [r4, #6]
 8005872:	2300      	movs	r3, #0
 8005874:	71e3      	strb	r3, [r4, #7]
 8005876:	f04f 0b00 	mov.w	fp, #0
 800587a:	a907      	add	r1, sp, #28
 800587c:	4628      	mov	r0, r5
 800587e:	f7ff fe6e 	bl	800555e <_ZL12read_sleb128PKhPl>
 8005882:	a908      	add	r1, sp, #32
 8005884:	9003      	str	r0, [sp, #12]
 8005886:	f7ff fe6a 	bl	800555e <_ZL12read_sleb128PKhPl>
 800588a:	9907      	ldr	r1, [sp, #28]
 800588c:	2900      	cmp	r1, #0
 800588e:	d068      	beq.n	8005962 <__gxx_personality_v0+0x262>
 8005890:	dd3a      	ble.n	8005908 <__gxx_personality_v0+0x208>
 8005892:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005896:	28ff      	cmp	r0, #255	; 0xff
 8005898:	d032      	beq.n	8005900 <__gxx_personality_v0+0x200>
 800589a:	f000 0307 	and.w	r3, r0, #7
 800589e:	2b04      	cmp	r3, #4
 80058a0:	f63f af7a 	bhi.w	8005798 <__gxx_personality_v0+0x98>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <__gxx_personality_v0+0x1ac>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	08005905 	.word	0x08005905
 80058b0:	08005799 	.word	0x08005799
 80058b4:	080058d3 	.word	0x080058d3
 80058b8:	08005905 	.word	0x08005905
 80058bc:	080058fd 	.word	0x080058fd
 80058c0:	79e3      	ldrb	r3, [r4, #7]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	bf0c      	ite	eq
 80058c6:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80058ca:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 80058ce:	9305      	str	r3, [sp, #20]
 80058d0:	e7d1      	b.n	8005876 <__gxx_personality_v0+0x176>
 80058d2:	2502      	movs	r5, #2
 80058d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058d6:	ab09      	add	r3, sp, #36	; 0x24
 80058d8:	fb05 2211 	mls	r2, r5, r1, r2
 80058dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058de:	f7ff fe56 	bl	800558e <_ZL28read_encoded_value_with_basehjPKhPj>
 80058e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058e4:	b131      	cbz	r1, 80058f4 <__gxx_personality_v0+0x1f4>
 80058e6:	b37c      	cbz	r4, 8005948 <__gxx_personality_v0+0x248>
 80058e8:	ab05      	add	r3, sp, #20
 80058ea:	2200      	movs	r2, #0
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7ff fd8f 	bl	8005410 <__cxa_type_match>
 80058f2:	b348      	cbz	r0, 8005948 <__gxx_personality_v0+0x248>
 80058f4:	9d07      	ldr	r5, [sp, #28]
 80058f6:	f04f 0b03 	mov.w	fp, #3
 80058fa:	e039      	b.n	8005970 <__gxx_personality_v0+0x270>
 80058fc:	2508      	movs	r5, #8
 80058fe:	e7e9      	b.n	80058d4 <__gxx_personality_v0+0x1d4>
 8005900:	2500      	movs	r5, #0
 8005902:	e7e7      	b.n	80058d4 <__gxx_personality_v0+0x1d4>
 8005904:	2504      	movs	r5, #4
 8005906:	e7e5      	b.n	80058d4 <__gxx_personality_v0+0x1d4>
 8005908:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 800590c:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8005910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005912:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8005916:	313f      	adds	r1, #63	; 0x3f
 8005918:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 800591c:	b1dc      	cbz	r4, 8005956 <__gxx_personality_v0+0x256>
 800591e:	9a02      	ldr	r2, [sp, #8]
 8005920:	b9ca      	cbnz	r2, 8005956 <__gxx_personality_v0+0x256>
 8005922:	9b05      	ldr	r3, [sp, #20]
 8005924:	9309      	str	r3, [sp, #36]	; 0x24
 8005926:	3d04      	subs	r5, #4
 8005928:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800592c:	b141      	cbz	r1, 8005940 <__gxx_personality_v0+0x240>
 800592e:	ab09      	add	r3, sp, #36	; 0x24
 8005930:	2200      	movs	r2, #0
 8005932:	4429      	add	r1, r5
 8005934:	4620      	mov	r0, r4
 8005936:	f7ff fd6b 	bl	8005410 <__cxa_type_match>
 800593a:	2800      	cmp	r0, #0
 800593c:	d0f4      	beq.n	8005928 <__gxx_personality_v0+0x228>
 800593e:	2101      	movs	r1, #1
 8005940:	f081 0101 	eor.w	r1, r1, #1
 8005944:	2900      	cmp	r1, #0
 8005946:	d1d5      	bne.n	80058f4 <__gxx_personality_v0+0x1f4>
 8005948:	9d08      	ldr	r5, [sp, #32]
 800594a:	2d00      	cmp	r5, #0
 800594c:	d072      	beq.n	8005a34 <__gxx_personality_v0+0x334>
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	442b      	add	r3, r5
 8005952:	461d      	mov	r5, r3
 8005954:	e791      	b.n	800587a <__gxx_personality_v0+0x17a>
 8005956:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800595a:	fab1 f181 	clz	r1, r1
 800595e:	0949      	lsrs	r1, r1, #5
 8005960:	e7f0      	b.n	8005944 <__gxx_personality_v0+0x244>
 8005962:	f04f 0b01 	mov.w	fp, #1
 8005966:	e7ef      	b.n	8005948 <__gxx_personality_v0+0x248>
 8005968:	2500      	movs	r5, #0
 800596a:	46a8      	mov	r8, r5
 800596c:	f04f 0b01 	mov.w	fp, #1
 8005970:	07f3      	lsls	r3, r6, #31
 8005972:	f57f af05 	bpl.w	8005780 <__gxx_personality_v0+0x80>
 8005976:	f1bb 0f02 	cmp.w	fp, #2
 800597a:	f43f aed3 	beq.w	8005724 <__gxx_personality_v0+0x24>
 800597e:	210d      	movs	r1, #13
 8005980:	4638      	mov	r0, r7
 8005982:	9e05      	ldr	r6, [sp, #20]
 8005984:	f7ff feaf 	bl	80056e6 <_Unwind_GetGR>
 8005988:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 800598c:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8005990:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8005994:	2006      	movs	r0, #6
 8005996:	e6cb      	b.n	8005730 <__gxx_personality_v0+0x30>
 8005998:	2d00      	cmp	r5, #0
 800599a:	da22      	bge.n	80059e2 <__gxx_personality_v0+0x2e2>
 800599c:	f000 f870 	bl	8005a80 <_ZSt10unexpectedv>
 80059a0:	f1bb 0f01 	cmp.w	fp, #1
 80059a4:	d102      	bne.n	80059ac <__gxx_personality_v0+0x2ac>
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 f9ab 	bl	8005d02 <__cxa_call_terminate>
 80059ac:	2d00      	cmp	r5, #0
 80059ae:	da18      	bge.n	80059e2 <__gxx_personality_v0+0x2e2>
 80059b0:	4652      	mov	r2, sl
 80059b2:	4649      	mov	r1, r9
 80059b4:	4638      	mov	r0, r7
 80059b6:	f7ff fe65 	bl	8005684 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80059ba:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80059be:	4639      	mov	r1, r7
 80059c0:	f7ff fe2b 	bl	800561a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80059c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059c6:	900c      	str	r0, [sp, #48]	; 0x30
 80059c8:	43eb      	mvns	r3, r5
 80059ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80059ce:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80059d2:	b10a      	cbz	r2, 80059d8 <__gxx_personality_v0+0x2d8>
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7fa      	b.n	80059ce <__gxx_personality_v0+0x2ce>
 80059d8:	2204      	movs	r2, #4
 80059da:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 80059de:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80059e2:	2300      	movs	r3, #0
 80059e4:	ae09      	add	r6, sp, #36	; 0x24
 80059e6:	461a      	mov	r2, r3
 80059e8:	4619      	mov	r1, r3
 80059ea:	9600      	str	r6, [sp, #0]
 80059ec:	4638      	mov	r0, r7
 80059ee:	9409      	str	r4, [sp, #36]	; 0x24
 80059f0:	f7fb f9cc 	bl	8000d8c <_Unwind_VRS_Set>
 80059f4:	2300      	movs	r3, #0
 80059f6:	4619      	mov	r1, r3
 80059f8:	2201      	movs	r2, #1
 80059fa:	9600      	str	r6, [sp, #0]
 80059fc:	4638      	mov	r0, r7
 80059fe:	9509      	str	r5, [sp, #36]	; 0x24
 8005a00:	f7fb f9c4 	bl	8000d8c <_Unwind_VRS_Set>
 8005a04:	210f      	movs	r1, #15
 8005a06:	4638      	mov	r0, r7
 8005a08:	f7ff fe6d 	bl	80056e6 <_Unwind_GetGR>
 8005a0c:	f000 0001 	and.w	r0, r0, #1
 8005a10:	ea40 0008 	orr.w	r0, r0, r8
 8005a14:	2300      	movs	r3, #0
 8005a16:	9009      	str	r0, [sp, #36]	; 0x24
 8005a18:	9600      	str	r6, [sp, #0]
 8005a1a:	220f      	movs	r2, #15
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4638      	mov	r0, r7
 8005a20:	f7fb f9b4 	bl	8000d8c <_Unwind_VRS_Set>
 8005a24:	f1bb 0f02 	cmp.w	fp, #2
 8005a28:	d102      	bne.n	8005a30 <__gxx_personality_v0+0x330>
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f7ff fd4e 	bl	80054cc <__cxa_begin_cleanup>
 8005a30:	2007      	movs	r0, #7
 8005a32:	e67d      	b.n	8005730 <__gxx_personality_v0+0x30>
 8005a34:	f1bb 0f00 	cmp.w	fp, #0
 8005a38:	f43f ae74 	beq.w	8005724 <__gxx_personality_v0+0x24>
 8005a3c:	f04f 0b02 	mov.w	fp, #2
 8005a40:	e796      	b.n	8005970 <__gxx_personality_v0+0x270>
 8005a42:	bf00      	nop

08005a44 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005a44:	b508      	push	{r3, lr}
 8005a46:	4780      	blx	r0
 8005a48:	f000 f9cc 	bl	8005de4 <abort>

08005a4c <_ZSt13get_terminatev>:
 8005a4c:	4b02      	ldr	r3, [pc, #8]	; (8005a58 <_ZSt13get_terminatev+0xc>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	f3bf 8f5b 	dmb	ish
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000010 	.word	0x20000010

08005a5c <_ZSt9terminatev>:
 8005a5c:	b508      	push	{r3, lr}
 8005a5e:	f7ff fff5 	bl	8005a4c <_ZSt13get_terminatev>
 8005a62:	f7ff ffef 	bl	8005a44 <_ZN10__cxxabiv111__terminateEPFvvE>

08005a66 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8005a66:	b508      	push	{r3, lr}
 8005a68:	4780      	blx	r0
 8005a6a:	f7ff fff7 	bl	8005a5c <_ZSt9terminatev>
	...

08005a70 <_ZSt14get_unexpectedv>:
 8005a70:	4b02      	ldr	r3, [pc, #8]	; (8005a7c <_ZSt14get_unexpectedv+0xc>)
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	f3bf 8f5b 	dmb	ish
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	2000000c 	.word	0x2000000c

08005a80 <_ZSt10unexpectedv>:
 8005a80:	b508      	push	{r3, lr}
 8005a82:	f7ff fff5 	bl	8005a70 <_ZSt14get_unexpectedv>
 8005a86:	f7ff ffee 	bl	8005a66 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08005a8a <_Znwj>:
 8005a8a:	2801      	cmp	r0, #1
 8005a8c:	bf38      	it	cc
 8005a8e:	2001      	movcc	r0, #1
 8005a90:	b510      	push	{r4, lr}
 8005a92:	4604      	mov	r4, r0
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 f9d7 	bl	8005e48 <malloc>
 8005a9a:	b930      	cbnz	r0, 8005aaa <_Znwj+0x20>
 8005a9c:	f000 f99a 	bl	8005dd4 <_ZSt15get_new_handlerv>
 8005aa0:	b908      	cbnz	r0, 8005aa6 <_Znwj+0x1c>
 8005aa2:	f000 f99f 	bl	8005de4 <abort>
 8005aa6:	4780      	blx	r0
 8005aa8:	e7f4      	b.n	8005a94 <_Znwj+0xa>
 8005aaa:	bd10      	pop	{r4, pc}

08005aac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005aac:	b510      	push	{r4, lr}
 8005aae:	4b03      	ldr	r3, [pc, #12]	; (8005abc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005ab0:	6003      	str	r3, [r0, #0]
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	f000 f8b2 	bl	8005c1c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005ab8:	4620      	mov	r0, r4
 8005aba:	bd10      	pop	{r4, pc}
 8005abc:	080061a0 	.word	0x080061a0

08005ac0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	f7ff fff2 	bl	8005aac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005ac8:	4620      	mov	r0, r4
 8005aca:	210c      	movs	r1, #12
 8005acc:	f7ff fc7b 	bl	80053c6 <_ZdlPvj>
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	bd10      	pop	{r4, pc}

08005ad4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ad6:	9f08      	ldr	r7, [sp, #32]
 8005ad8:	4297      	cmp	r7, r2
 8005ada:	4605      	mov	r5, r0
 8005adc:	460e      	mov	r6, r1
 8005ade:	4614      	mov	r4, r2
 8005ae0:	d00a      	beq.n	8005af8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8005ae2:	68a8      	ldr	r0, [r5, #8]
 8005ae4:	6802      	ldr	r2, [r0, #0]
 8005ae6:	9708      	str	r7, [sp, #32]
 8005ae8:	6a15      	ldr	r5, [r2, #32]
 8005aea:	4631      	mov	r1, r6
 8005aec:	4622      	mov	r2, r4
 8005aee:	46ac      	mov	ip, r5
 8005af0:	b003      	add	sp, #12
 8005af2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005af6:	4760      	bx	ip
 8005af8:	4619      	mov	r1, r3
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	f000 f858 	bl	8005bb0 <_ZNKSt9type_infoeqERKS_>
 8005b00:	9b01      	ldr	r3, [sp, #4]
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d0ed      	beq.n	8005ae2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8005b06:	2006      	movs	r0, #6
 8005b08:	b003      	add	sp, #12
 8005b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005b0c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	460d      	mov	r5, r1
 8005b12:	4619      	mov	r1, r3
 8005b14:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8005b18:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8005b1c:	4681      	mov	r9, r0
 8005b1e:	4617      	mov	r7, r2
 8005b20:	4698      	mov	r8, r3
 8005b22:	f000 f845 	bl	8005bb0 <_ZNKSt9type_infoeqERKS_>
 8005b26:	b190      	cbz	r0, 8005b4e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	6034      	str	r4, [r6, #0]
 8005b2c:	7137      	strb	r7, [r6, #4]
 8005b2e:	db09      	blt.n	8005b44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8005b30:	1961      	adds	r1, r4, r5
 8005b32:	458a      	cmp	sl, r1
 8005b34:	bf0c      	ite	eq
 8005b36:	2106      	moveq	r1, #6
 8005b38:	2101      	movne	r1, #1
 8005b3a:	71b1      	strb	r1, [r6, #6]
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	b001      	add	sp, #4
 8005b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b44:	3502      	adds	r5, #2
 8005b46:	d1f9      	bne.n	8005b3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	71b3      	strb	r3, [r6, #6]
 8005b4c:	e7f6      	b.n	8005b3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005b4e:	4554      	cmp	r4, sl
 8005b50:	d106      	bne.n	8005b60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005b52:	4659      	mov	r1, fp
 8005b54:	4648      	mov	r0, r9
 8005b56:	f000 f82b 	bl	8005bb0 <_ZNKSt9type_infoeqERKS_>
 8005b5a:	b108      	cbz	r0, 8005b60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005b5c:	7177      	strb	r7, [r6, #5]
 8005b5e:	e7ed      	b.n	8005b3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005b60:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005b64:	6803      	ldr	r3, [r0, #0]
 8005b66:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8005b6a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8005b6e:	69dc      	ldr	r4, [r3, #28]
 8005b70:	463a      	mov	r2, r7
 8005b72:	4643      	mov	r3, r8
 8005b74:	4629      	mov	r1, r5
 8005b76:	46a4      	mov	ip, r4
 8005b78:	b001      	add	sp, #4
 8005b7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7e:	4760      	bx	ip

08005b80 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b84:	4607      	mov	r7, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	4615      	mov	r5, r2
 8005b8a:	461e      	mov	r6, r3
 8005b8c:	f000 f879 	bl	8005c82 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005b90:	b948      	cbnz	r0, 8005ba6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005b92:	68b8      	ldr	r0, [r7, #8]
 8005b94:	6803      	ldr	r3, [r0, #0]
 8005b96:	699f      	ldr	r7, [r3, #24]
 8005b98:	462a      	mov	r2, r5
 8005b9a:	4633      	mov	r3, r6
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	46bc      	mov	ip, r7
 8005ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba4:	4760      	bx	ip
 8005ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005baa <_ZNSt9type_infoD1Ev>:
 8005baa:	4770      	bx	lr

08005bac <_ZNKSt9type_info14__is_pointer_pEv>:
 8005bac:	2000      	movs	r0, #0
 8005bae:	4770      	bx	lr

08005bb0 <_ZNKSt9type_infoeqERKS_>:
 8005bb0:	4281      	cmp	r1, r0
 8005bb2:	b508      	push	{r3, lr}
 8005bb4:	d00e      	beq.n	8005bd4 <_ZNKSt9type_infoeqERKS_+0x24>
 8005bb6:	6840      	ldr	r0, [r0, #4]
 8005bb8:	7803      	ldrb	r3, [r0, #0]
 8005bba:	2b2a      	cmp	r3, #42	; 0x2a
 8005bbc:	d00c      	beq.n	8005bd8 <_ZNKSt9type_infoeqERKS_+0x28>
 8005bbe:	6849      	ldr	r1, [r1, #4]
 8005bc0:	780b      	ldrb	r3, [r1, #0]
 8005bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc4:	bf08      	it	eq
 8005bc6:	3101      	addeq	r1, #1
 8005bc8:	f7fa fb02 	bl	80001d0 <strcmp>
 8005bcc:	fab0 f080 	clz	r0, r0
 8005bd0:	0940      	lsrs	r0, r0, #5
 8005bd2:	bd08      	pop	{r3, pc}
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	e7fc      	b.n	8005bd2 <_ZNKSt9type_infoeqERKS_+0x22>
 8005bd8:	2000      	movs	r0, #0
 8005bda:	e7fa      	b.n	8005bd2 <_ZNKSt9type_infoeqERKS_+0x22>

08005bdc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8005bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005bde:	2400      	movs	r4, #0
 8005be0:	2310      	movs	r3, #16
 8005be2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005be6:	6803      	ldr	r3, [r0, #0]
 8005be8:	9400      	str	r4, [sp, #0]
 8005bea:	699e      	ldr	r6, [r3, #24]
 8005bec:	f88d 4004 	strb.w	r4, [sp, #4]
 8005bf0:	4615      	mov	r5, r2
 8005bf2:	466b      	mov	r3, sp
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	47b0      	blx	r6
 8005bf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005bfc:	f003 0306 	and.w	r3, r3, #6
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	bf03      	ittte	eq
 8005c04:	9b00      	ldreq	r3, [sp, #0]
 8005c06:	602b      	streq	r3, [r5, #0]
 8005c08:	2001      	moveq	r0, #1
 8005c0a:	4620      	movne	r0, r4
 8005c0c:	b004      	add	sp, #16
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}

08005c10 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8005c10:	9800      	ldr	r0, [sp, #0]
 8005c12:	4290      	cmp	r0, r2
 8005c14:	bf14      	ite	ne
 8005c16:	2001      	movne	r0, #1
 8005c18:	2006      	moveq	r0, #6
 8005c1a:	4770      	bx	lr

08005c1c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8005c20:	6003      	str	r3, [r0, #0]
 8005c22:	4604      	mov	r4, r0
 8005c24:	f7ff ffc1 	bl	8005baa <_ZNSt9type_infoD1Ev>
 8005c28:	4620      	mov	r0, r4
 8005c2a:	bd10      	pop	{r4, pc}
 8005c2c:	08006214 	.word	0x08006214

08005c30 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	4604      	mov	r4, r0
 8005c34:	f7ff fff2 	bl	8005c1c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005c38:	4620      	mov	r0, r4
 8005c3a:	2108      	movs	r1, #8
 8005c3c:	f7ff fbc3 	bl	80053c6 <_ZdlPvj>
 8005c40:	4620      	mov	r0, r4
 8005c42:	bd10      	pop	{r4, pc}

08005c44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c48:	461f      	mov	r7, r3
 8005c4a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005c4e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005c52:	4598      	cmp	r8, r3
 8005c54:	4606      	mov	r6, r0
 8005c56:	4615      	mov	r5, r2
 8005c58:	d107      	bne.n	8005c6a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005c5a:	9907      	ldr	r1, [sp, #28]
 8005c5c:	f7ff ffa8 	bl	8005bb0 <_ZNKSt9type_infoeqERKS_>
 8005c60:	b118      	cbz	r0, 8005c6a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005c62:	7165      	strb	r5, [r4, #5]
 8005c64:	2000      	movs	r0, #0
 8005c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f7ff ff9f 	bl	8005bb0 <_ZNKSt9type_infoeqERKS_>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d0f6      	beq.n	8005c64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8005c76:	2301      	movs	r3, #1
 8005c78:	f8c4 8000 	str.w	r8, [r4]
 8005c7c:	7125      	strb	r5, [r4, #4]
 8005c7e:	71a3      	strb	r3, [r4, #6]
 8005c80:	e7f0      	b.n	8005c64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08005c82 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8005c82:	b538      	push	{r3, r4, r5, lr}
 8005c84:	4615      	mov	r5, r2
 8005c86:	461c      	mov	r4, r3
 8005c88:	f7ff ff92 	bl	8005bb0 <_ZNKSt9type_infoeqERKS_>
 8005c8c:	b120      	cbz	r0, 8005c98 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005c8e:	2308      	movs	r3, #8
 8005c90:	60e3      	str	r3, [r4, #12]
 8005c92:	2306      	movs	r3, #6
 8005c94:	6025      	str	r5, [r4, #0]
 8005c96:	7123      	strb	r3, [r4, #4]
 8005c98:	bd38      	pop	{r3, r4, r5, pc}

08005c9a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	9201      	str	r2, [sp, #4]
 8005ca2:	461e      	mov	r6, r3
 8005ca4:	f7ff ff84 	bl	8005bb0 <_ZNKSt9type_infoeqERKS_>
 8005ca8:	b950      	cbnz	r0, 8005cc0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005caa:	2e03      	cmp	r6, #3
 8005cac:	d808      	bhi.n	8005cc0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	9a01      	ldr	r2, [sp, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	b002      	add	sp, #8
 8005cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005cbe:	4718      	bx	r3
 8005cc0:	b002      	add	sp, #8
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}

08005cc4 <_ZdlPv>:
 8005cc4:	f000 b8c8 	b.w	8005e58 <free>

08005cc8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005cc8:	7803      	ldrb	r3, [r0, #0]
 8005cca:	2b47      	cmp	r3, #71	; 0x47
 8005ccc:	d117      	bne.n	8005cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005cce:	7843      	ldrb	r3, [r0, #1]
 8005cd0:	2b4e      	cmp	r3, #78	; 0x4e
 8005cd2:	d114      	bne.n	8005cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005cd4:	7883      	ldrb	r3, [r0, #2]
 8005cd6:	2b55      	cmp	r3, #85	; 0x55
 8005cd8:	d111      	bne.n	8005cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005cda:	78c3      	ldrb	r3, [r0, #3]
 8005cdc:	2b43      	cmp	r3, #67	; 0x43
 8005cde:	d10e      	bne.n	8005cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005ce0:	7903      	ldrb	r3, [r0, #4]
 8005ce2:	2b43      	cmp	r3, #67	; 0x43
 8005ce4:	d10b      	bne.n	8005cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005ce6:	7943      	ldrb	r3, [r0, #5]
 8005ce8:	2b2b      	cmp	r3, #43	; 0x2b
 8005cea:	d108      	bne.n	8005cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005cec:	7983      	ldrb	r3, [r0, #6]
 8005cee:	2b2b      	cmp	r3, #43	; 0x2b
 8005cf0:	d105      	bne.n	8005cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005cf2:	79c0      	ldrb	r0, [r0, #7]
 8005cf4:	2801      	cmp	r0, #1
 8005cf6:	bf8c      	ite	hi
 8005cf8:	2000      	movhi	r0, #0
 8005cfa:	2001      	movls	r0, #1
 8005cfc:	4770      	bx	lr
 8005cfe:	2000      	movs	r0, #0
 8005d00:	4770      	bx	lr

08005d02 <__cxa_call_terminate>:
 8005d02:	b510      	push	{r4, lr}
 8005d04:	4604      	mov	r4, r0
 8005d06:	b148      	cbz	r0, 8005d1c <__cxa_call_terminate+0x1a>
 8005d08:	f000 f83b 	bl	8005d82 <__cxa_begin_catch>
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f7ff ffdb 	bl	8005cc8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005d12:	b118      	cbz	r0, 8005d1c <__cxa_call_terminate+0x1a>
 8005d14:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8005d18:	f7ff fe94 	bl	8005a44 <_ZN10__cxxabiv111__terminateEPFvvE>
 8005d1c:	f7ff fe9e 	bl	8005a5c <_ZSt9terminatev>

08005d20 <__cxa_call_unexpected>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4602      	mov	r2, r0
 8005d24:	f7ff ffd0 	bl	8005cc8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005d28:	b140      	cbz	r0, 8005d3c <__cxa_call_unexpected+0x1c>
 8005d2a:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8005d2e:	2500      	movs	r5, #0
 8005d30:	4610      	mov	r0, r2
 8005d32:	f000 f826 	bl	8005d82 <__cxa_begin_catch>
 8005d36:	b125      	cbz	r5, 8005d42 <__cxa_call_unexpected+0x22>
 8005d38:	f7ff fea2 	bl	8005a80 <_ZSt10unexpectedv>
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	2501      	movs	r5, #1
 8005d40:	e7f6      	b.n	8005d30 <__cxa_call_unexpected+0x10>
 8005d42:	4620      	mov	r0, r4
 8005d44:	f7ff fe8f 	bl	8005a66 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08005d48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005d48:	7803      	ldrb	r3, [r0, #0]
 8005d4a:	2b47      	cmp	r3, #71	; 0x47
 8005d4c:	d117      	bne.n	8005d7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005d4e:	7843      	ldrb	r3, [r0, #1]
 8005d50:	2b4e      	cmp	r3, #78	; 0x4e
 8005d52:	d114      	bne.n	8005d7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005d54:	7883      	ldrb	r3, [r0, #2]
 8005d56:	2b55      	cmp	r3, #85	; 0x55
 8005d58:	d111      	bne.n	8005d7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005d5a:	78c3      	ldrb	r3, [r0, #3]
 8005d5c:	2b43      	cmp	r3, #67	; 0x43
 8005d5e:	d10e      	bne.n	8005d7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005d60:	7903      	ldrb	r3, [r0, #4]
 8005d62:	2b43      	cmp	r3, #67	; 0x43
 8005d64:	d10b      	bne.n	8005d7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005d66:	7943      	ldrb	r3, [r0, #5]
 8005d68:	2b2b      	cmp	r3, #43	; 0x2b
 8005d6a:	d108      	bne.n	8005d7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005d6c:	7983      	ldrb	r3, [r0, #6]
 8005d6e:	2b2b      	cmp	r3, #43	; 0x2b
 8005d70:	d105      	bne.n	8005d7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005d72:	79c0      	ldrb	r0, [r0, #7]
 8005d74:	2801      	cmp	r0, #1
 8005d76:	bf8c      	ite	hi
 8005d78:	2000      	movhi	r0, #0
 8005d7a:	2001      	movls	r0, #1
 8005d7c:	4770      	bx	lr
 8005d7e:	2000      	movs	r0, #0
 8005d80:	4770      	bx	lr

08005d82 <__cxa_begin_catch>:
 8005d82:	b538      	push	{r3, r4, r5, lr}
 8005d84:	4604      	mov	r4, r0
 8005d86:	f7ff fbd7 	bl	8005538 <__cxa_get_globals>
 8005d8a:	6805      	ldr	r5, [r0, #0]
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f1a4 0120 	sub.w	r1, r4, #32
 8005d94:	f7ff ffd8 	bl	8005d48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005d98:	b928      	cbnz	r0, 8005da6 <__cxa_begin_catch+0x24>
 8005d9a:	b10d      	cbz	r5, 8005da0 <__cxa_begin_catch+0x1e>
 8005d9c:	f7ff fe5e 	bl	8005a5c <_ZSt9terminatev>
 8005da0:	6011      	str	r1, [r2, #0]
 8005da2:	4628      	mov	r0, r5
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bfb4      	ite	lt
 8005dae:	f1c3 0301 	rsblt	r3, r3, #1
 8005db2:	3301      	addge	r3, #1
 8005db4:	f844 3c0c 	str.w	r3, [r4, #-12]
 8005db8:	6853      	ldr	r3, [r2, #4]
 8005dba:	428d      	cmp	r5, r1
 8005dbc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005dc0:	6053      	str	r3, [r2, #4]
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	bf1c      	itt	ne
 8005dc6:	f844 5c10 	strne.w	r5, [r4, #-16]
 8005dca:	6011      	strne	r1, [r2, #0]
 8005dcc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005dce:	f7fa ffb1 	bl	8000d34 <_Unwind_Complete>
 8005dd2:	e7e6      	b.n	8005da2 <__cxa_begin_catch+0x20>

08005dd4 <_ZSt15get_new_handlerv>:
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <_ZSt15get_new_handlerv+0xc>)
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	f3bf 8f5b 	dmb	ish
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000168 	.word	0x20000168

08005de4 <abort>:
 8005de4:	b508      	push	{r3, lr}
 8005de6:	2006      	movs	r0, #6
 8005de8:	f000 f928 	bl	800603c <raise>
 8005dec:	2001      	movs	r0, #1
 8005dee:	f7fc f951 	bl	8002094 <_exit>
	...

08005df4 <__errno>:
 8005df4:	4b01      	ldr	r3, [pc, #4]	; (8005dfc <__errno+0x8>)
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000014 	.word	0x20000014

08005e00 <__libc_init_array>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	4d0d      	ldr	r5, [pc, #52]	; (8005e38 <__libc_init_array+0x38>)
 8005e04:	4c0d      	ldr	r4, [pc, #52]	; (8005e3c <__libc_init_array+0x3c>)
 8005e06:	1b64      	subs	r4, r4, r5
 8005e08:	10a4      	asrs	r4, r4, #2
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	42a6      	cmp	r6, r4
 8005e0e:	d109      	bne.n	8005e24 <__libc_init_array+0x24>
 8005e10:	4d0b      	ldr	r5, [pc, #44]	; (8005e40 <__libc_init_array+0x40>)
 8005e12:	4c0c      	ldr	r4, [pc, #48]	; (8005e44 <__libc_init_array+0x44>)
 8005e14:	f000 f950 	bl	80060b8 <_init>
 8005e18:	1b64      	subs	r4, r4, r5
 8005e1a:	10a4      	asrs	r4, r4, #2
 8005e1c:	2600      	movs	r6, #0
 8005e1e:	42a6      	cmp	r6, r4
 8005e20:	d105      	bne.n	8005e2e <__libc_init_array+0x2e>
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e28:	4798      	blx	r3
 8005e2a:	3601      	adds	r6, #1
 8005e2c:	e7ee      	b.n	8005e0c <__libc_init_array+0xc>
 8005e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e32:	4798      	blx	r3
 8005e34:	3601      	adds	r6, #1
 8005e36:	e7f2      	b.n	8005e1e <__libc_init_array+0x1e>
 8005e38:	080063d4 	.word	0x080063d4
 8005e3c:	080063d4 	.word	0x080063d4
 8005e40:	080063d4 	.word	0x080063d4
 8005e44:	080063d8 	.word	0x080063d8

08005e48 <malloc>:
 8005e48:	4b02      	ldr	r3, [pc, #8]	; (8005e54 <malloc+0xc>)
 8005e4a:	4601      	mov	r1, r0
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	f000 b863 	b.w	8005f18 <_malloc_r>
 8005e52:	bf00      	nop
 8005e54:	20000014 	.word	0x20000014

08005e58 <free>:
 8005e58:	4b02      	ldr	r3, [pc, #8]	; (8005e64 <free+0xc>)
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	f000 b80b 	b.w	8005e78 <_free_r>
 8005e62:	bf00      	nop
 8005e64:	20000014 	.word	0x20000014

08005e68 <memset>:
 8005e68:	4402      	add	r2, r0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d100      	bne.n	8005e72 <memset+0xa>
 8005e70:	4770      	bx	lr
 8005e72:	f803 1b01 	strb.w	r1, [r3], #1
 8005e76:	e7f9      	b.n	8005e6c <memset+0x4>

08005e78 <_free_r>:
 8005e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e7a:	2900      	cmp	r1, #0
 8005e7c:	d048      	beq.n	8005f10 <_free_r+0x98>
 8005e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e82:	9001      	str	r0, [sp, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f1a1 0404 	sub.w	r4, r1, #4
 8005e8a:	bfb8      	it	lt
 8005e8c:	18e4      	addlt	r4, r4, r3
 8005e8e:	f000 f8f1 	bl	8006074 <__malloc_lock>
 8005e92:	4a20      	ldr	r2, [pc, #128]	; (8005f14 <_free_r+0x9c>)
 8005e94:	9801      	ldr	r0, [sp, #4]
 8005e96:	6813      	ldr	r3, [r2, #0]
 8005e98:	4615      	mov	r5, r2
 8005e9a:	b933      	cbnz	r3, 8005eaa <_free_r+0x32>
 8005e9c:	6063      	str	r3, [r4, #4]
 8005e9e:	6014      	str	r4, [r2, #0]
 8005ea0:	b003      	add	sp, #12
 8005ea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ea6:	f000 b8eb 	b.w	8006080 <__malloc_unlock>
 8005eaa:	42a3      	cmp	r3, r4
 8005eac:	d90b      	bls.n	8005ec6 <_free_r+0x4e>
 8005eae:	6821      	ldr	r1, [r4, #0]
 8005eb0:	1862      	adds	r2, r4, r1
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	bf04      	itt	eq
 8005eb6:	681a      	ldreq	r2, [r3, #0]
 8005eb8:	685b      	ldreq	r3, [r3, #4]
 8005eba:	6063      	str	r3, [r4, #4]
 8005ebc:	bf04      	itt	eq
 8005ebe:	1852      	addeq	r2, r2, r1
 8005ec0:	6022      	streq	r2, [r4, #0]
 8005ec2:	602c      	str	r4, [r5, #0]
 8005ec4:	e7ec      	b.n	8005ea0 <_free_r+0x28>
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	b10b      	cbz	r3, 8005ed0 <_free_r+0x58>
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	d9fa      	bls.n	8005ec6 <_free_r+0x4e>
 8005ed0:	6811      	ldr	r1, [r2, #0]
 8005ed2:	1855      	adds	r5, r2, r1
 8005ed4:	42a5      	cmp	r5, r4
 8005ed6:	d10b      	bne.n	8005ef0 <_free_r+0x78>
 8005ed8:	6824      	ldr	r4, [r4, #0]
 8005eda:	4421      	add	r1, r4
 8005edc:	1854      	adds	r4, r2, r1
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	6011      	str	r1, [r2, #0]
 8005ee2:	d1dd      	bne.n	8005ea0 <_free_r+0x28>
 8005ee4:	681c      	ldr	r4, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	6053      	str	r3, [r2, #4]
 8005eea:	4421      	add	r1, r4
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	e7d7      	b.n	8005ea0 <_free_r+0x28>
 8005ef0:	d902      	bls.n	8005ef8 <_free_r+0x80>
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	6003      	str	r3, [r0, #0]
 8005ef6:	e7d3      	b.n	8005ea0 <_free_r+0x28>
 8005ef8:	6825      	ldr	r5, [r4, #0]
 8005efa:	1961      	adds	r1, r4, r5
 8005efc:	428b      	cmp	r3, r1
 8005efe:	bf04      	itt	eq
 8005f00:	6819      	ldreq	r1, [r3, #0]
 8005f02:	685b      	ldreq	r3, [r3, #4]
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	bf04      	itt	eq
 8005f08:	1949      	addeq	r1, r1, r5
 8005f0a:	6021      	streq	r1, [r4, #0]
 8005f0c:	6054      	str	r4, [r2, #4]
 8005f0e:	e7c7      	b.n	8005ea0 <_free_r+0x28>
 8005f10:	b003      	add	sp, #12
 8005f12:	bd30      	pop	{r4, r5, pc}
 8005f14:	2000016c 	.word	0x2000016c

08005f18 <_malloc_r>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	1ccd      	adds	r5, r1, #3
 8005f1c:	f025 0503 	bic.w	r5, r5, #3
 8005f20:	3508      	adds	r5, #8
 8005f22:	2d0c      	cmp	r5, #12
 8005f24:	bf38      	it	cc
 8005f26:	250c      	movcc	r5, #12
 8005f28:	2d00      	cmp	r5, #0
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	db01      	blt.n	8005f32 <_malloc_r+0x1a>
 8005f2e:	42a9      	cmp	r1, r5
 8005f30:	d903      	bls.n	8005f3a <_malloc_r+0x22>
 8005f32:	230c      	movs	r3, #12
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	2000      	movs	r0, #0
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3a:	f000 f89b 	bl	8006074 <__malloc_lock>
 8005f3e:	4921      	ldr	r1, [pc, #132]	; (8005fc4 <_malloc_r+0xac>)
 8005f40:	680a      	ldr	r2, [r1, #0]
 8005f42:	4614      	mov	r4, r2
 8005f44:	b99c      	cbnz	r4, 8005f6e <_malloc_r+0x56>
 8005f46:	4f20      	ldr	r7, [pc, #128]	; (8005fc8 <_malloc_r+0xb0>)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	b923      	cbnz	r3, 8005f56 <_malloc_r+0x3e>
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f000 f83c 	bl	8005fcc <_sbrk_r>
 8005f54:	6038      	str	r0, [r7, #0]
 8005f56:	4629      	mov	r1, r5
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f000 f837 	bl	8005fcc <_sbrk_r>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	d123      	bne.n	8005faa <_malloc_r+0x92>
 8005f62:	230c      	movs	r3, #12
 8005f64:	6033      	str	r3, [r6, #0]
 8005f66:	4630      	mov	r0, r6
 8005f68:	f000 f88a 	bl	8006080 <__malloc_unlock>
 8005f6c:	e7e3      	b.n	8005f36 <_malloc_r+0x1e>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	1b5b      	subs	r3, r3, r5
 8005f72:	d417      	bmi.n	8005fa4 <_malloc_r+0x8c>
 8005f74:	2b0b      	cmp	r3, #11
 8005f76:	d903      	bls.n	8005f80 <_malloc_r+0x68>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	441c      	add	r4, r3
 8005f7c:	6025      	str	r5, [r4, #0]
 8005f7e:	e004      	b.n	8005f8a <_malloc_r+0x72>
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	42a2      	cmp	r2, r4
 8005f84:	bf0c      	ite	eq
 8005f86:	600b      	streq	r3, [r1, #0]
 8005f88:	6053      	strne	r3, [r2, #4]
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f000 f878 	bl	8006080 <__malloc_unlock>
 8005f90:	f104 000b 	add.w	r0, r4, #11
 8005f94:	1d23      	adds	r3, r4, #4
 8005f96:	f020 0007 	bic.w	r0, r0, #7
 8005f9a:	1ac2      	subs	r2, r0, r3
 8005f9c:	d0cc      	beq.n	8005f38 <_malloc_r+0x20>
 8005f9e:	1a1b      	subs	r3, r3, r0
 8005fa0:	50a3      	str	r3, [r4, r2]
 8005fa2:	e7c9      	b.n	8005f38 <_malloc_r+0x20>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	6864      	ldr	r4, [r4, #4]
 8005fa8:	e7cc      	b.n	8005f44 <_malloc_r+0x2c>
 8005faa:	1cc4      	adds	r4, r0, #3
 8005fac:	f024 0403 	bic.w	r4, r4, #3
 8005fb0:	42a0      	cmp	r0, r4
 8005fb2:	d0e3      	beq.n	8005f7c <_malloc_r+0x64>
 8005fb4:	1a21      	subs	r1, r4, r0
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f000 f808 	bl	8005fcc <_sbrk_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d1dd      	bne.n	8005f7c <_malloc_r+0x64>
 8005fc0:	e7cf      	b.n	8005f62 <_malloc_r+0x4a>
 8005fc2:	bf00      	nop
 8005fc4:	2000016c 	.word	0x2000016c
 8005fc8:	20000170 	.word	0x20000170

08005fcc <_sbrk_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d06      	ldr	r5, [pc, #24]	; (8005fe8 <_sbrk_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	f7fc f866 	bl	80020a8 <_sbrk>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_sbrk_r+0x1a>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_sbrk_r+0x1a>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20000178 	.word	0x20000178

08005fec <_raise_r>:
 8005fec:	291f      	cmp	r1, #31
 8005fee:	b538      	push	{r3, r4, r5, lr}
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	d904      	bls.n	8006000 <_raise_r+0x14>
 8005ff6:	2316      	movs	r3, #22
 8005ff8:	6003      	str	r3, [r0, #0]
 8005ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006002:	b112      	cbz	r2, 800600a <_raise_r+0x1e>
 8006004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006008:	b94b      	cbnz	r3, 800601e <_raise_r+0x32>
 800600a:	4620      	mov	r0, r4
 800600c:	f000 f830 	bl	8006070 <_getpid_r>
 8006010:	462a      	mov	r2, r5
 8006012:	4601      	mov	r1, r0
 8006014:	4620      	mov	r0, r4
 8006016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800601a:	f000 b817 	b.w	800604c <_kill_r>
 800601e:	2b01      	cmp	r3, #1
 8006020:	d00a      	beq.n	8006038 <_raise_r+0x4c>
 8006022:	1c59      	adds	r1, r3, #1
 8006024:	d103      	bne.n	800602e <_raise_r+0x42>
 8006026:	2316      	movs	r3, #22
 8006028:	6003      	str	r3, [r0, #0]
 800602a:	2001      	movs	r0, #1
 800602c:	e7e7      	b.n	8005ffe <_raise_r+0x12>
 800602e:	2400      	movs	r4, #0
 8006030:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006034:	4628      	mov	r0, r5
 8006036:	4798      	blx	r3
 8006038:	2000      	movs	r0, #0
 800603a:	e7e0      	b.n	8005ffe <_raise_r+0x12>

0800603c <raise>:
 800603c:	4b02      	ldr	r3, [pc, #8]	; (8006048 <raise+0xc>)
 800603e:	4601      	mov	r1, r0
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	f7ff bfd3 	b.w	8005fec <_raise_r>
 8006046:	bf00      	nop
 8006048:	20000014 	.word	0x20000014

0800604c <_kill_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	; (800606c <_kill_r+0x20>)
 8006050:	2300      	movs	r3, #0
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	4611      	mov	r1, r2
 8006058:	602b      	str	r3, [r5, #0]
 800605a:	f7fc f80b 	bl	8002074 <_kill>
 800605e:	1c43      	adds	r3, r0, #1
 8006060:	d102      	bne.n	8006068 <_kill_r+0x1c>
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	b103      	cbz	r3, 8006068 <_kill_r+0x1c>
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	bd38      	pop	{r3, r4, r5, pc}
 800606a:	bf00      	nop
 800606c:	20000178 	.word	0x20000178

08006070 <_getpid_r>:
 8006070:	f7fb bff8 	b.w	8002064 <_getpid>

08006074 <__malloc_lock>:
 8006074:	4801      	ldr	r0, [pc, #4]	; (800607c <__malloc_lock+0x8>)
 8006076:	f000 b809 	b.w	800608c <__retarget_lock_acquire_recursive>
 800607a:	bf00      	nop
 800607c:	20000180 	.word	0x20000180

08006080 <__malloc_unlock>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__malloc_unlock+0x8>)
 8006082:	f000 b804 	b.w	800608e <__retarget_lock_release_recursive>
 8006086:	bf00      	nop
 8006088:	20000180 	.word	0x20000180

0800608c <__retarget_lock_acquire_recursive>:
 800608c:	4770      	bx	lr

0800608e <__retarget_lock_release_recursive>:
 800608e:	4770      	bx	lr

08006090 <_Unwind_GetDataRelBase>:
 8006090:	b508      	push	{r3, lr}
 8006092:	f7ff fea7 	bl	8005de4 <abort>

08006096 <_Unwind_GetTextRelBase>:
 8006096:	b508      	push	{r3, lr}
 8006098:	f7ff fffa 	bl	8006090 <_Unwind_GetDataRelBase>

0800609c <memcpy>:
 800609c:	440a      	add	r2, r1
 800609e:	4291      	cmp	r1, r2
 80060a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80060a4:	d100      	bne.n	80060a8 <memcpy+0xc>
 80060a6:	4770      	bx	lr
 80060a8:	b510      	push	{r4, lr}
 80060aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060b2:	4291      	cmp	r1, r2
 80060b4:	d1f9      	bne.n	80060aa <memcpy+0xe>
 80060b6:	bd10      	pop	{r4, pc}

080060b8 <_init>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr

080060c4 <_fini>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	bf00      	nop
 80060c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ca:	bc08      	pop	{r3}
 80060cc:	469e      	mov	lr, r3
 80060ce:	4770      	bx	lr
