
random.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000341c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000003c  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e0  08003624  08003624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003704  08003704  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800370c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  0800377c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  0800377c  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef56  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2a  00000000  00000000  0002eff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00030e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00031c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7a1  00000000  00000000  000329e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec31  00000000  00000000  0004e189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a510e  00000000  00000000  0005cdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101ec8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc4  00000000  00000000  00101f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003590 	.word	0x08003590

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08003590 	.word	0x08003590

080001cc <selfrel_offset31>:
 80001cc:	6803      	ldr	r3, [r0, #0]
 80001ce:	005a      	lsls	r2, r3, #1
 80001d0:	bf4c      	ite	mi
 80001d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001d6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001da:	4418      	add	r0, r3
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop

080001e0 <search_EIT_table>:
 80001e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80001e4:	b329      	cbz	r1, 8000232 <search_EIT_table+0x52>
 80001e6:	1e4f      	subs	r7, r1, #1
 80001e8:	4604      	mov	r4, r0
 80001ea:	4615      	mov	r5, r2
 80001ec:	463e      	mov	r6, r7
 80001ee:	f04f 0800 	mov.w	r8, #0
 80001f2:	eb08 0106 	add.w	r1, r8, r6
 80001f6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001fa:	1049      	asrs	r1, r1, #1
 80001fc:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000200:	4648      	mov	r0, r9
 8000202:	f7ff ffe3 	bl	80001cc <selfrel_offset31>
 8000206:	4603      	mov	r3, r0
 8000208:	00c8      	lsls	r0, r1, #3
 800020a:	3008      	adds	r0, #8
 800020c:	428f      	cmp	r7, r1
 800020e:	4420      	add	r0, r4
 8000210:	d009      	beq.n	8000226 <search_EIT_table+0x46>
 8000212:	42ab      	cmp	r3, r5
 8000214:	d809      	bhi.n	800022a <search_EIT_table+0x4a>
 8000216:	f7ff ffd9 	bl	80001cc <selfrel_offset31>
 800021a:	3801      	subs	r0, #1
 800021c:	42a8      	cmp	r0, r5
 800021e:	d20a      	bcs.n	8000236 <search_EIT_table+0x56>
 8000220:	f101 0801 	add.w	r8, r1, #1
 8000224:	e7e5      	b.n	80001f2 <search_EIT_table+0x12>
 8000226:	42ab      	cmp	r3, r5
 8000228:	d905      	bls.n	8000236 <search_EIT_table+0x56>
 800022a:	4588      	cmp	r8, r1
 800022c:	d001      	beq.n	8000232 <search_EIT_table+0x52>
 800022e:	1e4e      	subs	r6, r1, #1
 8000230:	e7df      	b.n	80001f2 <search_EIT_table+0x12>
 8000232:	f04f 0900 	mov.w	r9, #0
 8000236:	4648      	mov	r0, r9
 8000238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800023c <__gnu_unwind_get_pr_addr>:
 800023c:	2801      	cmp	r0, #1
 800023e:	d007      	beq.n	8000250 <__gnu_unwind_get_pr_addr+0x14>
 8000240:	2802      	cmp	r0, #2
 8000242:	d007      	beq.n	8000254 <__gnu_unwind_get_pr_addr+0x18>
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <__gnu_unwind_get_pr_addr+0x1c>)
 8000246:	2800      	cmp	r0, #0
 8000248:	bf0c      	ite	eq
 800024a:	4618      	moveq	r0, r3
 800024c:	2000      	movne	r0, #0
 800024e:	4770      	bx	lr
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <__gnu_unwind_get_pr_addr+0x20>)
 8000252:	4770      	bx	lr
 8000254:	4802      	ldr	r0, [pc, #8]	; (8000260 <__gnu_unwind_get_pr_addr+0x24>)
 8000256:	4770      	bx	lr
 8000258:	08000901 	.word	0x08000901
 800025c:	08000905 	.word	0x08000905
 8000260:	08000909 	.word	0x08000909

08000264 <get_eit_entry>:
 8000264:	b530      	push	{r4, r5, lr}
 8000266:	4b23      	ldr	r3, [pc, #140]	; (80002f4 <get_eit_entry+0x90>)
 8000268:	b083      	sub	sp, #12
 800026a:	4604      	mov	r4, r0
 800026c:	1e8d      	subs	r5, r1, #2
 800026e:	b33b      	cbz	r3, 80002c0 <get_eit_entry+0x5c>
 8000270:	a901      	add	r1, sp, #4
 8000272:	4628      	mov	r0, r5
 8000274:	f3af 8000 	nop.w
 8000278:	b1e8      	cbz	r0, 80002b6 <get_eit_entry+0x52>
 800027a:	9901      	ldr	r1, [sp, #4]
 800027c:	462a      	mov	r2, r5
 800027e:	f7ff ffaf 	bl	80001e0 <search_EIT_table>
 8000282:	4601      	mov	r1, r0
 8000284:	b1b8      	cbz	r0, 80002b6 <get_eit_entry+0x52>
 8000286:	f7ff ffa1 	bl	80001cc <selfrel_offset31>
 800028a:	684b      	ldr	r3, [r1, #4]
 800028c:	64a0      	str	r0, [r4, #72]	; 0x48
 800028e:	2b01      	cmp	r3, #1
 8000290:	d02b      	beq.n	80002ea <get_eit_entry+0x86>
 8000292:	2b00      	cmp	r3, #0
 8000294:	f101 0004 	add.w	r0, r1, #4
 8000298:	db23      	blt.n	80002e2 <get_eit_entry+0x7e>
 800029a:	f7ff ff97 	bl	80001cc <selfrel_offset31>
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002a4:	6803      	ldr	r3, [r0, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	db10      	blt.n	80002cc <get_eit_entry+0x68>
 80002aa:	f7ff ff8f 	bl	80001cc <selfrel_offset31>
 80002ae:	6120      	str	r0, [r4, #16]
 80002b0:	2000      	movs	r0, #0
 80002b2:	b003      	add	sp, #12
 80002b4:	bd30      	pop	{r4, r5, pc}
 80002b6:	2300      	movs	r3, #0
 80002b8:	2009      	movs	r0, #9
 80002ba:	6123      	str	r3, [r4, #16]
 80002bc:	b003      	add	sp, #12
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	490d      	ldr	r1, [pc, #52]	; (80002f8 <get_eit_entry+0x94>)
 80002c2:	480e      	ldr	r0, [pc, #56]	; (80002fc <get_eit_entry+0x98>)
 80002c4:	1a09      	subs	r1, r1, r0
 80002c6:	10c9      	asrs	r1, r1, #3
 80002c8:	9101      	str	r1, [sp, #4]
 80002ca:	e7d7      	b.n	800027c <get_eit_entry+0x18>
 80002cc:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80002d0:	f7ff ffb4 	bl	800023c <__gnu_unwind_get_pr_addr>
 80002d4:	2800      	cmp	r0, #0
 80002d6:	6120      	str	r0, [r4, #16]
 80002d8:	bf14      	ite	ne
 80002da:	2000      	movne	r0, #0
 80002dc:	2009      	moveq	r0, #9
 80002de:	b003      	add	sp, #12
 80002e0:	bd30      	pop	{r4, r5, pc}
 80002e2:	2301      	movs	r3, #1
 80002e4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002e8:	e7dc      	b.n	80002a4 <get_eit_entry+0x40>
 80002ea:	2300      	movs	r3, #0
 80002ec:	6123      	str	r3, [r4, #16]
 80002ee:	2005      	movs	r0, #5
 80002f0:	e7df      	b.n	80002b2 <get_eit_entry+0x4e>
 80002f2:	bf00      	nop
 80002f4:	00000000 	.word	0x00000000
 80002f8:	08003704 	.word	0x08003704
 80002fc:	08003624 	.word	0x08003624

08000300 <restore_non_core_regs>:
 8000300:	6803      	ldr	r3, [r0, #0]
 8000302:	07da      	lsls	r2, r3, #31
 8000304:	b510      	push	{r4, lr}
 8000306:	4604      	mov	r4, r0
 8000308:	d406      	bmi.n	8000318 <restore_non_core_regs+0x18>
 800030a:	079b      	lsls	r3, r3, #30
 800030c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000310:	d509      	bpl.n	8000326 <restore_non_core_regs+0x26>
 8000312:	f000 fc4b 	bl	8000bac <__gnu_Unwind_Restore_VFP_D>
 8000316:	6823      	ldr	r3, [r4, #0]
 8000318:	0759      	lsls	r1, r3, #29
 800031a:	d509      	bpl.n	8000330 <restore_non_core_regs+0x30>
 800031c:	071a      	lsls	r2, r3, #28
 800031e:	d50e      	bpl.n	800033e <restore_non_core_regs+0x3e>
 8000320:	06db      	lsls	r3, r3, #27
 8000322:	d513      	bpl.n	800034c <restore_non_core_regs+0x4c>
 8000324:	bd10      	pop	{r4, pc}
 8000326:	f000 fc39 	bl	8000b9c <__gnu_Unwind_Restore_VFP>
 800032a:	6823      	ldr	r3, [r4, #0]
 800032c:	0759      	lsls	r1, r3, #29
 800032e:	d4f5      	bmi.n	800031c <restore_non_core_regs+0x1c>
 8000330:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000334:	f000 fc42 	bl	8000bbc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000338:	6823      	ldr	r3, [r4, #0]
 800033a:	071a      	lsls	r2, r3, #28
 800033c:	d4f0      	bmi.n	8000320 <restore_non_core_regs+0x20>
 800033e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000342:	f000 fc43 	bl	8000bcc <__gnu_Unwind_Restore_WMMXD>
 8000346:	6823      	ldr	r3, [r4, #0]
 8000348:	06db      	lsls	r3, r3, #27
 800034a:	d4eb      	bmi.n	8000324 <restore_non_core_regs+0x24>
 800034c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000354:	f000 bc7e 	b.w	8000c54 <__gnu_Unwind_Restore_WMMXC>

08000358 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000358:	4603      	mov	r3, r0
 800035a:	6800      	ldr	r0, [r0, #0]
 800035c:	b100      	cbz	r0, 8000360 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 800035e:	4418      	add	r0, r3
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop

08000364 <__gnu_unwind_24bit.isra.0>:
 8000364:	2009      	movs	r0, #9
 8000366:	4770      	bx	lr

08000368 <_Unwind_DebugHook>:
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop

0800036c <unwind_phase2>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	4604      	mov	r4, r0
 8000370:	460e      	mov	r6, r1
 8000372:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000374:	4620      	mov	r0, r4
 8000376:	f7ff ff75 	bl	8000264 <get_eit_entry>
 800037a:	4605      	mov	r5, r0
 800037c:	b988      	cbnz	r0, 80003a2 <unwind_phase2+0x36>
 800037e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000380:	6163      	str	r3, [r4, #20]
 8000382:	4632      	mov	r2, r6
 8000384:	6923      	ldr	r3, [r4, #16]
 8000386:	4621      	mov	r1, r4
 8000388:	2001      	movs	r0, #1
 800038a:	4798      	blx	r3
 800038c:	2808      	cmp	r0, #8
 800038e:	d0f0      	beq.n	8000372 <unwind_phase2+0x6>
 8000390:	2807      	cmp	r0, #7
 8000392:	d106      	bne.n	80003a2 <unwind_phase2+0x36>
 8000394:	4628      	mov	r0, r5
 8000396:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000398:	f7ff ffe6 	bl	8000368 <_Unwind_DebugHook>
 800039c:	1d30      	adds	r0, r6, #4
 800039e:	f000 fbf1 	bl	8000b84 <__restore_core_regs>
 80003a2:	f003 f89b 	bl	80034dc <abort>
 80003a6:	bf00      	nop

080003a8 <unwind_phase2_forced>:
 80003a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003ac:	1d0d      	adds	r5, r1, #4
 80003ae:	4606      	mov	r6, r0
 80003b0:	4614      	mov	r4, r2
 80003b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003b8:	f10d 0c0c 	add.w	ip, sp, #12
 80003bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003d0:	ad02      	add	r5, sp, #8
 80003d2:	68f7      	ldr	r7, [r6, #12]
 80003d4:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80003d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80003dc:	2300      	movs	r3, #0
 80003de:	602b      	str	r3, [r5, #0]
 80003e0:	e021      	b.n	8000426 <unwind_phase2_forced+0x7e>
 80003e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80003e4:	6173      	str	r3, [r6, #20]
 80003e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003ea:	4629      	mov	r1, r5
 80003ec:	a87a      	add	r0, sp, #488	; 0x1e8
 80003ee:	f003 f87c 	bl	80034ea <memcpy>
 80003f2:	6933      	ldr	r3, [r6, #16]
 80003f4:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003f6:	4631      	mov	r1, r6
 80003f8:	4650      	mov	r0, sl
 80003fa:	4798      	blx	r3
 80003fc:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80003fe:	e9cd 5800 	strd	r5, r8, [sp]
 8000402:	4621      	mov	r1, r4
 8000404:	646b      	str	r3, [r5, #68]	; 0x44
 8000406:	4681      	mov	r9, r0
 8000408:	4633      	mov	r3, r6
 800040a:	4632      	mov	r2, r6
 800040c:	2001      	movs	r0, #1
 800040e:	47b8      	blx	r7
 8000410:	4604      	mov	r4, r0
 8000412:	b9e8      	cbnz	r0, 8000450 <unwind_phase2_forced+0xa8>
 8000414:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000418:	a97a      	add	r1, sp, #488	; 0x1e8
 800041a:	4628      	mov	r0, r5
 800041c:	f003 f865 	bl	80034ea <memcpy>
 8000420:	f1b9 0f08 	cmp.w	r9, #8
 8000424:	d11b      	bne.n	800045e <unwind_phase2_forced+0xb6>
 8000426:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000428:	4630      	mov	r0, r6
 800042a:	f7ff ff1b 	bl	8000264 <get_eit_entry>
 800042e:	3409      	adds	r4, #9
 8000430:	fa5f fa84 	uxtb.w	sl, r4
 8000434:	4681      	mov	r9, r0
 8000436:	2800      	cmp	r0, #0
 8000438:	d0d3      	beq.n	80003e2 <unwind_phase2_forced+0x3a>
 800043a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800043c:	f04a 0110 	orr.w	r1, sl, #16
 8000440:	e9cd 5800 	strd	r5, r8, [sp]
 8000444:	4632      	mov	r2, r6
 8000446:	646b      	str	r3, [r5, #68]	; 0x44
 8000448:	2001      	movs	r0, #1
 800044a:	4633      	mov	r3, r6
 800044c:	47b8      	blx	r7
 800044e:	b108      	cbz	r0, 8000454 <unwind_phase2_forced+0xac>
 8000450:	f04f 0909 	mov.w	r9, #9
 8000454:	4648      	mov	r0, r9
 8000456:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1b9 0f07 	cmp.w	r9, #7
 8000462:	d1f5      	bne.n	8000450 <unwind_phase2_forced+0xa8>
 8000464:	4620      	mov	r0, r4
 8000466:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000468:	f7ff ff7e 	bl	8000368 <_Unwind_DebugHook>
 800046c:	a803      	add	r0, sp, #12
 800046e:	f000 fb89 	bl	8000b84 <__restore_core_regs>
 8000472:	bf00      	nop

08000474 <_Unwind_GetCFA>:
 8000474:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000476:	4770      	bx	lr

08000478 <__gnu_Unwind_RaiseException>:
 8000478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800047c:	640b      	str	r3, [r1, #64]	; 0x40
 800047e:	1d0e      	adds	r6, r1, #4
 8000480:	460f      	mov	r7, r1
 8000482:	4605      	mov	r5, r0
 8000484:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000486:	b0f9      	sub	sp, #484	; 0x1e4
 8000488:	ac01      	add	r4, sp, #4
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800048e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000490:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000494:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000498:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800049c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80004a0:	9600      	str	r6, [sp, #0]
 80004a2:	e006      	b.n	80004b2 <__gnu_Unwind_RaiseException+0x3a>
 80004a4:	692b      	ldr	r3, [r5, #16]
 80004a6:	466a      	mov	r2, sp
 80004a8:	4629      	mov	r1, r5
 80004aa:	4798      	blx	r3
 80004ac:	2808      	cmp	r0, #8
 80004ae:	4604      	mov	r4, r0
 80004b0:	d108      	bne.n	80004c4 <__gnu_Unwind_RaiseException+0x4c>
 80004b2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004b4:	4628      	mov	r0, r5
 80004b6:	f7ff fed5 	bl	8000264 <get_eit_entry>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d0f2      	beq.n	80004a4 <__gnu_Unwind_RaiseException+0x2c>
 80004be:	2009      	movs	r0, #9
 80004c0:	b079      	add	sp, #484	; 0x1e4
 80004c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c4:	4668      	mov	r0, sp
 80004c6:	f7ff ff1b 	bl	8000300 <restore_non_core_regs>
 80004ca:	2c06      	cmp	r4, #6
 80004cc:	d1f7      	bne.n	80004be <__gnu_Unwind_RaiseException+0x46>
 80004ce:	4639      	mov	r1, r7
 80004d0:	4628      	mov	r0, r5
 80004d2:	f7ff ff4b 	bl	800036c <unwind_phase2>
 80004d6:	bf00      	nop

080004d8 <__gnu_Unwind_ForcedUnwind>:
 80004d8:	b430      	push	{r4, r5}
 80004da:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80004dc:	60c1      	str	r1, [r0, #12]
 80004de:	6182      	str	r2, [r0, #24]
 80004e0:	4619      	mov	r1, r3
 80004e2:	641d      	str	r5, [r3, #64]	; 0x40
 80004e4:	2200      	movs	r2, #0
 80004e6:	bc30      	pop	{r4, r5}
 80004e8:	e75e      	b.n	80003a8 <unwind_phase2_forced>
 80004ea:	bf00      	nop

080004ec <__gnu_Unwind_Resume>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	68c6      	ldr	r6, [r0, #12]
 80004f0:	6943      	ldr	r3, [r0, #20]
 80004f2:	640b      	str	r3, [r1, #64]	; 0x40
 80004f4:	b9ae      	cbnz	r6, 8000522 <__gnu_Unwind_Resume+0x36>
 80004f6:	6903      	ldr	r3, [r0, #16]
 80004f8:	460a      	mov	r2, r1
 80004fa:	4604      	mov	r4, r0
 80004fc:	460d      	mov	r5, r1
 80004fe:	4601      	mov	r1, r0
 8000500:	2002      	movs	r0, #2
 8000502:	4798      	blx	r3
 8000504:	2807      	cmp	r0, #7
 8000506:	d005      	beq.n	8000514 <__gnu_Unwind_Resume+0x28>
 8000508:	2808      	cmp	r0, #8
 800050a:	d10f      	bne.n	800052c <__gnu_Unwind_Resume+0x40>
 800050c:	4629      	mov	r1, r5
 800050e:	4620      	mov	r0, r4
 8000510:	f7ff ff2c 	bl	800036c <unwind_phase2>
 8000514:	4630      	mov	r0, r6
 8000516:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000518:	f7ff ff26 	bl	8000368 <_Unwind_DebugHook>
 800051c:	1d28      	adds	r0, r5, #4
 800051e:	f000 fb31 	bl	8000b84 <__restore_core_regs>
 8000522:	2201      	movs	r2, #1
 8000524:	f7ff ff40 	bl	80003a8 <unwind_phase2_forced>
 8000528:	f002 ffd8 	bl	80034dc <abort>
 800052c:	f002 ffd6 	bl	80034dc <abort>

08000530 <__gnu_Unwind_Resume_or_Rethrow>:
 8000530:	68c2      	ldr	r2, [r0, #12]
 8000532:	b11a      	cbz	r2, 800053c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000534:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000536:	640a      	str	r2, [r1, #64]	; 0x40
 8000538:	2200      	movs	r2, #0
 800053a:	e735      	b.n	80003a8 <unwind_phase2_forced>
 800053c:	e79c      	b.n	8000478 <__gnu_Unwind_RaiseException>
 800053e:	bf00      	nop

08000540 <_Unwind_Complete>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <_Unwind_DeleteException>:
 8000544:	6883      	ldr	r3, [r0, #8]
 8000546:	4601      	mov	r1, r0
 8000548:	b10b      	cbz	r3, 800054e <_Unwind_DeleteException+0xa>
 800054a:	2001      	movs	r0, #1
 800054c:	4718      	bx	r3
 800054e:	4770      	bx	lr

08000550 <_Unwind_VRS_Get>:
 8000550:	2901      	cmp	r1, #1
 8000552:	d012      	beq.n	800057a <_Unwind_VRS_Get+0x2a>
 8000554:	d809      	bhi.n	800056a <_Unwind_VRS_Get+0x1a>
 8000556:	b973      	cbnz	r3, 8000576 <_Unwind_VRS_Get+0x26>
 8000558:	2a0f      	cmp	r2, #15
 800055a:	d80c      	bhi.n	8000576 <_Unwind_VRS_Get+0x26>
 800055c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000560:	4618      	mov	r0, r3
 8000562:	6853      	ldr	r3, [r2, #4]
 8000564:	9a00      	ldr	r2, [sp, #0]
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4770      	bx	lr
 800056a:	3903      	subs	r1, #3
 800056c:	2901      	cmp	r1, #1
 800056e:	bf94      	ite	ls
 8000570:	2001      	movls	r0, #1
 8000572:	2002      	movhi	r0, #2
 8000574:	4770      	bx	lr
 8000576:	2002      	movs	r0, #2
 8000578:	4770      	bx	lr
 800057a:	4608      	mov	r0, r1
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <_Unwind_GetGR>:
 8000580:	b510      	push	{r4, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	2300      	movs	r3, #0
 8000586:	ac03      	add	r4, sp, #12
 8000588:	460a      	mov	r2, r1
 800058a:	9400      	str	r4, [sp, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	f7ff ffdf 	bl	8000550 <_Unwind_VRS_Get>
 8000592:	9803      	ldr	r0, [sp, #12]
 8000594:	b004      	add	sp, #16
 8000596:	bd10      	pop	{r4, pc}

08000598 <_Unwind_VRS_Set>:
 8000598:	2901      	cmp	r1, #1
 800059a:	d012      	beq.n	80005c2 <_Unwind_VRS_Set+0x2a>
 800059c:	d809      	bhi.n	80005b2 <_Unwind_VRS_Set+0x1a>
 800059e:	b973      	cbnz	r3, 80005be <_Unwind_VRS_Set+0x26>
 80005a0:	2a0f      	cmp	r2, #15
 80005a2:	d80c      	bhi.n	80005be <_Unwind_VRS_Set+0x26>
 80005a4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005a8:	9a00      	ldr	r2, [sp, #0]
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	6042      	str	r2, [r0, #4]
 80005ae:	4618      	mov	r0, r3
 80005b0:	4770      	bx	lr
 80005b2:	3903      	subs	r1, #3
 80005b4:	2901      	cmp	r1, #1
 80005b6:	bf94      	ite	ls
 80005b8:	2001      	movls	r0, #1
 80005ba:	2002      	movhi	r0, #2
 80005bc:	4770      	bx	lr
 80005be:	2002      	movs	r0, #2
 80005c0:	4770      	bx	lr
 80005c2:	4608      	mov	r0, r1
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <_Unwind_SetGR>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	2300      	movs	r3, #0
 80005ce:	ac03      	add	r4, sp, #12
 80005d0:	9203      	str	r2, [sp, #12]
 80005d2:	9400      	str	r4, [sp, #0]
 80005d4:	460a      	mov	r2, r1
 80005d6:	4619      	mov	r1, r3
 80005d8:	f7ff ffde 	bl	8000598 <_Unwind_VRS_Set>
 80005dc:	b004      	add	sp, #16
 80005de:	bd10      	pop	{r4, pc}

080005e0 <__gnu_Unwind_Backtrace>:
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005e4:	6413      	str	r3, [r2, #64]	; 0x40
 80005e6:	1d15      	adds	r5, r2, #4
 80005e8:	468c      	mov	ip, r1
 80005ea:	4606      	mov	r6, r0
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80005f2:	ac17      	add	r4, sp, #92	; 0x5c
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000602:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800060a:	4665      	mov	r5, ip
 800060c:	9716      	str	r7, [sp, #88]	; 0x58
 800060e:	e010      	b.n	8000632 <__gnu_Unwind_Backtrace+0x52>
 8000610:	f7ff ffda 	bl	80005c8 <_Unwind_SetGR>
 8000614:	4629      	mov	r1, r5
 8000616:	a816      	add	r0, sp, #88	; 0x58
 8000618:	47b0      	blx	r6
 800061a:	4603      	mov	r3, r0
 800061c:	aa16      	add	r2, sp, #88	; 0x58
 800061e:	4669      	mov	r1, sp
 8000620:	2008      	movs	r0, #8
 8000622:	b983      	cbnz	r3, 8000646 <__gnu_Unwind_Backtrace+0x66>
 8000624:	9b04      	ldr	r3, [sp, #16]
 8000626:	4798      	blx	r3
 8000628:	2805      	cmp	r0, #5
 800062a:	4604      	mov	r4, r0
 800062c:	d00c      	beq.n	8000648 <__gnu_Unwind_Backtrace+0x68>
 800062e:	2809      	cmp	r0, #9
 8000630:	d009      	beq.n	8000646 <__gnu_Unwind_Backtrace+0x66>
 8000632:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000634:	4668      	mov	r0, sp
 8000636:	f7ff fe15 	bl	8000264 <get_eit_entry>
 800063a:	4603      	mov	r3, r0
 800063c:	466a      	mov	r2, sp
 800063e:	210c      	movs	r1, #12
 8000640:	a816      	add	r0, sp, #88	; 0x58
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0e4      	beq.n	8000610 <__gnu_Unwind_Backtrace+0x30>
 8000646:	2409      	movs	r4, #9
 8000648:	a816      	add	r0, sp, #88	; 0x58
 800064a:	f7ff fe59 	bl	8000300 <restore_non_core_regs>
 800064e:	4620      	mov	r0, r4
 8000650:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000656:	bf00      	nop

08000658 <__gnu_unwind_pr_common>:
 8000658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800065c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	460d      	mov	r5, r1
 8000662:	f854 1b04 	ldr.w	r1, [r4], #4
 8000666:	9406      	str	r4, [sp, #24]
 8000668:	4617      	mov	r7, r2
 800066a:	f000 0803 	and.w	r8, r0, #3
 800066e:	461e      	mov	r6, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d079      	beq.n	8000768 <__gnu_unwind_pr_common+0x110>
 8000674:	0c0b      	lsrs	r3, r1, #16
 8000676:	b2da      	uxtb	r2, r3
 8000678:	0409      	lsls	r1, r1, #16
 800067a:	f88d 301d 	strb.w	r3, [sp, #29]
 800067e:	2302      	movs	r3, #2
 8000680:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000684:	9105      	str	r1, [sp, #20]
 8000686:	f88d 301c 	strb.w	r3, [sp, #28]
 800068a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800068c:	f1b8 0f02 	cmp.w	r8, #2
 8000690:	bf08      	it	eq
 8000692:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000694:	f013 0301 	ands.w	r3, r3, #1
 8000698:	d00c      	beq.n	80006b4 <__gnu_unwind_pr_common+0x5c>
 800069a:	4638      	mov	r0, r7
 800069c:	a905      	add	r1, sp, #20
 800069e:	f000 fb73 	bl	8000d88 <__gnu_unwind_execute>
 80006a2:	b918      	cbnz	r0, 80006ac <__gnu_unwind_pr_common+0x54>
 80006a4:	2008      	movs	r0, #8
 80006a6:	b009      	add	sp, #36	; 0x24
 80006a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ac:	2009      	movs	r0, #9
 80006ae:	b009      	add	sp, #36	; 0x24
 80006b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006b4:	f8d4 a000 	ldr.w	sl, [r4]
 80006b8:	f1ba 0f00 	cmp.w	sl, #0
 80006bc:	d0ed      	beq.n	800069a <__gnu_unwind_pr_common+0x42>
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	f000 0308 	and.w	r3, r0, #8
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	2e02      	cmp	r6, #2
 80006c8:	d04a      	beq.n	8000760 <__gnu_unwind_pr_common+0x108>
 80006ca:	f8b4 a000 	ldrh.w	sl, [r4]
 80006ce:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80006d2:	3404      	adds	r4, #4
 80006d4:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80006d6:	f029 0b01 	bic.w	fp, r9, #1
 80006da:	210f      	movs	r1, #15
 80006dc:	4638      	mov	r0, r7
 80006de:	4493      	add	fp, r2
 80006e0:	f7ff ff4e 	bl	8000580 <_Unwind_GetGR>
 80006e4:	4583      	cmp	fp, r0
 80006e6:	d839      	bhi.n	800075c <__gnu_unwind_pr_common+0x104>
 80006e8:	f02a 0201 	bic.w	r2, sl, #1
 80006ec:	445a      	add	r2, fp
 80006ee:	4282      	cmp	r2, r0
 80006f0:	bf94      	ite	ls
 80006f2:	2000      	movls	r0, #0
 80006f4:	2001      	movhi	r0, #1
 80006f6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	f00a 0a01 	and.w	sl, sl, #1
 8000702:	ea43 030a 	orr.w	r3, r3, sl
 8000706:	2b01      	cmp	r3, #1
 8000708:	d049      	beq.n	800079e <__gnu_unwind_pr_common+0x146>
 800070a:	2b02      	cmp	r3, #2
 800070c:	d032      	beq.n	8000774 <__gnu_unwind_pr_common+0x11c>
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1cc      	bne.n	80006ac <__gnu_unwind_pr_common+0x54>
 8000712:	f1b8 0f00 	cmp.w	r8, #0
 8000716:	d002      	beq.n	800071e <__gnu_unwind_pr_common+0xc6>
 8000718:	2800      	cmp	r0, #0
 800071a:	f040 80cd 	bne.w	80008b8 <__gnu_unwind_pr_common+0x260>
 800071e:	3404      	adds	r4, #4
 8000720:	f8d4 a000 	ldr.w	sl, [r4]
 8000724:	f1ba 0f00 	cmp.w	sl, #0
 8000728:	d1cd      	bne.n	80006c6 <__gnu_unwind_pr_common+0x6e>
 800072a:	a905      	add	r1, sp, #20
 800072c:	4638      	mov	r0, r7
 800072e:	f000 fb2b 	bl	8000d88 <__gnu_unwind_execute>
 8000732:	2800      	cmp	r0, #0
 8000734:	d1ba      	bne.n	80006ac <__gnu_unwind_pr_common+0x54>
 8000736:	9b01      	ldr	r3, [sp, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0b3      	beq.n	80006a4 <__gnu_unwind_pr_common+0x4c>
 800073c:	210f      	movs	r1, #15
 800073e:	4638      	mov	r0, r7
 8000740:	f7ff ff1e 	bl	8000580 <_Unwind_GetGR>
 8000744:	210e      	movs	r1, #14
 8000746:	4602      	mov	r2, r0
 8000748:	4638      	mov	r0, r7
 800074a:	f7ff ff3d 	bl	80005c8 <_Unwind_SetGR>
 800074e:	4638      	mov	r0, r7
 8000750:	4a6a      	ldr	r2, [pc, #424]	; (80008fc <__gnu_unwind_pr_common+0x2a4>)
 8000752:	210f      	movs	r1, #15
 8000754:	f7ff ff38 	bl	80005c8 <_Unwind_SetGR>
 8000758:	2007      	movs	r0, #7
 800075a:	e7a8      	b.n	80006ae <__gnu_unwind_pr_common+0x56>
 800075c:	2000      	movs	r0, #0
 800075e:	e7ca      	b.n	80006f6 <__gnu_unwind_pr_common+0x9e>
 8000760:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000764:	3408      	adds	r4, #8
 8000766:	e7b5      	b.n	80006d4 <__gnu_unwind_pr_common+0x7c>
 8000768:	0209      	lsls	r1, r1, #8
 800076a:	2303      	movs	r3, #3
 800076c:	9105      	str	r1, [sp, #20]
 800076e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000772:	e78a      	b.n	800068a <__gnu_unwind_pr_common+0x32>
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800077a:	f1b8 0f00 	cmp.w	r8, #0
 800077e:	d145      	bne.n	800080c <__gnu_unwind_pr_common+0x1b4>
 8000780:	b128      	cbz	r0, 800078e <__gnu_unwind_pr_common+0x136>
 8000782:	9a02      	ldr	r2, [sp, #8]
 8000784:	2a00      	cmp	r2, #0
 8000786:	d05c      	beq.n	8000842 <__gnu_unwind_pr_common+0x1ea>
 8000788:	f1bb 0f00 	cmp.w	fp, #0
 800078c:	d074      	beq.n	8000878 <__gnu_unwind_pr_common+0x220>
 800078e:	2b00      	cmp	r3, #0
 8000790:	da00      	bge.n	8000794 <__gnu_unwind_pr_common+0x13c>
 8000792:	3404      	adds	r4, #4
 8000794:	f10b 0b01 	add.w	fp, fp, #1
 8000798:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 800079c:	e7c0      	b.n	8000720 <__gnu_unwind_pr_common+0xc8>
 800079e:	f1b8 0f00 	cmp.w	r8, #0
 80007a2:	d119      	bne.n	80007d8 <__gnu_unwind_pr_common+0x180>
 80007a4:	b1b0      	cbz	r0, 80007d4 <__gnu_unwind_pr_common+0x17c>
 80007a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80007aa:	1c99      	adds	r1, r3, #2
 80007ac:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80007b0:	f43f af7c 	beq.w	80006ac <__gnu_unwind_pr_common+0x54>
 80007b4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80007b8:	3301      	adds	r3, #1
 80007ba:	9104      	str	r1, [sp, #16]
 80007bc:	f000 8090 	beq.w	80008e0 <__gnu_unwind_pr_common+0x288>
 80007c0:	1d20      	adds	r0, r4, #4
 80007c2:	f7ff fdc9 	bl	8000358 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007c6:	ab04      	add	r3, sp, #16
 80007c8:	4601      	mov	r1, r0
 80007ca:	4628      	mov	r0, r5
 80007cc:	f3af 8000 	nop.w
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d15b      	bne.n	800088c <__gnu_unwind_pr_common+0x234>
 80007d4:	3408      	adds	r4, #8
 80007d6:	e7a3      	b.n	8000720 <__gnu_unwind_pr_common+0xc8>
 80007d8:	210d      	movs	r1, #13
 80007da:	4638      	mov	r0, r7
 80007dc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007e0:	f7ff fece 	bl	8000580 <_Unwind_GetGR>
 80007e4:	4581      	cmp	r9, r0
 80007e6:	d1f5      	bne.n	80007d4 <__gnu_unwind_pr_common+0x17c>
 80007e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007ea:	429c      	cmp	r4, r3
 80007ec:	d1f2      	bne.n	80007d4 <__gnu_unwind_pr_common+0x17c>
 80007ee:	4620      	mov	r0, r4
 80007f0:	f7ff fcec 	bl	80001cc <selfrel_offset31>
 80007f4:	210f      	movs	r1, #15
 80007f6:	4602      	mov	r2, r0
 80007f8:	4638      	mov	r0, r7
 80007fa:	f7ff fee5 	bl	80005c8 <_Unwind_SetGR>
 80007fe:	4638      	mov	r0, r7
 8000800:	462a      	mov	r2, r5
 8000802:	2100      	movs	r1, #0
 8000804:	f7ff fee0 	bl	80005c8 <_Unwind_SetGR>
 8000808:	2007      	movs	r0, #7
 800080a:	e750      	b.n	80006ae <__gnu_unwind_pr_common+0x56>
 800080c:	210d      	movs	r1, #13
 800080e:	4638      	mov	r0, r7
 8000810:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000814:	f7ff feb4 	bl	8000580 <_Unwind_GetGR>
 8000818:	4581      	cmp	r9, r0
 800081a:	d001      	beq.n	8000820 <__gnu_unwind_pr_common+0x1c8>
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	e7b6      	b.n	800078e <__gnu_unwind_pr_common+0x136>
 8000820:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000822:	429c      	cmp	r4, r3
 8000824:	d1fa      	bne.n	800081c <__gnu_unwind_pr_common+0x1c4>
 8000826:	2204      	movs	r2, #4
 8000828:	2100      	movs	r1, #0
 800082a:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 800082e:	18a3      	adds	r3, r4, r2
 8000830:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000834:	636b      	str	r3, [r5, #52]	; 0x34
 8000836:	6823      	ldr	r3, [r4, #0]
 8000838:	428b      	cmp	r3, r1
 800083a:	db59      	blt.n	80008f0 <__gnu_unwind_pr_common+0x298>
 800083c:	2301      	movs	r3, #1
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	e7a8      	b.n	8000794 <__gnu_unwind_pr_common+0x13c>
 8000842:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000846:	f8cd 800c 	str.w	r8, [sp, #12]
 800084a:	f104 0a04 	add.w	sl, r4, #4
 800084e:	46b0      	mov	r8, r6
 8000850:	4691      	mov	r9, r2
 8000852:	461e      	mov	r6, r3
 8000854:	e00d      	b.n	8000872 <__gnu_unwind_pr_common+0x21a>
 8000856:	9604      	str	r6, [sp, #16]
 8000858:	f7ff fd7e 	bl	8000358 <_Unwind_decode_typeinfo_ptr.isra.0>
 800085c:	ab04      	add	r3, sp, #16
 800085e:	4601      	mov	r1, r0
 8000860:	2200      	movs	r2, #0
 8000862:	4628      	mov	r0, r5
 8000864:	f3af 8000 	nop.w
 8000868:	f109 0901 	add.w	r9, r9, #1
 800086c:	f10a 0a04 	add.w	sl, sl, #4
 8000870:	b9e8      	cbnz	r0, 80008ae <__gnu_unwind_pr_common+0x256>
 8000872:	45d9      	cmp	r9, fp
 8000874:	4650      	mov	r0, sl
 8000876:	d1ee      	bne.n	8000856 <__gnu_unwind_pr_common+0x1fe>
 8000878:	4638      	mov	r0, r7
 800087a:	210d      	movs	r1, #13
 800087c:	f7ff fe80 	bl	8000580 <_Unwind_GetGR>
 8000880:	9b04      	ldr	r3, [sp, #16]
 8000882:	6228      	str	r0, [r5, #32]
 8000884:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000888:	2006      	movs	r0, #6
 800088a:	e710      	b.n	80006ae <__gnu_unwind_pr_common+0x56>
 800088c:	4681      	mov	r9, r0
 800088e:	210d      	movs	r1, #13
 8000890:	4638      	mov	r0, r7
 8000892:	f7ff fe75 	bl	8000580 <_Unwind_GetGR>
 8000896:	f1b9 0f02 	cmp.w	r9, #2
 800089a:	6228      	str	r0, [r5, #32]
 800089c:	d125      	bne.n	80008ea <__gnu_unwind_pr_common+0x292>
 800089e:	462b      	mov	r3, r5
 80008a0:	9a04      	ldr	r2, [sp, #16]
 80008a2:	f843 2f2c 	str.w	r2, [r3, #44]!
 80008a6:	626b      	str	r3, [r5, #36]	; 0x24
 80008a8:	62ac      	str	r4, [r5, #40]	; 0x28
 80008aa:	2006      	movs	r0, #6
 80008ac:	e6ff      	b.n	80006ae <__gnu_unwind_pr_common+0x56>
 80008ae:	4646      	mov	r6, r8
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80008b6:	e76a      	b.n	800078e <__gnu_unwind_pr_common+0x136>
 80008b8:	4620      	mov	r0, r4
 80008ba:	f7ff fc87 	bl	80001cc <selfrel_offset31>
 80008be:	3404      	adds	r4, #4
 80008c0:	4602      	mov	r2, r0
 80008c2:	63ac      	str	r4, [r5, #56]	; 0x38
 80008c4:	4628      	mov	r0, r5
 80008c6:	4614      	mov	r4, r2
 80008c8:	f3af 8000 	nop.w
 80008cc:	2800      	cmp	r0, #0
 80008ce:	f43f aeed 	beq.w	80006ac <__gnu_unwind_pr_common+0x54>
 80008d2:	4638      	mov	r0, r7
 80008d4:	4622      	mov	r2, r4
 80008d6:	210f      	movs	r1, #15
 80008d8:	f7ff fe76 	bl	80005c8 <_Unwind_SetGR>
 80008dc:	2007      	movs	r0, #7
 80008de:	e6e6      	b.n	80006ae <__gnu_unwind_pr_common+0x56>
 80008e0:	4638      	mov	r0, r7
 80008e2:	210d      	movs	r1, #13
 80008e4:	f7ff fe4c 	bl	8000580 <_Unwind_GetGR>
 80008e8:	6228      	str	r0, [r5, #32]
 80008ea:	9b04      	ldr	r3, [sp, #16]
 80008ec:	626b      	str	r3, [r5, #36]	; 0x24
 80008ee:	e7db      	b.n	80008a8 <__gnu_unwind_pr_common+0x250>
 80008f0:	f10b 0001 	add.w	r0, fp, #1
 80008f4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008f8:	e77a      	b.n	80007f0 <__gnu_unwind_pr_common+0x198>
 80008fa:	bf00      	nop
 80008fc:	00000000 	.word	0x00000000

08000900 <__aeabi_unwind_cpp_pr0>:
 8000900:	2300      	movs	r3, #0
 8000902:	e6a9      	b.n	8000658 <__gnu_unwind_pr_common>

08000904 <__aeabi_unwind_cpp_pr1>:
 8000904:	2301      	movs	r3, #1
 8000906:	e6a7      	b.n	8000658 <__gnu_unwind_pr_common>

08000908 <__aeabi_unwind_cpp_pr2>:
 8000908:	2302      	movs	r3, #2
 800090a:	e6a5      	b.n	8000658 <__gnu_unwind_pr_common>

0800090c <_Unwind_VRS_Pop>:
 800090c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000910:	4606      	mov	r6, r0
 8000912:	b0c3      	sub	sp, #268	; 0x10c
 8000914:	4615      	mov	r5, r2
 8000916:	461c      	mov	r4, r3
 8000918:	2904      	cmp	r1, #4
 800091a:	f200 80b9 	bhi.w	8000a90 <_Unwind_VRS_Pop+0x184>
 800091e:	e8df f001 	tbb	[pc, r1]
 8000922:	539a      	.short	0x539a
 8000924:	29b7      	.short	0x29b7
 8000926:	03          	.byte	0x03
 8000927:	00          	.byte	0x00
 8000928:	2c00      	cmp	r4, #0
 800092a:	f040 80b1 	bne.w	8000a90 <_Unwind_VRS_Pop+0x184>
 800092e:	2a10      	cmp	r2, #16
 8000930:	f200 80ae 	bhi.w	8000a90 <_Unwind_VRS_Pop+0x184>
 8000934:	6803      	ldr	r3, [r0, #0]
 8000936:	06d8      	lsls	r0, r3, #27
 8000938:	f100 80f3 	bmi.w	8000b22 <_Unwind_VRS_Pop+0x216>
 800093c:	af20      	add	r7, sp, #128	; 0x80
 800093e:	4638      	mov	r0, r7
 8000940:	f000 f992 	bl	8000c68 <__gnu_Unwind_Save_WMMXC>
 8000944:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000946:	2300      	movs	r3, #0
 8000948:	2401      	movs	r4, #1
 800094a:	fa04 f203 	lsl.w	r2, r4, r3
 800094e:	422a      	tst	r2, r5
 8000950:	4601      	mov	r1, r0
 8000952:	d004      	beq.n	800095e <_Unwind_VRS_Pop+0x52>
 8000954:	f851 2b04 	ldr.w	r2, [r1], #4
 8000958:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 800095c:	4608      	mov	r0, r1
 800095e:	3301      	adds	r3, #1
 8000960:	2b04      	cmp	r3, #4
 8000962:	d1f2      	bne.n	800094a <_Unwind_VRS_Pop+0x3e>
 8000964:	63b0      	str	r0, [r6, #56]	; 0x38
 8000966:	4638      	mov	r0, r7
 8000968:	f000 f974 	bl	8000c54 <__gnu_Unwind_Restore_WMMXC>
 800096c:	2000      	movs	r0, #0
 800096e:	b043      	add	sp, #268	; 0x10c
 8000970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000974:	2c03      	cmp	r4, #3
 8000976:	f040 808b 	bne.w	8000a90 <_Unwind_VRS_Pop+0x184>
 800097a:	b294      	uxth	r4, r2
 800097c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000980:	2b10      	cmp	r3, #16
 8000982:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000986:	f200 8083 	bhi.w	8000a90 <_Unwind_VRS_Pop+0x184>
 800098a:	6803      	ldr	r3, [r0, #0]
 800098c:	071f      	lsls	r7, r3, #28
 800098e:	f100 80d0 	bmi.w	8000b32 <_Unwind_VRS_Pop+0x226>
 8000992:	af20      	add	r7, sp, #128	; 0x80
 8000994:	4638      	mov	r0, r7
 8000996:	f000 f93b 	bl	8000c10 <__gnu_Unwind_Save_WMMXD>
 800099a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 800099e:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 80009a0:	b154      	cbz	r4, 80009b8 <_Unwind_VRS_Pop+0xac>
 80009a2:	460b      	mov	r3, r1
 80009a4:	1ae8      	subs	r0, r5, r3
 80009a6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80009aa:	00e4      	lsls	r4, r4, #3
 80009ac:	581a      	ldr	r2, [r3, r0]
 80009ae:	f843 2b04 	str.w	r2, [r3], #4
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d1fa      	bne.n	80009ac <_Unwind_VRS_Pop+0xa0>
 80009b6:	4425      	add	r5, r4
 80009b8:	4638      	mov	r0, r7
 80009ba:	63b5      	str	r5, [r6, #56]	; 0x38
 80009bc:	f000 f906 	bl	8000bcc <__gnu_Unwind_Restore_WMMXD>
 80009c0:	2000      	movs	r0, #0
 80009c2:	b043      	add	sp, #268	; 0x10c
 80009c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009c8:	2c01      	cmp	r4, #1
 80009ca:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80009ce:	b295      	uxth	r5, r2
 80009d0:	d05a      	beq.n	8000a88 <_Unwind_VRS_Pop+0x17c>
 80009d2:	2c05      	cmp	r4, #5
 80009d4:	d15c      	bne.n	8000a90 <_Unwind_VRS_Pop+0x184>
 80009d6:	eb08 0905 	add.w	r9, r8, r5
 80009da:	f1b9 0f20 	cmp.w	r9, #32
 80009de:	d857      	bhi.n	8000a90 <_Unwind_VRS_Pop+0x184>
 80009e0:	f1b8 0f0f 	cmp.w	r8, #15
 80009e4:	d977      	bls.n	8000ad6 <_Unwind_VRS_Pop+0x1ca>
 80009e6:	46a9      	mov	r9, r5
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	f040 8088 	bne.w	8000afe <_Unwind_VRS_Pop+0x1f2>
 80009ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80009f0:	b36d      	cbz	r5, 8000a4e <_Unwind_VRS_Pop+0x142>
 80009f2:	af20      	add	r7, sp, #128	; 0x80
 80009f4:	f04f 0900 	mov.w	r9, #0
 80009f8:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80009fc:	3f04      	subs	r7, #4
 80009fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000a02:	f853 1b04 	ldr.w	r1, [r3], #4
 8000a06:	f847 1f04 	str.w	r1, [r7, #4]!
 8000a0a:	42ab      	cmp	r3, r5
 8000a0c:	d1f9      	bne.n	8000a02 <_Unwind_VRS_Pop+0xf6>
 8000a0e:	f1b9 0f00 	cmp.w	r9, #0
 8000a12:	d00f      	beq.n	8000a34 <_Unwind_VRS_Pop+0x128>
 8000a14:	466f      	mov	r7, sp
 8000a16:	4641      	mov	r1, r8
 8000a18:	2910      	cmp	r1, #16
 8000a1a:	bf38      	it	cc
 8000a1c:	2110      	movcc	r1, #16
 8000a1e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000a22:	3984      	subs	r1, #132	; 0x84
 8000a24:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000a28:	f853 0b04 	ldr.w	r0, [r3], #4
 8000a2c:	f841 0f04 	str.w	r0, [r1, #4]!
 8000a30:	42ab      	cmp	r3, r5
 8000a32:	d1f9      	bne.n	8000a28 <_Unwind_VRS_Pop+0x11c>
 8000a34:	2c01      	cmp	r4, #1
 8000a36:	f000 8084 	beq.w	8000b42 <_Unwind_VRS_Pop+0x236>
 8000a3a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a3e:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a40:	d945      	bls.n	8000ace <_Unwind_VRS_Pop+0x1c2>
 8000a42:	f1b9 0f00 	cmp.w	r9, #0
 8000a46:	d002      	beq.n	8000a4e <_Unwind_VRS_Pop+0x142>
 8000a48:	4668      	mov	r0, sp
 8000a4a:	f000 f8b7 	bl	8000bbc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a4e:	2000      	movs	r0, #0
 8000a50:	b043      	add	sp, #268	; 0x10c
 8000a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a56:	b9dc      	cbnz	r4, 8000a90 <_Unwind_VRS_Pop+0x184>
 8000a58:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000a5a:	4623      	mov	r3, r4
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	b294      	uxth	r4, r2
 8000a60:	f106 0c04 	add.w	ip, r6, #4
 8000a64:	fa00 f203 	lsl.w	r2, r0, r3
 8000a68:	4222      	tst	r2, r4
 8000a6a:	4639      	mov	r1, r7
 8000a6c:	d004      	beq.n	8000a78 <_Unwind_VRS_Pop+0x16c>
 8000a6e:	f851 2b04 	ldr.w	r2, [r1], #4
 8000a72:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8000a76:	460f      	mov	r7, r1
 8000a78:	3301      	adds	r3, #1
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d1f2      	bne.n	8000a64 <_Unwind_VRS_Pop+0x158>
 8000a7e:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000a82:	d1e4      	bne.n	8000a4e <_Unwind_VRS_Pop+0x142>
 8000a84:	63b7      	str	r7, [r6, #56]	; 0x38
 8000a86:	e004      	b.n	8000a92 <_Unwind_VRS_Pop+0x186>
 8000a88:	eb08 0305 	add.w	r3, r8, r5
 8000a8c:	2b10      	cmp	r3, #16
 8000a8e:	d903      	bls.n	8000a98 <_Unwind_VRS_Pop+0x18c>
 8000a90:	2002      	movs	r0, #2
 8000a92:	b043      	add	sp, #268	; 0x10c
 8000a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a98:	f1b8 0f0f 	cmp.w	r8, #15
 8000a9c:	d8f8      	bhi.n	8000a90 <_Unwind_VRS_Pop+0x184>
 8000a9e:	6833      	ldr	r3, [r6, #0]
 8000aa0:	07da      	lsls	r2, r3, #31
 8000aa2:	d506      	bpl.n	8000ab2 <_Unwind_VRS_Pop+0x1a6>
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	f023 0303 	bic.w	r3, r3, #3
 8000aaa:	f840 3b48 	str.w	r3, [r0], #72
 8000aae:	f000 f879 	bl	8000ba4 <__gnu_Unwind_Save_VFP>
 8000ab2:	af20      	add	r7, sp, #128	; 0x80
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	f000 f875 	bl	8000ba4 <__gnu_Unwind_Save_VFP>
 8000aba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000abc:	2d00      	cmp	r5, #0
 8000abe:	d199      	bne.n	80009f4 <_Unwind_VRS_Pop+0xe8>
 8000ac0:	461d      	mov	r5, r3
 8000ac2:	3504      	adds	r5, #4
 8000ac4:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ac6:	4638      	mov	r0, r7
 8000ac8:	f000 f868 	bl	8000b9c <__gnu_Unwind_Restore_VFP>
 8000acc:	e7bf      	b.n	8000a4e <_Unwind_VRS_Pop+0x142>
 8000ace:	a820      	add	r0, sp, #128	; 0x80
 8000ad0:	f000 f86c 	bl	8000bac <__gnu_Unwind_Restore_VFP_D>
 8000ad4:	e7b5      	b.n	8000a42 <_Unwind_VRS_Pop+0x136>
 8000ad6:	f1b9 0f10 	cmp.w	r9, #16
 8000ada:	d940      	bls.n	8000b5e <_Unwind_VRS_Pop+0x252>
 8000adc:	f1a9 0910 	sub.w	r9, r9, #16
 8000ae0:	6833      	ldr	r3, [r6, #0]
 8000ae2:	07d9      	lsls	r1, r3, #31
 8000ae4:	d508      	bpl.n	8000af8 <_Unwind_VRS_Pop+0x1ec>
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	4630      	mov	r0, r6
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	f840 3b48 	str.w	r3, [r0], #72
 8000af4:	f000 f85e 	bl	8000bb4 <__gnu_Unwind_Save_VFP_D>
 8000af8:	f1b9 0f00 	cmp.w	r9, #0
 8000afc:	d032      	beq.n	8000b64 <_Unwind_VRS_Pop+0x258>
 8000afe:	6833      	ldr	r3, [r6, #0]
 8000b00:	075a      	lsls	r2, r3, #29
 8000b02:	d420      	bmi.n	8000b46 <_Unwind_VRS_Pop+0x23a>
 8000b04:	f1b8 0f0f 	cmp.w	r8, #15
 8000b08:	d925      	bls.n	8000b56 <_Unwind_VRS_Pop+0x24a>
 8000b0a:	466f      	mov	r7, sp
 8000b0c:	4638      	mov	r0, r7
 8000b0e:	f1c8 0510 	rsb	r5, r8, #16
 8000b12:	f000 f857 	bl	8000bc4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b1a:	f77f af7c 	ble.w	8000a16 <_Unwind_VRS_Pop+0x10a>
 8000b1e:	af20      	add	r7, sp, #128	; 0x80
 8000b20:	e76a      	b.n	80009f8 <_Unwind_VRS_Pop+0xec>
 8000b22:	f023 0310 	bic.w	r3, r3, #16
 8000b26:	6033      	str	r3, [r6, #0]
 8000b28:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000b2c:	f000 f89c 	bl	8000c68 <__gnu_Unwind_Save_WMMXC>
 8000b30:	e704      	b.n	800093c <_Unwind_VRS_Pop+0x30>
 8000b32:	f023 0308 	bic.w	r3, r3, #8
 8000b36:	6003      	str	r3, [r0, #0]
 8000b38:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000b3c:	f000 f868 	bl	8000c10 <__gnu_Unwind_Save_WMMXD>
 8000b40:	e727      	b.n	8000992 <_Unwind_VRS_Pop+0x86>
 8000b42:	af20      	add	r7, sp, #128	; 0x80
 8000b44:	e7bd      	b.n	8000ac2 <_Unwind_VRS_Pop+0x1b6>
 8000b46:	4630      	mov	r0, r6
 8000b48:	f023 0304 	bic.w	r3, r3, #4
 8000b4c:	f840 3bd0 	str.w	r3, [r0], #208
 8000b50:	f000 f838 	bl	8000bc4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b54:	e7d6      	b.n	8000b04 <_Unwind_VRS_Pop+0x1f8>
 8000b56:	a820      	add	r0, sp, #128	; 0x80
 8000b58:	f000 f82c 	bl	8000bb4 <__gnu_Unwind_Save_VFP_D>
 8000b5c:	e7d5      	b.n	8000b0a <_Unwind_VRS_Pop+0x1fe>
 8000b5e:	f04f 0900 	mov.w	r9, #0
 8000b62:	e7bd      	b.n	8000ae0 <_Unwind_VRS_Pop+0x1d4>
 8000b64:	f1b8 0f0f 	cmp.w	r8, #15
 8000b68:	f63f af41 	bhi.w	80009ee <_Unwind_VRS_Pop+0xe2>
 8000b6c:	af20      	add	r7, sp, #128	; 0x80
 8000b6e:	4638      	mov	r0, r7
 8000b70:	f000 f820 	bl	8000bb4 <__gnu_Unwind_Save_VFP_D>
 8000b74:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	f47f af3c 	bne.w	80009f4 <_Unwind_VRS_Pop+0xe8>
 8000b7c:	4638      	mov	r0, r7
 8000b7e:	f000 f815 	bl	8000bac <__gnu_Unwind_Restore_VFP_D>
 8000b82:	e764      	b.n	8000a4e <_Unwind_VRS_Pop+0x142>

08000b84 <__restore_core_regs>:
 8000b84:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b88:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b8c:	469c      	mov	ip, r3
 8000b8e:	46a6      	mov	lr, r4
 8000b90:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b94:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b98:	46e5      	mov	sp, ip
 8000b9a:	bd00      	pop	{pc}

08000b9c <__gnu_Unwind_Restore_VFP>:
 8000b9c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__gnu_Unwind_Save_VFP>:
 8000ba4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__gnu_Unwind_Restore_VFP_D>:
 8000bac:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__gnu_Unwind_Save_VFP_D>:
 8000bb4:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000bbc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000bc4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__gnu_Unwind_Restore_WMMXD>:
 8000bcc:	ecf0 0102 	ldfe	f0, [r0], #8
 8000bd0:	ecf0 1102 	ldfe	f1, [r0], #8
 8000bd4:	ecf0 2102 	ldfe	f2, [r0], #8
 8000bd8:	ecf0 3102 	ldfe	f3, [r0], #8
 8000bdc:	ecf0 4102 	ldfe	f4, [r0], #8
 8000be0:	ecf0 5102 	ldfe	f5, [r0], #8
 8000be4:	ecf0 6102 	ldfe	f6, [r0], #8
 8000be8:	ecf0 7102 	ldfe	f7, [r0], #8
 8000bec:	ecf0 8102 	ldfp	f0, [r0], #8
 8000bf0:	ecf0 9102 	ldfp	f1, [r0], #8
 8000bf4:	ecf0 a102 	ldfp	f2, [r0], #8
 8000bf8:	ecf0 b102 	ldfp	f3, [r0], #8
 8000bfc:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c00:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c04:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c08:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__gnu_Unwind_Save_WMMXD>:
 8000c10:	ece0 0102 	stfe	f0, [r0], #8
 8000c14:	ece0 1102 	stfe	f1, [r0], #8
 8000c18:	ece0 2102 	stfe	f2, [r0], #8
 8000c1c:	ece0 3102 	stfe	f3, [r0], #8
 8000c20:	ece0 4102 	stfe	f4, [r0], #8
 8000c24:	ece0 5102 	stfe	f5, [r0], #8
 8000c28:	ece0 6102 	stfe	f6, [r0], #8
 8000c2c:	ece0 7102 	stfe	f7, [r0], #8
 8000c30:	ece0 8102 	stfp	f0, [r0], #8
 8000c34:	ece0 9102 	stfp	f1, [r0], #8
 8000c38:	ece0 a102 	stfp	f2, [r0], #8
 8000c3c:	ece0 b102 	stfp	f3, [r0], #8
 8000c40:	ece0 c102 	stfp	f4, [r0], #8
 8000c44:	ece0 d102 	stfp	f5, [r0], #8
 8000c48:	ece0 e102 	stfp	f6, [r0], #8
 8000c4c:	ece0 f102 	stfp	f7, [r0], #8
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Restore_WMMXC>:
 8000c54:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c58:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c5c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c60:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__gnu_Unwind_Save_WMMXC>:
 8000c68:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c6c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c70:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c74:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <_Unwind_RaiseException>:
 8000c7c:	46ec      	mov	ip, sp
 8000c7e:	b500      	push	{lr}
 8000c80:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c84:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c90:	a901      	add	r1, sp, #4
 8000c92:	f7ff fbf1 	bl	8000478 <__gnu_Unwind_RaiseException>
 8000c96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c9a:	b012      	add	sp, #72	; 0x48
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <_Unwind_Resume>:
 8000ca0:	46ec      	mov	ip, sp
 8000ca2:	b500      	push	{lr}
 8000ca4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ca8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cb4:	a901      	add	r1, sp, #4
 8000cb6:	f7ff fc19 	bl	80004ec <__gnu_Unwind_Resume>
 8000cba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cbe:	b012      	add	sp, #72	; 0x48
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <_Unwind_Resume_or_Rethrow>:
 8000cc4:	46ec      	mov	ip, sp
 8000cc6:	b500      	push	{lr}
 8000cc8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ccc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cd8:	a901      	add	r1, sp, #4
 8000cda:	f7ff fc29 	bl	8000530 <__gnu_Unwind_Resume_or_Rethrow>
 8000cde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ce2:	b012      	add	sp, #72	; 0x48
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <_Unwind_ForcedUnwind>:
 8000ce8:	46ec      	mov	ip, sp
 8000cea:	b500      	push	{lr}
 8000cec:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cf0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cfc:	ab01      	add	r3, sp, #4
 8000cfe:	f7ff fbeb 	bl	80004d8 <__gnu_Unwind_ForcedUnwind>
 8000d02:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d06:	b012      	add	sp, #72	; 0x48
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <_Unwind_Backtrace>:
 8000d0c:	46ec      	mov	ip, sp
 8000d0e:	b500      	push	{lr}
 8000d10:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d14:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d20:	aa01      	add	r2, sp, #4
 8000d22:	f7ff fc5d 	bl	80005e0 <__gnu_Unwind_Backtrace>
 8000d26:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d2a:	b012      	add	sp, #72	; 0x48
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <next_unwind_byte>:
 8000d30:	7a02      	ldrb	r2, [r0, #8]
 8000d32:	b97a      	cbnz	r2, 8000d54 <next_unwind_byte+0x24>
 8000d34:	7a43      	ldrb	r3, [r0, #9]
 8000d36:	b1a3      	cbz	r3, 8000d62 <next_unwind_byte+0x32>
 8000d38:	6842      	ldr	r2, [r0, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	b410      	push	{r4}
 8000d3e:	7243      	strb	r3, [r0, #9]
 8000d40:	6813      	ldr	r3, [r2, #0]
 8000d42:	2103      	movs	r1, #3
 8000d44:	1d14      	adds	r4, r2, #4
 8000d46:	7201      	strb	r1, [r0, #8]
 8000d48:	021a      	lsls	r2, r3, #8
 8000d4a:	6044      	str	r4, [r0, #4]
 8000d4c:	6002      	str	r2, [r0, #0]
 8000d4e:	bc10      	pop	{r4}
 8000d50:	0e18      	lsrs	r0, r3, #24
 8000d52:	4770      	bx	lr
 8000d54:	6803      	ldr	r3, [r0, #0]
 8000d56:	3a01      	subs	r2, #1
 8000d58:	7202      	strb	r2, [r0, #8]
 8000d5a:	021a      	lsls	r2, r3, #8
 8000d5c:	6002      	str	r2, [r0, #0]
 8000d5e:	0e18      	lsrs	r0, r3, #24
 8000d60:	4770      	bx	lr
 8000d62:	20b0      	movs	r0, #176	; 0xb0
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <_Unwind_GetGR.constprop.0>:
 8000d68:	b500      	push	{lr}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	aa03      	add	r2, sp, #12
 8000d6e:	2300      	movs	r3, #0
 8000d70:	9200      	str	r2, [sp, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	220c      	movs	r2, #12
 8000d76:	f7ff fbeb 	bl	8000550 <_Unwind_VRS_Get>
 8000d7a:	9803      	ldr	r0, [sp, #12]
 8000d7c:	b005      	add	sp, #20
 8000d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d82:	bf00      	nop

08000d84 <unwind_UCB_from_context>:
 8000d84:	e7f0      	b.n	8000d68 <_Unwind_GetGR.constprop.0>
 8000d86:	bf00      	nop

08000d88 <__gnu_unwind_execute>:
 8000d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d8c:	4605      	mov	r5, r0
 8000d8e:	b085      	sub	sp, #20
 8000d90:	460e      	mov	r6, r1
 8000d92:	f04f 0800 	mov.w	r8, #0
 8000d96:	4630      	mov	r0, r6
 8000d98:	f7ff ffca 	bl	8000d30 <next_unwind_byte>
 8000d9c:	28b0      	cmp	r0, #176	; 0xb0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	f000 80b2 	beq.w	8000f08 <__gnu_unwind_execute+0x180>
 8000da4:	0607      	lsls	r7, r0, #24
 8000da6:	d520      	bpl.n	8000dea <__gnu_unwind_execute+0x62>
 8000da8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000dac:	2b80      	cmp	r3, #128	; 0x80
 8000dae:	d04d      	beq.n	8000e4c <__gnu_unwind_execute+0xc4>
 8000db0:	2b90      	cmp	r3, #144	; 0x90
 8000db2:	d036      	beq.n	8000e22 <__gnu_unwind_execute+0x9a>
 8000db4:	2ba0      	cmp	r3, #160	; 0xa0
 8000db6:	d060      	beq.n	8000e7a <__gnu_unwind_execute+0xf2>
 8000db8:	2bb0      	cmp	r3, #176	; 0xb0
 8000dba:	d074      	beq.n	8000ea6 <__gnu_unwind_execute+0x11e>
 8000dbc:	2bc0      	cmp	r3, #192	; 0xc0
 8000dbe:	f000 808b 	beq.w	8000ed8 <__gnu_unwind_execute+0x150>
 8000dc2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000dc6:	2bd0      	cmp	r3, #208	; 0xd0
 8000dc8:	d10b      	bne.n	8000de2 <__gnu_unwind_execute+0x5a>
 8000dca:	f000 0207 	and.w	r2, r0, #7
 8000dce:	3201      	adds	r2, #1
 8000dd0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4628      	mov	r0, r5
 8000dda:	f7ff fd97 	bl	800090c <_Unwind_VRS_Pop>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d0d9      	beq.n	8000d96 <__gnu_unwind_execute+0xe>
 8000de2:	2009      	movs	r0, #9
 8000de4:	b005      	add	sp, #20
 8000de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dea:	f10d 090c 	add.w	r9, sp, #12
 8000dee:	2300      	movs	r3, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	0087      	lsls	r7, r0, #2
 8000df4:	f8cd 9000 	str.w	r9, [sp]
 8000df8:	220d      	movs	r2, #13
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f7ff fba8 	bl	8000550 <_Unwind_VRS_Get>
 8000e00:	b2ff      	uxtb	r7, r7
 8000e02:	9b03      	ldr	r3, [sp, #12]
 8000e04:	f8cd 9000 	str.w	r9, [sp]
 8000e08:	3704      	adds	r7, #4
 8000e0a:	0660      	lsls	r0, r4, #25
 8000e0c:	bf4c      	ite	mi
 8000e0e:	1bdf      	submi	r7, r3, r7
 8000e10:	18ff      	addpl	r7, r7, r3
 8000e12:	2300      	movs	r3, #0
 8000e14:	4619      	mov	r1, r3
 8000e16:	220d      	movs	r2, #13
 8000e18:	4628      	mov	r0, r5
 8000e1a:	9703      	str	r7, [sp, #12]
 8000e1c:	f7ff fbbc 	bl	8000598 <_Unwind_VRS_Set>
 8000e20:	e7b9      	b.n	8000d96 <__gnu_unwind_execute+0xe>
 8000e22:	f000 030d 	and.w	r3, r0, #13
 8000e26:	2b0d      	cmp	r3, #13
 8000e28:	d0db      	beq.n	8000de2 <__gnu_unwind_execute+0x5a>
 8000e2a:	af03      	add	r7, sp, #12
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f000 020f 	and.w	r2, r0, #15
 8000e32:	4619      	mov	r1, r3
 8000e34:	9700      	str	r7, [sp, #0]
 8000e36:	4628      	mov	r0, r5
 8000e38:	f7ff fb8a 	bl	8000550 <_Unwind_VRS_Get>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9700      	str	r7, [sp, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	220d      	movs	r2, #13
 8000e44:	4628      	mov	r0, r5
 8000e46:	f7ff fba7 	bl	8000598 <_Unwind_VRS_Set>
 8000e4a:	e7a4      	b.n	8000d96 <__gnu_unwind_execute+0xe>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f7ff ff6f 	bl	8000d30 <next_unwind_byte>
 8000e52:	0224      	lsls	r4, r4, #8
 8000e54:	4320      	orrs	r0, r4
 8000e56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e5a:	d0c2      	beq.n	8000de2 <__gnu_unwind_execute+0x5a>
 8000e5c:	0104      	lsls	r4, r0, #4
 8000e5e:	2300      	movs	r3, #0
 8000e60:	b2a2      	uxth	r2, r4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4628      	mov	r0, r5
 8000e66:	f7ff fd51 	bl	800090c <_Unwind_VRS_Pop>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d1b9      	bne.n	8000de2 <__gnu_unwind_execute+0x5a>
 8000e6e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e72:	bf18      	it	ne
 8000e74:	f04f 0801 	movne.w	r8, #1
 8000e78:	e78d      	b.n	8000d96 <__gnu_unwind_execute+0xe>
 8000e7a:	43c2      	mvns	r2, r0
 8000e7c:	f002 0307 	and.w	r3, r2, #7
 8000e80:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e84:	411a      	asrs	r2, r3
 8000e86:	0701      	lsls	r1, r0, #28
 8000e88:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	bf48      	it	mi
 8000e92:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e96:	4619      	mov	r1, r3
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f7ff fd37 	bl	800090c <_Unwind_VRS_Pop>
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	f43f af79 	beq.w	8000d96 <__gnu_unwind_execute+0xe>
 8000ea4:	e79d      	b.n	8000de2 <__gnu_unwind_execute+0x5a>
 8000ea6:	28b1      	cmp	r0, #177	; 0xb1
 8000ea8:	d033      	beq.n	8000f12 <__gnu_unwind_execute+0x18a>
 8000eaa:	28b2      	cmp	r0, #178	; 0xb2
 8000eac:	f000 808b 	beq.w	8000fc6 <__gnu_unwind_execute+0x23e>
 8000eb0:	28b3      	cmp	r0, #179	; 0xb3
 8000eb2:	d039      	beq.n	8000f28 <__gnu_unwind_execute+0x1a0>
 8000eb4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000eb8:	2bb4      	cmp	r3, #180	; 0xb4
 8000eba:	d092      	beq.n	8000de2 <__gnu_unwind_execute+0x5a>
 8000ebc:	f000 0207 	and.w	r2, r0, #7
 8000ec0:	3201      	adds	r2, #1
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4628      	mov	r0, r5
 8000ecc:	f7ff fd1e 	bl	800090c <_Unwind_VRS_Pop>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	f43f af60 	beq.w	8000d96 <__gnu_unwind_execute+0xe>
 8000ed6:	e784      	b.n	8000de2 <__gnu_unwind_execute+0x5a>
 8000ed8:	28c6      	cmp	r0, #198	; 0xc6
 8000eda:	d042      	beq.n	8000f62 <__gnu_unwind_execute+0x1da>
 8000edc:	28c7      	cmp	r0, #199	; 0xc7
 8000ede:	d04c      	beq.n	8000f7a <__gnu_unwind_execute+0x1f2>
 8000ee0:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000ee4:	2bc0      	cmp	r3, #192	; 0xc0
 8000ee6:	d05b      	beq.n	8000fa0 <__gnu_unwind_execute+0x218>
 8000ee8:	28c8      	cmp	r0, #200	; 0xc8
 8000eea:	d060      	beq.n	8000fae <__gnu_unwind_execute+0x226>
 8000eec:	28c9      	cmp	r0, #201	; 0xc9
 8000eee:	f47f af78 	bne.w	8000de2 <__gnu_unwind_execute+0x5a>
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	f7ff ff1c 	bl	8000d30 <next_unwind_byte>
 8000ef8:	0302      	lsls	r2, r0, #12
 8000efa:	f000 000f 	and.w	r0, r0, #15
 8000efe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f02:	3001      	adds	r0, #1
 8000f04:	4302      	orrs	r2, r0
 8000f06:	e765      	b.n	8000dd4 <__gnu_unwind_execute+0x4c>
 8000f08:	f1b8 0f00 	cmp.w	r8, #0
 8000f0c:	d018      	beq.n	8000f40 <__gnu_unwind_execute+0x1b8>
 8000f0e:	2000      	movs	r0, #0
 8000f10:	e768      	b.n	8000de4 <__gnu_unwind_execute+0x5c>
 8000f12:	4630      	mov	r0, r6
 8000f14:	f7ff ff0c 	bl	8000d30 <next_unwind_byte>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	f43f af61 	beq.w	8000de2 <__gnu_unwind_execute+0x5a>
 8000f20:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f24:	d0d0      	beq.n	8000ec8 <__gnu_unwind_execute+0x140>
 8000f26:	e75c      	b.n	8000de2 <__gnu_unwind_execute+0x5a>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f7ff ff01 	bl	8000d30 <next_unwind_byte>
 8000f2e:	0301      	lsls	r1, r0, #12
 8000f30:	f000 000f 	and.w	r0, r0, #15
 8000f34:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f38:	1c42      	adds	r2, r0, #1
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	e7c3      	b.n	8000ec8 <__gnu_unwind_execute+0x140>
 8000f40:	ac03      	add	r4, sp, #12
 8000f42:	4643      	mov	r3, r8
 8000f44:	220e      	movs	r2, #14
 8000f46:	4641      	mov	r1, r8
 8000f48:	9400      	str	r4, [sp, #0]
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	f7ff fb00 	bl	8000550 <_Unwind_VRS_Get>
 8000f50:	9400      	str	r4, [sp, #0]
 8000f52:	4628      	mov	r0, r5
 8000f54:	4643      	mov	r3, r8
 8000f56:	220f      	movs	r2, #15
 8000f58:	4641      	mov	r1, r8
 8000f5a:	f7ff fb1d 	bl	8000598 <_Unwind_VRS_Set>
 8000f5e:	4640      	mov	r0, r8
 8000f60:	e740      	b.n	8000de4 <__gnu_unwind_execute+0x5c>
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff fee4 	bl	8000d30 <next_unwind_byte>
 8000f68:	0301      	lsls	r1, r0, #12
 8000f6a:	f000 000f 	and.w	r0, r0, #15
 8000f6e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f72:	1c42      	adds	r2, r0, #1
 8000f74:	2303      	movs	r3, #3
 8000f76:	430a      	orrs	r2, r1
 8000f78:	e7a6      	b.n	8000ec8 <__gnu_unwind_execute+0x140>
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	f7ff fed8 	bl	8000d30 <next_unwind_byte>
 8000f80:	4602      	mov	r2, r0
 8000f82:	2800      	cmp	r0, #0
 8000f84:	f43f af2d 	beq.w	8000de2 <__gnu_unwind_execute+0x5a>
 8000f88:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f8c:	f47f af29 	bne.w	8000de2 <__gnu_unwind_execute+0x5a>
 8000f90:	2104      	movs	r1, #4
 8000f92:	4628      	mov	r0, r5
 8000f94:	f7ff fcba 	bl	800090c <_Unwind_VRS_Pop>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	f43f aefc 	beq.w	8000d96 <__gnu_unwind_execute+0xe>
 8000f9e:	e720      	b.n	8000de2 <__gnu_unwind_execute+0x5a>
 8000fa0:	f000 020f 	and.w	r2, r0, #15
 8000fa4:	3201      	adds	r2, #1
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fac:	e78c      	b.n	8000ec8 <__gnu_unwind_execute+0x140>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	f7ff febe 	bl	8000d30 <next_unwind_byte>
 8000fb4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000fb8:	f000 030f 	and.w	r3, r0, #15
 8000fbc:	3210      	adds	r2, #16
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8000fc4:	e706      	b.n	8000dd4 <__gnu_unwind_execute+0x4c>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f10d 090c 	add.w	r9, sp, #12
 8000fcc:	220d      	movs	r2, #13
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f8cd 9000 	str.w	r9, [sp]
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f7ff fabb 	bl	8000550 <_Unwind_VRS_Get>
 8000fda:	4630      	mov	r0, r6
 8000fdc:	f7ff fea8 	bl	8000d30 <next_unwind_byte>
 8000fe0:	0602      	lsls	r2, r0, #24
 8000fe2:	f04f 0702 	mov.w	r7, #2
 8000fe6:	d50c      	bpl.n	8001002 <__gnu_unwind_execute+0x27a>
 8000fe8:	9b03      	ldr	r3, [sp, #12]
 8000fea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000fee:	40b8      	lsls	r0, r7
 8000ff0:	4403      	add	r3, r0
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	9303      	str	r3, [sp, #12]
 8000ff6:	f7ff fe9b 	bl	8000d30 <next_unwind_byte>
 8000ffa:	0603      	lsls	r3, r0, #24
 8000ffc:	f107 0707 	add.w	r7, r7, #7
 8001000:	d4f2      	bmi.n	8000fe8 <__gnu_unwind_execute+0x260>
 8001002:	9b03      	ldr	r3, [sp, #12]
 8001004:	f8cd 9000 	str.w	r9, [sp]
 8001008:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 800100c:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001010:	40bc      	lsls	r4, r7
 8001012:	2300      	movs	r3, #0
 8001014:	4414      	add	r4, r2
 8001016:	4619      	mov	r1, r3
 8001018:	220d      	movs	r2, #13
 800101a:	4628      	mov	r0, r5
 800101c:	9403      	str	r4, [sp, #12]
 800101e:	f7ff fabb 	bl	8000598 <_Unwind_VRS_Set>
 8001022:	e6b8      	b.n	8000d96 <__gnu_unwind_execute+0xe>

08001024 <__gnu_unwind_frame>:
 8001024:	b510      	push	{r4, lr}
 8001026:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001028:	b084      	sub	sp, #16
 800102a:	6853      	ldr	r3, [r2, #4]
 800102c:	2403      	movs	r4, #3
 800102e:	f88d 400c 	strb.w	r4, [sp, #12]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	f102 0408 	add.w	r4, r2, #8
 8001038:	4608      	mov	r0, r1
 800103a:	79d2      	ldrb	r2, [r2, #7]
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	a901      	add	r1, sp, #4
 8001040:	9402      	str	r4, [sp, #8]
 8001042:	f88d 200d 	strb.w	r2, [sp, #13]
 8001046:	f7ff fe9f 	bl	8000d88 <__gnu_unwind_execute>
 800104a:	b004      	add	sp, #16
 800104c:	bd10      	pop	{r4, pc}
 800104e:	bf00      	nop

08001050 <_Unwind_GetRegionStart>:
 8001050:	b508      	push	{r3, lr}
 8001052:	f7ff fe97 	bl	8000d84 <unwind_UCB_from_context>
 8001056:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001058:	bd08      	pop	{r3, pc}
 800105a:	bf00      	nop

0800105c <_Unwind_GetLanguageSpecificData>:
 800105c:	b508      	push	{r3, lr}
 800105e:	f7ff fe91 	bl	8000d84 <unwind_UCB_from_context>
 8001062:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001064:	79c3      	ldrb	r3, [r0, #7]
 8001066:	3302      	adds	r3, #2
 8001068:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800106c:	bd08      	pop	{r3, pc}
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001074:	f000 fb23 	bl	80016be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001078:	f000 f809 	bl	800108e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107c:	f000 f8f8 	bl	8001270 <_ZL12MX_GPIO_Initv>
  MX_RNG_Init();
 8001080:	f000 f85a 	bl	8001138 <_ZL11MX_RNG_Initv>
  MX_SPI1_Init();
 8001084:	f000 f870 	bl	8001168 <_ZL12MX_SPI1_Initv>
  MX_TIM6_Init();
 8001088:	f000 f8b0 	bl	80011ec <_ZL12MX_TIM6_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800108c:	e7fe      	b.n	800108c <main+0x1c>

0800108e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b096      	sub	sp, #88	; 0x58
 8001092:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2244      	movs	r2, #68	; 0x44
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fa15 	bl	80034cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010b4:	f000 fe46 	bl	8001d44 <HAL_PWREx_ControlVoltageScaling>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf14      	ite	ne
 80010be:	2301      	movne	r3, #1
 80010c0:	2300      	moveq	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80010c8:	f000 f97e 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010cc:	2310      	movs	r3, #16
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80010d8:	23b0      	movs	r3, #176	; 0xb0
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fe83 	bl	8001df0 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf14      	ite	ne
 80010f0:	2301      	movne	r3, #1
 80010f2:	2300      	moveq	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80010fa:	f000 f965 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	2102      	movs	r1, #2
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fad0 	bl	80026bc <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf14      	ite	ne
 8001122:	2301      	movne	r3, #1
 8001124:	2300      	moveq	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800112c:	f000 f94c 	bl	80013c8 <Error_Handler>
  }
}
 8001130:	bf00      	nop
 8001132:	3758      	adds	r7, #88	; 0x58
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZL11MX_RNG_Initv>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <_ZL11MX_RNG_Initv+0x28>)
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <_ZL11MX_RNG_Initv+0x2c>)
 8001140:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <_ZL11MX_RNG_Initv+0x28>)
 8001144:	f001 fe0e 	bl	8002d64 <HAL_RNG_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <_ZL11MX_RNG_Initv+0x24>
  {
    Error_Handler();
 8001158:	f000 f936 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000008c 	.word	0x2000008c
 8001164:	50060800 	.word	0x50060800

08001168 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <_ZL12MX_SPI1_Initv+0x80>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001182:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001186:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80011b6:	2207      	movs	r2, #7
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80011c8:	f001 fe23 	bl	8002e12 <HAL_SPI_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80011dc:	f000 f8f4 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000009c 	.word	0x2000009c
 80011e8:	40013000 	.word	0x40013000

080011ec <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <_ZL12MX_TIM6_Initv+0x7c>)
 80011fe:	4a1b      	ldr	r2, [pc, #108]	; (800126c <_ZL12MX_TIM6_Initv+0x80>)
 8001200:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 500;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <_ZL12MX_TIM6_Initv+0x7c>)
 8001204:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001208:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <_ZL12MX_TIM6_Initv+0x7c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_ZL12MX_TIM6_Initv+0x7c>)
 8001212:	f241 7270 	movw	r2, #6000	; 0x1770
 8001216:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <_ZL12MX_TIM6_Initv+0x7c>)
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800121e:	4812      	ldr	r0, [pc, #72]	; (8001268 <_ZL12MX_TIM6_Initv+0x7c>)
 8001220:	f001 fe9a 	bl	8002f58 <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf14      	ite	ne
 800122a:	2301      	movne	r3, #1
 800122c:	2300      	moveq	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <_ZL12MX_TIM6_Initv+0x4c>
  {
    Error_Handler();
 8001234:	f000 f8c8 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	4619      	mov	r1, r3
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <_ZL12MX_TIM6_Initv+0x7c>)
 8001246:	f002 f893 	bl	8003370 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf14      	ite	ne
 8001250:	2301      	movne	r3, #1
 8001252:	2300      	moveq	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <_ZL12MX_TIM6_Initv+0x72>
  {
    Error_Handler();
 800125a:	f000 f8b5 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000100 	.word	0x20000100
 800126c:	40001000 	.word	0x40001000

08001270 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <_ZL12MX_GPIO_Initv+0x150>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <_ZL12MX_GPIO_Initv+0x150>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <_ZL12MX_GPIO_Initv+0x150>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b48      	ldr	r3, [pc, #288]	; (80013c0 <_ZL12MX_GPIO_Initv+0x150>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a47      	ldr	r2, [pc, #284]	; (80013c0 <_ZL12MX_GPIO_Initv+0x150>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <_ZL12MX_GPIO_Initv+0x150>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2150      	movs	r1, #80	; 0x50
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f000 fcf7 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2101      	movs	r1, #1
 80012c6:	483f      	ldr	r0, [pc, #252]	; (80013c4 <_ZL12MX_GPIO_Initv+0x154>)
 80012c8:	f000 fcf2 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012cc:	2310      	movs	r3, #16
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f000 fb71 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f2:	2302      	movs	r3, #2
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f000 fb62 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001308:	2301      	movs	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	4829      	ldr	r0, [pc, #164]	; (80013c4 <_ZL12MX_GPIO_Initv+0x154>)
 8001320:	f000 fb54 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001324:	2302      	movs	r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001328:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4822      	ldr	r0, [pc, #136]	; (80013c4 <_ZL12MX_GPIO_Initv+0x154>)
 800133a:	f000 fb47 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800133e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001344:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f000 fb38 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800135c:	23f0      	movs	r3, #240	; 0xf0
 800135e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001360:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001366:	2302      	movs	r3, #2
 8001368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4619      	mov	r1, r3
 8001370:	4814      	ldr	r0, [pc, #80]	; (80013c4 <_ZL12MX_GPIO_Initv+0x154>)
 8001372:	f000 fb2b 	bl	80019cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2007      	movs	r0, #7
 800137c:	f000 faef 	bl	800195e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001380:	2007      	movs	r0, #7
 8001382:	f000 fb08 	bl	8001996 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	200a      	movs	r0, #10
 800138c:	f000 fae7 	bl	800195e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001390:	200a      	movs	r0, #10
 8001392:	f000 fb00 	bl	8001996 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2017      	movs	r0, #23
 800139c:	f000 fadf 	bl	800195e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013a0:	2017      	movs	r0, #23
 80013a2:	f000 faf8 	bl	8001996 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2028      	movs	r0, #40	; 0x28
 80013ac:	f000 fad7 	bl	800195e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b0:	2028      	movs	r0, #40	; 0x28
 80013b2:	f000 faf0 	bl	8001996 <HAL_NVIC_EnableIRQ>

}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000400 	.word	0x48000400

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_MspInit+0x44>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_MspInit+0x44>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6613      	str	r3, [r2, #96]	; 0x60
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_MspInit+0x44>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x44>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x44>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6593      	str	r3, [r2, #88]	; 0x58
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x44>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b090      	sub	sp, #64	; 0x40
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2234      	movs	r2, #52	; 0x34
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f84d 	bl	80034cc <memset>
  if(hrng->Instance==RNG)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_RNG_MspInit+0x60>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d11b      	bne.n	8001474 <HAL_RNG_MspInit+0x58>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800143c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001440:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8001442:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fb03 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001458:	f7ff ffb6 	bl	80013c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_RNG_MspInit+0x64>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_RNG_MspInit+0x64>)
 8001462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001466:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_RNG_MspInit+0x64>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3740      	adds	r7, #64	; 0x40
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	50060800 	.word	0x50060800
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_SPI_MspInit+0x7c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d128      	bne.n	80014f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_SPI_MspInit+0x80>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	4a16      	ldr	r2, [pc, #88]	; (8001504 <HAL_SPI_MspInit+0x80>)
 80014ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b0:	6613      	str	r3, [r2, #96]	; 0x60
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_SPI_MspInit+0x80>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_SPI_MspInit+0x80>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_SPI_MspInit+0x80>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_SPI_MspInit+0x80>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014d6:	23a0      	movs	r3, #160	; 0xa0
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014e6:	2305      	movs	r3, #5
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f4:	f000 fa6a 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40013000 	.word	0x40013000
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_TIM_Base_MspInit+0x44>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d113      	bne.n	8001542 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6593      	str	r3, [r2, #88]	; 0x58
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2036      	movs	r0, #54	; 0x36
 8001538:	f000 fa11 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800153c:	2036      	movs	r0, #54	; 0x36
 800153e:	f000 fa2a 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40001000 	.word	0x40001000
 8001550:	40021000 	.word	0x40021000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 f8e2 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80015ac:	2002      	movs	r0, #2
 80015ae:	f000 fb97 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80015ba:	2010      	movs	r0, #16
 80015bc:	f000 fb90 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80015c8:	2020      	movs	r0, #32
 80015ca:	f000 fb89 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80015ce:	2040      	movs	r0, #64	; 0x40
 80015d0:	f000 fb86 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80015d4:	2080      	movs	r0, #128	; 0x80
 80015d6:	f000 fb83 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}

080015de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015e6:	f000 fb7b 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM6_IRQHandler+0x10>)
 80015f6:	f001 fd06 	bl	8003006 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000100 	.word	0x20000100

08001604 <_getpid>:
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
 8001608:	2301      	movs	r3, #1
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_kill>:
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	f001 ff2b 	bl	8003478 <__errno>
 8001622:	4603      	mov	r3, r0
 8001624:	2216      	movs	r2, #22
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_exit>:
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffe7 	bl	8001614 <_kill>
 8001646:	e7fe      	b.n	8001646 <_exit+0x12>

08001648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ffea 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	; (80016ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <LoopForever+0xe>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	; (80016b8 <LoopForever+0x16>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f001 fef3 	bl	8003484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800169e:	f7ff fce7 	bl	8001070 <main>

080016a2 <LoopForever>:

LoopForever:
    b LoopForever
 80016a2:	e7fe      	b.n	80016a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016b0:	0800370c 	.word	0x0800370c
  ldr r2, =_sbss
 80016b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016b8:	20000154 	.word	0x20000154

080016bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_2_IRQHandler>

080016be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 f93d 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f80e 	bl	80016f0 <HAL_InitTick>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	e001      	b.n	80016e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016e0:	f7ff fe78 	bl	80013d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016e4:	79fb      	ldrb	r3, [r7, #7]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_InitTick+0x6c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d023      	beq.n	800174c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_InitTick+0x70>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_InitTick+0x6c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001712:	fbb3 f3f1 	udiv	r3, r3, r1
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f949 	bl	80019b2 <HAL_SYSTICK_Config>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10f      	bne.n	8001746 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d809      	bhi.n	8001740 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001734:	f000 f913 	bl	800195e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_InitTick+0x74>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e007      	b.n	8001750 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	e004      	b.n	8001750 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e001      	b.n	8001750 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	2000014c 	.word	0x2000014c

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000014c 	.word	0x2000014c

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff29 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff3e 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff8e 	bl	800189c <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff31 	bl	800180c <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa2 	bl	8001904 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	e14e      	b.n	8001c7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8140 	beq.w	8001c74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d005      	beq.n	8001a0c <HAL_GPIO_Init+0x40>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0201 	and.w	r2, r3, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d017      	beq.n	8001aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d123      	bne.n	8001afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0203 	and.w	r2, r3, #3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 809a 	beq.w	8001c74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b40:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b44:	4a54      	ldr	r2, [pc, #336]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4c:	4b52      	ldr	r3, [pc, #328]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b58:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b82:	d013      	beq.n	8001bac <HAL_GPIO_Init+0x1e0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <HAL_GPIO_Init+0x2d4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_GPIO_Init+0x1dc>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a45      	ldr	r2, [pc, #276]	; (8001ca4 <HAL_GPIO_Init+0x2d8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x1d8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a44      	ldr	r2, [pc, #272]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_GPIO_Init+0x1d4>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e006      	b.n	8001bae <HAL_GPIO_Init+0x1e2>
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	e004      	b.n	8001bae <HAL_GPIO_Init+0x1e2>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x1e2>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_GPIO_Init+0x1e2>
 8001bac:	2300      	movs	r3, #0
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	f002 0203 	and.w	r2, r2, #3
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bbe:	4937      	ldr	r1, [pc, #220]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bcc:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bf0:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c1a:	4a24      	ldr	r2, [pc, #144]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c6e:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3301      	adds	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f47f aea9 	bne.w	80019dc <HAL_GPIO_Init+0x10>
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	48000c00 	.word	0x48000c00
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ccc:	e002      	b.n	8001cd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f806 	bl	8001d10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40007000 	.word	0x40007000

08001d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d52:	d130      	bne.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d60:	d038      	beq.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2232      	movs	r2, #50	; 0x32
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9b      	lsrs	r3, r3, #18
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d88:	e002      	b.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9c:	d102      	bne.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f2      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db0:	d110      	bne.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e00f      	b.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d007      	beq.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dcc:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40007000 	.word	0x40007000
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f000 bc56 	b.w	80026b0 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e04:	4ba1      	ldr	r3, [pc, #644]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0e:	4b9f      	ldr	r3, [pc, #636]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80e6 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4c>
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	f040 808d 	bne.w	8001f4e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	f040 8089 	bne.w	8001f4e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e3c:	4b93      	ldr	r3, [pc, #588]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_RCC_OscConfig+0x66>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f000 bc2d 	b.w	80026b0 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5a:	4b8c      	ldr	r3, [pc, #560]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_RCC_OscConfig+0x80>
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6e:	e005      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c>
 8001e70:	4b86      	ldr	r3, [pc, #536]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d224      	bcs.n	8001eca <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fd87 	bl	8002998 <RCC_SetFlashLatencyFromMSIRange>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f000 bc0d 	b.w	80026b0 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e96:	4b7d      	ldr	r3, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7c      	ldr	r2, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b7a      	ldr	r3, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	4977      	ldr	r1, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	4972      	ldr	r1, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	e025      	b.n	8001f16 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eca:	4b70      	ldr	r3, [pc, #448]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6f      	ldr	r2, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b6d      	ldr	r3, [pc, #436]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	496a      	ldr	r1, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	4965      	ldr	r1, [pc, #404]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fd46 	bl	8002998 <RCC_SetFlashLatencyFromMSIRange>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e3cc      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f16:	f000 fcb3 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b5b      	ldr	r3, [pc, #364]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	495a      	ldr	r1, [pc, #360]	; (8002090 <HAL_RCC_OscConfig+0x2a0>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f36:	4b58      	ldr	r3, [pc, #352]	; (8002098 <HAL_RCC_OscConfig+0x2a8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fbd8 	bl	80016f0 <HAL_InitTick>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d052      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	e3b0      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d032      	beq.n	8001fbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a4c      	ldr	r2, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fc15 	bl	8001790 <HAL_GetTick>
 8001f66:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fc11 	bl	8001790 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e399      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f7c:	4b43      	ldr	r3, [pc, #268]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f88:	4b40      	ldr	r3, [pc, #256]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a3f      	ldr	r2, [pc, #252]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001f8e:	f043 0308 	orr.w	r3, r3, #8
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	493a      	ldr	r1, [pc, #232]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	4935      	ldr	r1, [pc, #212]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
 8001fba:	e01a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fbe2 	bl	8001790 <HAL_GetTick>
 8001fcc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fbde 	bl	8001790 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e366      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1e0>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d073      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x220>
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d10e      	bne.n	8002028 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d10b      	bne.n	8002028 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d063      	beq.n	80020e4 <HAL_RCC_OscConfig+0x2f4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d15f      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e343      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002030:	d106      	bne.n	8002040 <HAL_RCC_OscConfig+0x250>
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0x28c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x274>
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x28c>
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a05      	ldr	r2, [pc, #20]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01b      	beq.n	80020bc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff fb84 	bl	8001790 <HAL_GetTick>
 8002088:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208a:	e010      	b.n	80020ae <HAL_RCC_OscConfig+0x2be>
 800208c:	40021000 	.word	0x40021000
 8002090:	080035a8 	.word	0x080035a8
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff fb78 	bl	8001790 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e300      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ae:	4ba0      	ldr	r3, [pc, #640]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x2ac>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff fb68 	bl	8001790 <HAL_GetTick>
 80020c0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fb64 	bl	8001790 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e2ec      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d6:	4b96      	ldr	r3, [pc, #600]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2d4>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d060      	beq.n	80021b4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_OscConfig+0x314>
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d119      	bne.n	8002132 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d116      	bne.n	8002132 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002104:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x32c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e2c9      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b84      	ldr	r3, [pc, #528]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	4981      	ldr	r1, [pc, #516]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002130:	e040      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d023      	beq.n	8002182 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213a:	4b7d      	ldr	r3, [pc, #500]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7c      	ldr	r2, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7ff fb23 	bl	8001790 <HAL_GetTick>
 800214a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7ff fb1f 	bl	8001790 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e2a7      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002160:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b70      	ldr	r3, [pc, #448]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	496d      	ldr	r1, [pc, #436]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
 8002180:	e018      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002182:	4b6b      	ldr	r3, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6a      	ldr	r2, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7ff faff 	bl	8001790 <HAL_GetTick>
 8002192:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff fafb 	bl	8001790 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e283      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a8:	4b61      	ldr	r3, [pc, #388]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d07f      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d05f      	beq.n	8002288 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 80021ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ce:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	429a      	cmp	r2, r3
 80021dc:	d037      	beq.n	800224e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d006      	beq.n	80021f6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e25c      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002200:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	4a4a      	ldr	r2, [pc, #296]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002210:	f7ff fabe 	bl	8001790 <HAL_GetTick>
 8002214:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002218:	f7ff faba 	bl	8001790 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b11      	cmp	r3, #17
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e242      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 800222c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ef      	bne.n	8002218 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	f023 0210 	bic.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	493a      	ldr	r1, [pc, #232]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224e:	4b38      	ldr	r3, [pc, #224]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002254:	4a36      	ldr	r2, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7ff fa97 	bl	8001790 <HAL_GetTick>
 8002262:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002266:	f7ff fa93 	bl	8001790 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b11      	cmp	r3, #17
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e21b      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 800227a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0ef      	beq.n	8002266 <HAL_RCC_OscConfig+0x476>
 8002286:	e01b      	b.n	80022c0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002288:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228e:	4a28      	ldr	r2, [pc, #160]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7ff fa7a 	bl	8001790 <HAL_GetTick>
 800229c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a0:	f7ff fa76 	bl	8001790 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b11      	cmp	r3, #17
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1fe      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 80022b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ef      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80c1 	beq.w	8002450 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10e      	bne.n	80022fe <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 80022e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ea:	6593      	str	r3, [r2, #88]	; 0x58
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_RCC_OscConfig+0x540>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_OscConfig+0x544>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_OscConfig+0x544>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_OscConfig+0x544>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7ff fa3b 	bl	8001790 <HAL_GetTick>
 800231a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231c:	e00c      	b.n	8002338 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7ff fa37 	bl	8001790 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d905      	bls.n	8002338 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e1bf      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002338:	4bb1      	ldr	r3, [pc, #708]	; (8002600 <HAL_RCC_OscConfig+0x810>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ec      	beq.n	800231e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d02c      	beq.n	80023aa <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002350:	4bac      	ldr	r3, [pc, #688]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	49a8      	ldr	r1, [pc, #672]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d010      	beq.n	8002398 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002376:	4ba3      	ldr	r3, [pc, #652]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	4aa1      	ldr	r2, [pc, #644]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002386:	4b9f      	ldr	r3, [pc, #636]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	4a9d      	ldr	r2, [pc, #628]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002396:	e018      	b.n	80023ca <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002398:	4b9a      	ldr	r3, [pc, #616]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a99      	ldr	r2, [pc, #612]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a8:	e00f      	b.n	80023ca <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023aa:	4b96      	ldr	r3, [pc, #600]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	4a94      	ldr	r2, [pc, #592]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023ba:	4b92      	ldr	r3, [pc, #584]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	4a90      	ldr	r2, [pc, #576]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7ff f9dd 	bl	8001790 <HAL_GetTick>
 80023d6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7ff f9d9 	bl	8001790 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e15f      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f0:	4b84      	ldr	r3, [pc, #528]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0ed      	beq.n	80023da <HAL_RCC_OscConfig+0x5ea>
 80023fe:	e01d      	b.n	800243c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7ff f9c6 	bl	8001790 <HAL_GetTick>
 8002404:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002406:	e00a      	b.n	800241e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7ff f9c2 	bl	8001790 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e148      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800241e:	4b79      	ldr	r3, [pc, #484]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ed      	bne.n	8002408 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800242c:	4b75      	ldr	r3, [pc, #468]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	4a74      	ldr	r2, [pc, #464]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a6e      	ldr	r2, [pc, #440]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 800244a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d03c      	beq.n	80024d6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01c      	beq.n	800249e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002464:	4b67      	ldr	r3, [pc, #412]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002466:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800246a:	4a66      	ldr	r2, [pc, #408]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7ff f98c 	bl	8001790 <HAL_GetTick>
 8002478:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800247c:	f7ff f988 	bl	8001790 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e110      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800248e:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ef      	beq.n	800247c <HAL_RCC_OscConfig+0x68c>
 800249c:	e01b      	b.n	80024d6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800249e:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80024a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a4:	4a57      	ldr	r2, [pc, #348]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7ff f96f 	bl	8001790 <HAL_GetTick>
 80024b2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b6:	f7ff f96b 	bl	8001790 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0f3      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80024ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ef      	bne.n	80024b6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80e7 	beq.w	80026ae <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	f040 80b7 	bne.w	8002658 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024ea:	4b46      	ldr	r3, [pc, #280]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0203 	and.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d124      	bne.n	8002548 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002508:	3b01      	subs	r3, #1
 800250a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d11b      	bne.n	8002548 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d113      	bne.n	8002548 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	3b01      	subs	r3, #1
 800252e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d109      	bne.n	8002548 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	3b01      	subs	r3, #1
 8002542:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d061      	beq.n	800260c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d056      	beq.n	80025fc <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2c      	ldr	r2, [pc, #176]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002558:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800255a:	f7ff f919 	bl	8001790 <HAL_GetTick>
 800255e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7ff f915 	bl	8001790 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e09d      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCC_OscConfig+0x818>)
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002590:	3a01      	subs	r2, #1
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800259a:	0212      	lsls	r2, r2, #8
 800259c:	4311      	orrs	r1, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025a2:	0852      	lsrs	r2, r2, #1
 80025a4:	3a01      	subs	r2, #1
 80025a6:	0552      	lsls	r2, r2, #21
 80025a8:	4311      	orrs	r1, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025ae:	0852      	lsrs	r2, r2, #1
 80025b0:	3a01      	subs	r2, #1
 80025b2:	0652      	lsls	r2, r2, #25
 80025b4:	430a      	orrs	r2, r1
 80025b6:	4913      	ldr	r1, [pc, #76]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d4:	f7ff f8dc 	bl	8001790 <HAL_GetTick>
 80025d8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff f8d8 	bl	8001790 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e060      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_OscConfig+0x814>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025fa:	e058      	b.n	80026ae <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e057      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
 8002600:	40007000 	.word	0x40007000
 8002604:	40021000 	.word	0x40021000
 8002608:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260c:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d14a      	bne.n	80026ae <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002630:	f7ff f8ae 	bl	8001790 <HAL_GetTick>
 8002634:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7ff f8aa 	bl	8001790 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e032      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x848>
 8002656:	e02a      	b.n	80026ae <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d025      	beq.n	80026aa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 8002664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002668:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 8002670:	f023 0303 	bic.w	r3, r3, #3
 8002674:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	4a0f      	ldr	r2, [pc, #60]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 800267c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002680:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7ff f885 	bl	8001790 <HAL_GetTick>
 8002686:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7ff f881 	bl	8001790 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e009      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_OscConfig+0x8c8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x89a>
 80026a8:	e001      	b.n	80026ae <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3728      	adds	r7, #40	; 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0c8      	b.n	8002862 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_RCC_ClockConfig+0x1b0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b63      	ldr	r3, [pc, #396]	; (800286c <HAL_RCC_ClockConfig+0x1b0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4961      	ldr	r1, [pc, #388]	; (800286c <HAL_RCC_ClockConfig+0x1b0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b5f      	ldr	r3, [pc, #380]	; (800286c <HAL_RCC_ClockConfig+0x1b0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b0      	b.n	8002862 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d04c      	beq.n	80027a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d107      	bne.n	8002724 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002714:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d121      	bne.n	8002764 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e09e      	b.n	8002862 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d107      	bne.n	800273c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272c:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d115      	bne.n	8002764 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e092      	b.n	8002862 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d107      	bne.n	8002754 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002744:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e086      	b.n	8002862 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002754:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e07e      	b.n	8002862 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002764:	4b42      	ldr	r3, [pc, #264]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 0203 	bic.w	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	493f      	ldr	r1, [pc, #252]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002776:	f7ff f80b 	bl	8001790 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277c:	e00a      	b.n	8002794 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277e:	f7ff f807 	bl	8001790 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e066      	b.n	8002862 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002794:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 020c 	and.w	r2, r3, #12
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d1eb      	bne.n	800277e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	492c      	ldr	r1, [pc, #176]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c4:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_RCC_ClockConfig+0x1b0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d210      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <HAL_RCC_ClockConfig+0x1b0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4924      	ldr	r1, [pc, #144]	; (800286c <HAL_RCC_ClockConfig+0x1b0>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b22      	ldr	r3, [pc, #136]	; (800286c <HAL_RCC_ClockConfig+0x1b0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e036      	b.n	8002862 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4918      	ldr	r1, [pc, #96]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4910      	ldr	r1, [pc, #64]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002832:	f000 f825 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCC_ClockConfig+0x1b4>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490c      	ldr	r1, [pc, #48]	; (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe ff4a 	bl	80016f0 <HAL_InitTick>
 800285c:	4603      	mov	r3, r0
 800285e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002860:	7afb      	ldrb	r3, [r7, #11]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40022000 	.word	0x40022000
 8002870:	40021000 	.word	0x40021000
 8002874:	080035a8 	.word	0x080035a8
 8002878:	20000000 	.word	0x20000000
 800287c:	20000004 	.word	0x20000004

08002880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x34>
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d121      	bne.n	80028f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d11e      	bne.n	80028f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028b4:	4b34      	ldr	r3, [pc, #208]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028c0:	4b31      	ldr	r3, [pc, #196]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e005      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028d0:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028dc:	4a2b      	ldr	r2, [pc, #172]	; (800298c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d102      	bne.n	80028fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <HAL_RCC_GetSysClockFreq+0x110>)
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	e004      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d101      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_RCC_GetSysClockFreq+0x114>)
 8002906:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d134      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0xa6>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d003      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0xac>
 8002924:	e005      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_RCC_GetSysClockFreq+0x110>)
 8002928:	617b      	str	r3, [r7, #20]
      break;
 800292a:	e005      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_GetSysClockFreq+0x114>)
 800292e:	617b      	str	r3, [r7, #20]
      break;
 8002930:	e002      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	617b      	str	r3, [r7, #20]
      break;
 8002936:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	3301      	adds	r3, #1
 8002944:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	fb02 f203 	mul.w	r2, r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0e5b      	lsrs	r3, r3, #25
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	3301      	adds	r3, #1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002978:	69bb      	ldr	r3, [r7, #24]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	080035b8 	.word	0x080035b8
 8002990:	00f42400 	.word	0x00f42400
 8002994:	007a1200 	.word	0x007a1200

08002998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029b0:	f7ff f9ba 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 80029b4:	6178      	str	r0, [r7, #20]
 80029b6:	e014      	b.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	; 0x58
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029d0:	f7ff f9aa 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 80029d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e8:	d10b      	bne.n	8002a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d919      	bls.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2ba0      	cmp	r3, #160	; 0xa0
 80029f4:	d902      	bls.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029f6:	2302      	movs	r3, #2
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	e013      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029fc:	2301      	movs	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e010      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b80      	cmp	r3, #128	; 0x80
 8002a06:	d902      	bls.n	8002a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a08:	2303      	movs	r3, #3
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	e00a      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d102      	bne.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a14:	2302      	movs	r3, #2
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e004      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b70      	cmp	r3, #112	; 0x70
 8002a1e:	d101      	bne.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a20:	2301      	movs	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 0207 	bic.w	r2, r3, #7
 8002a2c:	4909      	ldr	r1, [pc, #36]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40022000 	.word	0x40022000

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a60:	2300      	movs	r3, #0
 8002a62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a64:	2300      	movs	r3, #0
 8002a66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 809e 	beq.w	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a7a:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a90:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	4a3f      	ldr	r2, [pc, #252]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aac:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a39      	ldr	r2, [pc, #228]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fe6a 	bl	8001790 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002abe:	e009      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac0:	f7fe fe66 	bl	8001790 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d902      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ad2:	e005      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad4:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ef      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d15a      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ae6:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01e      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d019      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b2e:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d016      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fe26 	bl	8001790 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b46:	e00b      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe fe22 	bl	8001790 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d902      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b5e:	e006      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0ec      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4904      	ldr	r1, [pc, #16]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b8a:	e009      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
 8002b90:	e006      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba0:	7c7b      	ldrb	r3, [r7, #17]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b6e      	ldr	r3, [pc, #440]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	4a6d      	ldr	r2, [pc, #436]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bbe:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f023 0203 	bic.w	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4964      	ldr	r1, [pc, #400]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be0:	4b5f      	ldr	r3, [pc, #380]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f023 020c 	bic.w	r2, r3, #12
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	495c      	ldr	r1, [pc, #368]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c02:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4953      	ldr	r1, [pc, #332]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c24:	4b4e      	ldr	r3, [pc, #312]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	494b      	ldr	r1, [pc, #300]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c46:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4942      	ldr	r1, [pc, #264]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c68:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	493a      	ldr	r1, [pc, #232]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c8a:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	4931      	ldr	r1, [pc, #196]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	4929      	ldr	r1, [pc, #164]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	4920      	ldr	r1, [pc, #128]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d015      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	4918      	ldr	r1, [pc, #96]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d015      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	490a      	ldr	r1, [pc, #40]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d46:	d105      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d54:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000

08002d64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e049      	b.n	8002e0a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	795b      	ldrb	r3, [r3, #5]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fb48 	bl	800141c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0204 	orr.w	r2, r2, #4
 8002da0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d104      	bne.n	8002dba <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2204      	movs	r2, #4
 8002db4:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e027      	b.n	8002e0a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002dba:	f7fe fce9 	bl	8001790 <HAL_GetTick>
 8002dbe:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002dc0:	e015      	b.n	8002dee <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002dc2:	f7fe fce5 	bl	8001790 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d90e      	bls.n	8002dee <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d107      	bne.n	8002dee <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00d      	b.n	8002e0a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d0e2      	beq.n	8002dc2 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e095      	b.n	8002f50 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d108      	bne.n	8002e3e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e34:	d009      	beq.n	8002e4a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	61da      	str	r2, [r3, #28]
 8002e3c:	e005      	b.n	8002e4a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fe fb0d 	bl	8001484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e80:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e8a:	d902      	bls.n	8002e92 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e002      	b.n	8002e98 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ea0:	d007      	beq.n	8002eb2 <HAL_SPI_Init+0xa0>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eaa:	d002      	beq.n	8002eb2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	ea42 0103 	orr.w	r1, r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	f003 0204 	and.w	r2, r3, #4
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f2e:	ea42 0103 	orr.w	r1, r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e049      	b.n	8002ffe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe fac2 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 f986 	bl	80032a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	d122      	bne.n	8003062 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d11b      	bne.n	8003062 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0202 	mvn.w	r2, #2
 8003032:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f90f 	bl	800326c <HAL_TIM_IC_CaptureCallback>
 800304e:	e005      	b.n	800305c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f901 	bl	8003258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f912 	bl	8003280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d122      	bne.n	80030b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d11b      	bne.n	80030b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0204 	mvn.w	r2, #4
 8003086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8e5 	bl	800326c <HAL_TIM_IC_CaptureCallback>
 80030a2:	e005      	b.n	80030b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8d7 	bl	8003258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8e8 	bl	8003280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d122      	bne.n	800310a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d11b      	bne.n	800310a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0208 	mvn.w	r2, #8
 80030da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f8bb 	bl	800326c <HAL_TIM_IC_CaptureCallback>
 80030f6:	e005      	b.n	8003104 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f8ad 	bl	8003258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8be 	bl	8003280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b10      	cmp	r3, #16
 8003116:	d122      	bne.n	800315e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b10      	cmp	r3, #16
 8003124:	d11b      	bne.n	800315e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0210 	mvn.w	r2, #16
 800312e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2208      	movs	r2, #8
 8003134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f891 	bl	800326c <HAL_TIM_IC_CaptureCallback>
 800314a:	e005      	b.n	8003158 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f883 	bl	8003258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f894 	bl	8003280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10e      	bne.n	800318a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0201 	mvn.w	r2, #1
 8003182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f85d 	bl	8003244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d10e      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b80      	cmp	r3, #128	; 0x80
 80031a4:	d107      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f94d 	bl	8003450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d0:	2b80      	cmp	r3, #128	; 0x80
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f940 	bl	8003464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d10e      	bne.n	8003210 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f842 	bl	8003294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b20      	cmp	r3, #32
 800321c:	d10e      	bne.n	800323c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b20      	cmp	r3, #32
 800322a:	d107      	bne.n	800323c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0220 	mvn.w	r2, #32
 8003234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f900 	bl	800343c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <TIM_Base_SetConfig+0xbc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x20>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a21      	ldr	r2, [pc, #132]	; (8003364 <TIM_Base_SetConfig+0xbc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <TIM_Base_SetConfig+0x52>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d007      	beq.n	80032fa <TIM_Base_SetConfig+0x52>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <TIM_Base_SetConfig+0xc0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_Base_SetConfig+0x52>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <TIM_Base_SetConfig+0xc4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d108      	bne.n	800330c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a0c      	ldr	r2, [pc, #48]	; (8003364 <TIM_Base_SetConfig+0xbc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0xa0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0b      	ldr	r2, [pc, #44]	; (8003368 <TIM_Base_SetConfig+0xc0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0xa0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <TIM_Base_SetConfig+0xc4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40014000 	.word	0x40014000
 800336c:	40014400 	.word	0x40014400

08003370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003384:	2302      	movs	r3, #2
 8003386:	e04f      	b.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a21      	ldr	r2, [pc, #132]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a14      	ldr	r2, [pc, #80]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d004      	beq.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a10      	ldr	r2, [pc, #64]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d10c      	bne.n	8003416 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40012c00 	.word	0x40012c00
 8003438:	40014000 	.word	0x40014000

0800343c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <__errno>:
 8003478:	4b01      	ldr	r3, [pc, #4]	; (8003480 <__errno+0x8>)
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	2000000c 	.word	0x2000000c

08003484 <__libc_init_array>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4d0d      	ldr	r5, [pc, #52]	; (80034bc <__libc_init_array+0x38>)
 8003488:	4c0d      	ldr	r4, [pc, #52]	; (80034c0 <__libc_init_array+0x3c>)
 800348a:	1b64      	subs	r4, r4, r5
 800348c:	10a4      	asrs	r4, r4, #2
 800348e:	2600      	movs	r6, #0
 8003490:	42a6      	cmp	r6, r4
 8003492:	d109      	bne.n	80034a8 <__libc_init_array+0x24>
 8003494:	4d0b      	ldr	r5, [pc, #44]	; (80034c4 <__libc_init_array+0x40>)
 8003496:	4c0c      	ldr	r4, [pc, #48]	; (80034c8 <__libc_init_array+0x44>)
 8003498:	f000 f87a 	bl	8003590 <_init>
 800349c:	1b64      	subs	r4, r4, r5
 800349e:	10a4      	asrs	r4, r4, #2
 80034a0:	2600      	movs	r6, #0
 80034a2:	42a6      	cmp	r6, r4
 80034a4:	d105      	bne.n	80034b2 <__libc_init_array+0x2e>
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
 80034a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ac:	4798      	blx	r3
 80034ae:	3601      	adds	r6, #1
 80034b0:	e7ee      	b.n	8003490 <__libc_init_array+0xc>
 80034b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b6:	4798      	blx	r3
 80034b8:	3601      	adds	r6, #1
 80034ba:	e7f2      	b.n	80034a2 <__libc_init_array+0x1e>
 80034bc:	08003704 	.word	0x08003704
 80034c0:	08003704 	.word	0x08003704
 80034c4:	08003704 	.word	0x08003704
 80034c8:	08003708 	.word	0x08003708

080034cc <memset>:
 80034cc:	4402      	add	r2, r0
 80034ce:	4603      	mov	r3, r0
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d100      	bne.n	80034d6 <memset+0xa>
 80034d4:	4770      	bx	lr
 80034d6:	f803 1b01 	strb.w	r1, [r3], #1
 80034da:	e7f9      	b.n	80034d0 <memset+0x4>

080034dc <abort>:
 80034dc:	b508      	push	{r3, lr}
 80034de:	2006      	movs	r0, #6
 80034e0:	f000 f83a 	bl	8003558 <raise>
 80034e4:	2001      	movs	r0, #1
 80034e6:	f7fe f8a5 	bl	8001634 <_exit>

080034ea <memcpy>:
 80034ea:	440a      	add	r2, r1
 80034ec:	4291      	cmp	r1, r2
 80034ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80034f2:	d100      	bne.n	80034f6 <memcpy+0xc>
 80034f4:	4770      	bx	lr
 80034f6:	b510      	push	{r4, lr}
 80034f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003500:	4291      	cmp	r1, r2
 8003502:	d1f9      	bne.n	80034f8 <memcpy+0xe>
 8003504:	bd10      	pop	{r4, pc}

08003506 <_raise_r>:
 8003506:	291f      	cmp	r1, #31
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	4604      	mov	r4, r0
 800350c:	460d      	mov	r5, r1
 800350e:	d904      	bls.n	800351a <_raise_r+0x14>
 8003510:	2316      	movs	r3, #22
 8003512:	6003      	str	r3, [r0, #0]
 8003514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003518:	bd38      	pop	{r3, r4, r5, pc}
 800351a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800351c:	b112      	cbz	r2, 8003524 <_raise_r+0x1e>
 800351e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003522:	b94b      	cbnz	r3, 8003538 <_raise_r+0x32>
 8003524:	4620      	mov	r0, r4
 8003526:	f000 f831 	bl	800358c <_getpid_r>
 800352a:	462a      	mov	r2, r5
 800352c:	4601      	mov	r1, r0
 800352e:	4620      	mov	r0, r4
 8003530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003534:	f000 b818 	b.w	8003568 <_kill_r>
 8003538:	2b01      	cmp	r3, #1
 800353a:	d00a      	beq.n	8003552 <_raise_r+0x4c>
 800353c:	1c59      	adds	r1, r3, #1
 800353e:	d103      	bne.n	8003548 <_raise_r+0x42>
 8003540:	2316      	movs	r3, #22
 8003542:	6003      	str	r3, [r0, #0]
 8003544:	2001      	movs	r0, #1
 8003546:	e7e7      	b.n	8003518 <_raise_r+0x12>
 8003548:	2400      	movs	r4, #0
 800354a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800354e:	4628      	mov	r0, r5
 8003550:	4798      	blx	r3
 8003552:	2000      	movs	r0, #0
 8003554:	e7e0      	b.n	8003518 <_raise_r+0x12>
	...

08003558 <raise>:
 8003558:	4b02      	ldr	r3, [pc, #8]	; (8003564 <raise+0xc>)
 800355a:	4601      	mov	r1, r0
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	f7ff bfd2 	b.w	8003506 <_raise_r>
 8003562:	bf00      	nop
 8003564:	2000000c 	.word	0x2000000c

08003568 <_kill_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	4d07      	ldr	r5, [pc, #28]	; (8003588 <_kill_r+0x20>)
 800356c:	2300      	movs	r3, #0
 800356e:	4604      	mov	r4, r0
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	602b      	str	r3, [r5, #0]
 8003576:	f7fe f84d 	bl	8001614 <_kill>
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	d102      	bne.n	8003584 <_kill_r+0x1c>
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	b103      	cbz	r3, 8003584 <_kill_r+0x1c>
 8003582:	6023      	str	r3, [r4, #0]
 8003584:	bd38      	pop	{r3, r4, r5, pc}
 8003586:	bf00      	nop
 8003588:	20000150 	.word	0x20000150

0800358c <_getpid_r>:
 800358c:	f7fe b83a 	b.w	8001604 <_getpid>

08003590 <_init>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr

0800359c <_fini>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr
